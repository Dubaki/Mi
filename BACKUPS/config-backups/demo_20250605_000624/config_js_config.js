/*
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (config.js)
–í–ï–†–°–ò–Ø: 1.2.0 (–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–û)
–†–ï–ñ–ò–ú: DEMO
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-06-04 23:58:50
==========================================================================================
*/

window.MishuraApp = window.MishuraApp || {};
window.MishuraApp.config = (function() {
    'use strict';
    
    let logger;
    let isInitialized = false;
    
    const CONFIG = {
        // API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è demo
        API: {
            POSSIBLE_PORTS: [8000, 8001],
            POSSIBLE_HOSTS: ['http://localhost', 'http://127.0.0.1'],
            VERSION: 'v1',
            TIMEOUT: 30000,
            RETRIES: 3,
            BASE_URL: 'http://localhost:8000/api/v1',
            PORT: 8000
        },
        
        // UI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        UI: {
            TOAST_DURATION: 5000,
            LOADING_MIN_DURATION: 2000,
            ANIMATION_DURATION: 500
        },
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∞–π–ª–æ–≤
        FILES: {
            MAX_SIZE: 20 * 1024 * 1024,
            ALLOWED_TYPES: ['image/jpeg', 'image/png', 'image/webp', 'image/jpg'],
            MAX_COMPARE_IMAGES: 4
        },
        
        // –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
        MODES: {
            SINGLE: 'single',
            COMPARE: 'compare'
        },
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∂–∏–º–∞
        DEBUG: true,
        DEMO_MODE: true,
        PRODUCTION: false,
        ENVIRONMENT: 'demo',
        
        // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        DEMO_MESSAGES: true,
        PAYMENT_ENABLED: false,
        AI_ANALYSIS_REAL: false
    };
    
    function init() {
        if (isInitialized) {
            return CONFIG;
        }
        
        logger = window.MishuraApp.utils?.logger || createFallbackLogger();
        logger.info(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–ò–®–£–†–ê –≤ —Ä–µ–∂–∏–º–µ: DEMO`);
        
        detectApiUrl();
        isInitialized = true;
        
        if (CONFIG.DEMO_MODE) {
            logger.warn("üß™ –í–ù–ò–ú–ê–ù–ò–ï: –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –î–ï–ú–û —Ä–µ–∂–∏–º–µ");
        } else if (CONFIG.PRODUCTION) {
            logger.info("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ PRODUCTION —Ä–µ–∂–∏–º–µ");
        } else {
            logger.info("üîß –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ DEVELOPMENT —Ä–µ–∂–∏–º–µ");
        }
        
        return CONFIG;
    }
    
    function createFallbackLogger() {
        return {
            debug: (...args) => console.debug("Config:", ...args),
            info: (...args) => console.info("Config:", ...args),
            warn: (...args) => console.warn("Config:", ...args),
            error: (...args) => console.error("Config:", ...args)
        };
    }
    
    function detectApiUrl() {
        if (CONFIG.PRODUCTION) {
            CONFIG.API.BASE_URL = 'https://style-ai-bot.onrender.com/api/v1';
            return;
        }
        
        // –î–ª—è development –∏ demo –ø—Ä–æ–±—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—ã
        for (const port of CONFIG.API.POSSIBLE_PORTS) {
            const url = `http://localhost:${port}/api/v1`;
            
            fetch(`http://localhost:${port}/api/v1/health`, {
                method: 'GET',
                timeout: 3000
            }).then(response => {
                if (response.ok) {
                    CONFIG.API.BASE_URL = url;
                    CONFIG.API.PORT = port;
                    logger.info(`API –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
                    return;
                }
            }).catch(error => {
                logger.debug(`–ü–æ—Ä—Ç ${port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
            });
        }
        
        if (!CONFIG.API.BASE_URL) {
            CONFIG.API.BASE_URL = 'http://localhost:8000/api/v1';
            CONFIG.API.PORT = 8000;
        }
    }
    
    function getApiUrl(endpoint = '') {
        if (!CONFIG.API.BASE_URL) {
            detectApiUrl();
        }
        return CONFIG.API.BASE_URL + (endpoint ? `/${endpoint.replace(/^\//, '')}` : '');
    }
    
    function isValidImageFile(file) {
        if (!file) return false;
        return CONFIG.FILES.ALLOWED_TYPES.includes(file.type) && 
               file.size <= CONFIG.FILES.MAX_SIZE;
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–π API
    return {
        init,
        get: () => CONFIG,
        api: () => CONFIG.API,
        ui: () => CONFIG.UI,
        files: () => CONFIG.FILES,
        modes: () => CONFIG.MODES,
        getApiUrl,
        isValidImageFile,
        isInitialized: () => isInitialized,
        isDebug: () => CONFIG.DEBUG,
        isDemoMode: () => CONFIG.DEMO_MODE,
        isProduction: () => CONFIG.PRODUCTION,
        getEnvironment: () => CONFIG.ENVIRONMENT
    };
})();

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.MishuraApp.config.init();
    });
} else {
    window.MishuraApp.config.init();
}
