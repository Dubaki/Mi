"""
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ì–∞—Ä–¥–µ—Ä–æ–±–∞ (wardrobe_callbacks.py)
–í–ï–†–°–ò–Ø: 1.0.0
–î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø: 2025-05-23

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ì–∞—Ä–¥–µ—Ä–æ–±
==========================================================================================
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_wardrobe_item, update_wardrobe_item, delete_wardrobe_item, get_user_wardrobe, get_wardrobe_stats

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("MishuraWardrobeCallbacks")

async def handle_view_item(query, user_id, item_id, context):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–∞."""
    item = get_wardrobe_item(item_id, user_id)
    
    if not item:
        await query.edit_message_text("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ.")
        return
        
    item_name = item.get('item_name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    item_tag = item.get('item_tag') or ""
    category = item.get('category') or ""
    created_date = item.get('created_at', '')
    
    caption = f"üíé <b>{item_name}</b>\n\n"
    if item_tag:
        caption += f"üè∑Ô∏è –¢–µ–≥: {item_tag}\n"
    if category:
        caption += f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
    caption += f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {created_date}\n"
    
    keyboard = [
        [
            InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_item_{item_id}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_item_{item_id}")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≥–∞—Ä–¥–µ—Ä–æ–±—É", callback_data="refresh_wardrobe")]
    ]
    
    try:
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=item['telegram_file_id'],
            caption=caption,
            parse_mode='HTML',
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        await query.delete_message()
    except Exception as e_view:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –ø—Ä–µ–¥–º–µ—Ç–∞ {item_id}: {e_view}")
        await query.edit_message_text(f"–ü—Ä–µ–¥–º–µ—Ç –Ω–∞–π–¥–µ–Ω, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n{caption}", parse_mode='HTML')

async def handle_edit_item(query, user_id, item_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞."""
    item = get_wardrobe_item(item_id, user_id)
    
    if not item:
        await query.edit_message_text("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ.")
        return
        
    current_name = item.get('item_name') or ""
    current_tag = item.get('item_tag') or ""
    
    await query.edit_message_text(
        f"üìù <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {current_name or '–Ω–µ –∑–∞–¥–∞–Ω–æ'}\n"
        f"–¢–µ–∫—É—â–∏–π —Ç–µ–≥: {current_tag or '–Ω–µ –∑–∞–¥–∞–Ω'}\n\n"
        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        f"<code>/name_{item_id} –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ</code>\n\n"
        f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:\n"
        f"<code>/tag_{item_id} –Ω–æ–≤—ã–π_—Ç–µ–≥</code>",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_item_{item_id}")]])
    )

async def handle_delete_item(query, user_id, item_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞."""
    item = get_wardrobe_item(item_id, user_id)
    
    if not item:
        await query.edit_message_text("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ.")
        return
        
    item_name = item.get('item_name') or "–ø—Ä–µ–¥–º–µ—Ç"
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{item_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_item_{item_id}")
        ]
    ]
    
    await query.edit_message_text(
        f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ¬´{item_name}¬ª –∏–∑ –≥–∞—Ä–¥–µ—Ä–æ–±–∞?\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_confirm_delete(query, user_id, item_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞."""
    if delete_wardrobe_item(item_id, user_id):
        await query.edit_message_text(
            "‚úÖ –ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –≥–∞—Ä–¥–µ—Ä–æ–±–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üíé –ö –≥–∞—Ä–¥–µ—Ä–æ–±—É", callback_data="refresh_wardrobe")]])
        )
    else:
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_refresh_wardrobe(query, user_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–∞."""
    wardrobe_items = get_user_wardrobe(user_id, limit=10)
    if not wardrobe_items:
        await query.edit_message_text(
            "üíé <b>–í–∞—à –ì–∞—Ä–¥–µ—Ä–æ–± –ø—É—Å—Ç</b>\n\n"
            "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –æ–¥–µ–∂–¥—ã –≤ –ì–∞—Ä–¥–µ—Ä–æ–± –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!",
            parse_mode='HTML'
        )
        return
    
    message = "üíé <b>–í–∞—à –ì–∞—Ä–¥–µ—Ä–æ–±:</b>\n\n"
    keyboard = []
    for item in wardrobe_items:
        item_name = item.get('item_name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        item_tag = item.get('item_tag') or ""
        created_date = item.get('created_at', '')[:10]
        
        display_name = f"{item_name}"
        if item_tag:
            display_name += f" #{item_tag}"
            
        message += f"üî∏ {display_name} (–¥–æ–±–∞–≤–ª–µ–Ω–æ: {created_date})\n"
        
        keyboard.append([
            InlineKeyboardButton(f"üëÅÔ∏è {item_name[:15]}...", callback_data=f"view_item_{item['id']}"),
            InlineKeyboardButton("üìù", callback_data=f"edit_item_{item['id']}"),
            InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_item_{item['id']}")
        ])
    
    keyboard.append([
        InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="wardrobe_stats"),
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_wardrobe")
    ])
    
    message += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(wardrobe_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤</i>"
    await query.edit_message_text(message, parse_mode='HTML', reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_wardrobe_stats(query, user_id):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–∞."""
    stats = get_wardrobe_stats(user_id)
    await query.edit_message_text(
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –≥–∞—Ä–¥–µ—Ä–æ–±–∞:</b>\n\n"
        f"üëó –í—Å–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: {stats['total_items']}\n"
        f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –∑–∞ –º–µ—Å—è—Ü: {stats['items_this_month']}\n",
        parse_mode='HTML',
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –≥–∞—Ä–¥–µ—Ä–æ–±—É", callback_data="refresh_wardrobe")]])
    ) 