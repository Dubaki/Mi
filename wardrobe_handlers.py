"""
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ì–∞—Ä–¥–µ—Ä–æ–±–∞ (wardrobe_handlers.py)
–í–ï–†–°–ò–Ø: 1.0.0
–î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø: 2025-05-23

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ –ì–∞—Ä–¥–µ—Ä–æ–±
==========================================================================================
"""
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_wardrobe_item, update_wardrobe_item, get_user_wardrobe

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("MishuraWardrobe")

async def handle_name_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /name_ID –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–∞."""
    user_id = update.effective_user.id
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/name_ID –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞"
        )
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º item_id –∏–∑ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /name_123 -> 123)
        command_text = update.message.text
        if not command_text.startswith('/name_'):
            return
            
        parts = command_text.split(' ', 1)
        if len(parts) < 2:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.")
            return
            
        item_id_str = parts[0][6:]  # –£–±–∏—Ä–∞–µ–º '/name_'
        item_id = int(item_id_str)
        new_name = parts[1].strip()
        
        if len(new_name) > 100:
            await update.message.reply_text("–ù–∞–∑–≤–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        item = get_wardrobe_item(item_id, user_id)
        if not item:
            await update.message.reply_text("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        if update_wardrobe_item(item_id, user_id, item_name=new_name):
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=f"view_item_{item_id}")],
                [InlineKeyboardButton("üíé –ö –≥–∞—Ä–¥–µ—Ä–æ–±—É", callback_data="refresh_wardrobe")]
            ]
            await update.message.reply_text(
                f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: ¬´{new_name}¬ª",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞.")
            
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.")

async def handle_tag_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tag_ID –Ω–æ–≤—ã–π_—Ç–µ–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–≥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–∞."""
    user_id = update.effective_user.id
    
    try:
        command_text = update.message.text
        if not command_text.startswith('/tag_'):
            return
            
        parts = command_text.split(' ', 1)
        if len(parts) < 2:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–≥ –ø—Ä–µ–¥–º–µ—Ç–∞.")
            return
            
        item_id_str = parts[0][5:]  # –£–±–∏—Ä–∞–µ–º '/tag_'
        item_id = int(item_id_str)
        new_tag = parts[1].strip().lower()
        
        if len(new_tag) > 50:
            await update.message.reply_text("–¢–µ–≥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).")
            return
        
        # –£–±–∏—Ä–∞–µ–º # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ —É–∫–∞–∑–∞–ª
        if new_tag.startswith('#'):
            new_tag = new_tag[1:]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        item = get_wardrobe_item(item_id, user_id)
        if not item:
            await update.message.reply_text("–ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –≥–∞—Ä–¥–µ—Ä–æ–±–µ.")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥
        if update_wardrobe_item(item_id, user_id, item_tag=new_tag):
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data=f"view_item_{item_id}")],
                [InlineKeyboardButton("üíé –ö –≥–∞—Ä–¥–µ—Ä–æ–±—É", callback_data="refresh_wardrobe")]
            ]
            await update.message.reply_text(
                f"‚úÖ –¢–µ–≥ –ø—Ä–µ–¥–º–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: #{new_tag}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥ –ø—Ä–µ–¥–º–µ—Ç–∞.")
            
    except (ValueError, IndexError):
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞.")

async def handle_wardrobe_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /wardrobe –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥–∞—Ä–¥–µ—Ä–æ–±—É."""
    user_id = update.effective_user.id
    
    try:
        wardrobe_items = get_user_wardrobe(user_id, limit=10)
        if not wardrobe_items:
            await update.message.reply_html(
                "üíé <b>–í–∞—à –ì–∞—Ä–¥–µ—Ä–æ–± –ø—É—Å—Ç</b>\n\n"
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã –æ–¥–µ–∂–¥—ã –≤ –ì–∞—Ä–¥–µ—Ä–æ–± –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!"
            )
            return
        
        message = "üíé <b>–í–∞—à –ì–∞—Ä–¥–µ—Ä–æ–±:</b>\n\n"
        keyboard = []
        
        for item in wardrobe_items:
            item_name = item.get('item_name') or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            item_tag = item.get('item_tag') or ""
            created_date = item.get('created_at', '')[:10]
            
            display_name = f"{item_name}"
            if item_tag:
                display_name += f" #{item_tag}"
                
            message += f"üî∏ {display_name} (–¥–æ–±–∞–≤–ª–µ–Ω–æ: {created_date})\n"
            
            keyboard.append([
                InlineKeyboardButton(f"üëÅÔ∏è {item_name[:15]}...", callback_data=f"view_item_{item['id']}"),
                InlineKeyboardButton("üìù", callback_data=f"edit_item_{item['id']}"),
                InlineKeyboardButton("üóëÔ∏è", callback_data=f"delete_item_{item['id']}")
            ])
        
        keyboard.append([
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="wardrobe_stats"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_wardrobe")
        ])
        
        message += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(wardrobe_items)} –ø—Ä–µ–¥–º–µ—Ç–æ–≤</i>"
        await update.message.reply_html(message, reply_markup=InlineKeyboardMarkup(keyboard))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–∞—Ä–¥–µ—Ä–æ–±–∞ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –≥–∞—Ä–¥–µ—Ä–æ–±. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 