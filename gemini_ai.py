"""
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: –ú–æ–¥—É–ª—å –ò–ò (gemini_ai.py)
–í–ï–†–°–ò–Ø: 0.5.0 (–£–õ–£–ß–®–ï–ù–û –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–û–í)
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-06-20

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í –í–ï–†–°–ò–ò 0.5.0:
- –£–ª—É—á—à–µ–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏
- –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–∫–æ–Ω–∫–∏ –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã —Å —á–µ—Ç–∫–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
- –£–±—Ä–∞–Ω—ã —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –î–æ–±–∞–≤–ª–µ–Ω—ã —á–µ–∫–±–æ–∫—Å—ã ‚úÖ –∏ –±—É–ª–ª–µ—Ç—ã –¥–ª—è —Å–ø–∏—Å–∫–æ–≤
==========================================================================================
"""
import os
import logging
import time
import asyncio
import google.generativeai as genai
from dotenv import load_dotenv
from PIL import Image, ImageOps, ImageDraw
from io import BytesIO
from typing import Optional, List, Tuple, Union, Dict, Any
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

logger.info("üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è Gemini AI –¥–ª—è –ú–ò–®–£–†–ê")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

# –ü—Ä–æ—Å—Ç–æ–π –∑–∞–≥–ª—É—à–∫–∞ –∫–µ—à-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
class DummyCacheManager:
    def __init__(self):
        logger.info("DummyCacheManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def get_from_cache(self, *args, **kwargs):
        return None
    
    def save_to_cache(self, *args, **kwargs):
        pass

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini API
API_CONFIGURED_SUCCESSFULLY = False

if not GEMINI_API_KEY:
    logger.error("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    raise ValueError("GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

try:
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º API
    genai.configure(api_key=GEMINI_API_KEY)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Gemini...")
    
    # –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    models_to_try = [
        "gemini-1.5-flash-latest",
        "gemini-1.5-flash", 
        "gemini-pro-vision",
        "gemini-pro"
    ]
    
    VISION_MODEL = None
    
    for model_name in models_to_try:
        try:
            # –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            test_model = genai.GenerativeModel(model_name)
            VISION_MODEL = model_name
            logger.info(f"‚úÖ –ú–æ–¥–µ–ª—å {model_name} –¥–æ—Å—Ç—É–ø–Ω–∞")
            break
        except Exception as model_error:
            logger.warning(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å {model_name} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {str(model_error)}")
            continue
    
    if VISION_MODEL:
        API_CONFIGURED_SUCCESSFULLY = True
        logger.info(f"‚úÖ Gemini API —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é: {VISION_MODEL}")
    else:
        raise RuntimeError("–ù–∏ –æ–¥–Ω–∞ –∏–∑ –º–æ–¥–µ–ª–µ–π Gemini –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
        
except Exception as e:
    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Gemini API: {str(e)}")
    raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞—Ç—å Gemini API: {str(e)}")

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
MAX_RETRIES = 3
RETRY_DELAY = 2

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞
cache_manager = DummyCacheManager()

async def test_gemini_connection() -> bool:
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Gemini API.
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Gemini API...")
    
    if not API_CONFIGURED_SUCCESSFULLY:
        logger.error("‚ùå Gemini API –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω")
        return False
    
    try:
        model = genai.GenerativeModel(VISION_MODEL)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = model.generate_content("–ü—Ä–∏–≤–µ—Ç! –û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        if response and response.text:
            logger.info(f"‚úÖ Gemini API —Ä–∞–±–æ—Ç–∞–µ—Ç! –û—Ç–≤–µ—Ç: {response.text.strip()}")
            return True
        else:
            logger.error("‚ùå API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Gemini API: {str(e)}")
        return False

def handle_gemini_error(error: Exception, context: str = "Gemini AI") -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Gemini API —Å –ø–æ–Ω—è—Ç–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏."""
    error_str = str(error).lower()
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ {context}: {type(error).__name__} - {error_str}")
    
    if "api key" in error_str or "authentication" in error_str:
        return "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
    elif "content filtered" in error_str or "safety" in error_str:
        return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
    elif "quota" in error_str or "limit" in error_str:
        return "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    elif "deadline" in error_str or "timeout" in error_str:
        return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    else:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {type(error).__name__}"

def optimize_image(img_pil: Image.Image, max_size: int = 1024, quality: int = 85) -> bytes:
    """
    –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API.
    
    Args:
        img_pil: –û–±—ä–µ–∫—Ç PIL.Image
        max_size: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Å—Ç–æ—Ä–æ–Ω—ã
        quality: –ö–∞—á–µ—Å—Ç–≤–æ JPEG
        
    Returns:
        bytes: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    logger.info(f"üì∑ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –∏—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä {img_pil.size}")
    
    try:
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        width, height = img_pil.size
        if width > max_size or height > max_size:
            if width > height:
                new_width = max_size
                new_height = int(height * (max_size / width))
            else:
                new_height = max_size
                new_width = int(width * (max_size / height))
            
            img_pil = img_pil.resize((new_width, new_height), Image.Resampling.LANCZOS)
            logger.info(f"üìè –†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_width}x{new_height}")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if img_pil.mode in ('RGBA', 'LA') or (img_pil.mode == 'P' and 'transparency' in img_pil.info):
            background = Image.new("RGB", img_pil.size, (255, 255, 255))
            if img_pil.mode == 'P':
                img_pil = img_pil.convert('RGBA')
            background.paste(img_pil, mask=img_pil.split()[-1] if img_pil.mode == 'RGBA' else None)
            img_pil = background
        elif img_pil.mode != 'RGB':
            img_pil = img_pil.convert('RGB')
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JPEG
        img_byte_arr = BytesIO()
        img_pil.save(img_byte_arr, format='JPEG', quality=quality, optimize=True)
        optimized_bytes = img_byte_arr.getvalue()
        
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(optimized_bytes)} –±–∞–π—Ç")
        return optimized_bytes
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        raise ValueError(f"–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

def create_analysis_prompt(occasion: str, preferences: Optional[str] = None) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–µ–∂–¥—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º."""
    base_prompt = f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç –ú–ò–®–£–†–ê. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–¥–µ–∂–¥—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –¥–ª—è –ø–æ–≤–æ–¥–∞: {occasion}.

–í–ê–ñ–ù–û! –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ—á–Ω–æ —Ç–∞–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞:

üéΩ **–ê–ù–ê–õ–ò–ó –û–ë–†–ê–ó–ê**

**üéØ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞**
‚úÖ –ö—Ä–∞—Ç–∫–∞—è –æ—Ü–µ–Ω–∫–∞ —É–º–µ—Å—Ç–Ω–æ—Å—Ç–∏ –æ–±—Ä–∞–∑–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–≤–æ–¥–∞

**üé® –¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞**  
‚úÖ –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ –∏ –∏—Ö —Å–æ—á–µ—Ç–∞–Ω–∏—è –≤ –æ–±—Ä–∞–∑–µ

**‚öñÔ∏è –ì–∞—Ä–º–æ–Ω–∏—è –æ–±—Ä–∞–∑–∞**
‚úÖ –û—Ü–µ–Ω–∫–∞ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤

**üëü –ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å**
‚úÖ –£–¥–æ–±—Å—Ç–≤–æ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ–≤–æ–¥–∞

‚∏ª

**üìå –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**

**–î–æ–ø–æ–ª–Ω–∏—Ç—å –æ–±—Ä–∞–∑:**
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≥–∞—Ä–¥–µ—Ä–æ–±–∞
‚Ä¢ –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ –æ–±—É–≤—å

**–û–±—â–∏–µ —Å–æ–≤–µ—Ç—ã:**
‚Ä¢ –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é

‚∏ª

üí° **–°–æ–≤–µ—Ç –æ—Ç –ú–ò–®–£–†–´:** [–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –¥–ª—è –±—É–¥—É—â–∏—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π]

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Ü–∏—Ñ—Ä—ã –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π."""
    
    if preferences:
        base_prompt += f"\n\n–£—á–∏—Ç—ã–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {preferences}"
    
    return base_prompt

def create_comparison_prompt(occasion: str, num_images: int, preferences: Optional[str] = None) -> str:
    """–°–æ–∑–¥–∞–µ—Ç –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ô –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –í–°–ï–• –æ–±—Ä–∞–∑–æ–≤."""
    image_emojis = ["üéΩ", "üëñ", "üëî", "üëó", "üß•", "üëï"]

    base_prompt = f"""–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç –ú–ò–®–£–†–ê.

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –Ø –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ –¢–û–ß–ù–û {num_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –¢—ã –û–ë–Ø–ó–ê–ù –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ö–ê–ñ–î–û–ï –∏–∑ {num_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–π –Ω–∏ –æ–¥–Ω–æ–≥–æ!

–°—Ä–∞–≤–Ω–∏ –í–°–ï {num_images} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è –ø–æ–≤–æ–¥–∞: {occasion}.

–°–¢–†–£–ö–¢–£–†–ê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ì–û –û–¢–í–ï–¢–ê (–ê–ù–ê–õ–ò–ó–ò–†–£–ô –ö–ê–ñ–î–´–ô –û–ë–†–ê–ó, –ù–ï –ü–†–û–ü–£–°–ö–ê–ô!):

"""

    for i in range(num_images):
        emoji = image_emojis[i % len(image_emojis)]
        base_prompt += f"""{emoji} **–û–ë–†–ê–ó {i+1} (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ê–ù–ê–õ–ò–ó–ò–†–£–ô):** [–æ–ø–∏—à–∏ —á—Ç–æ –≤–∏–¥–∏—à—å –Ω–∞ {i+1}-–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏]

**–£–º–µ—Å—Ç–Ω–æ—Å—Ç—å –¥–ª—è {occasion}**
‚úÖ –ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —ç—Ç–æ—Ç –æ–±—Ä–∞–∑ –¥–ª—è {occasion}

**–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –æ–±—Ä–∞–∑–∞ {i+1}**
‚úÖ –ö–∞–∫–∏–µ —Ü–≤–µ—Ç–∞ –≤ {i+1}-–º –æ–±—Ä–∞–∑–µ

**–ì–∞—Ä–º–æ–Ω–∏—è –æ–±—Ä–∞–∑–∞ {i+1}**
‚úÖ –ù–∞—Å–∫–æ–ª—å–∫–æ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω {i+1}-–π –æ–±—Ä–∞–∑

**–ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–∞ {i+1}**
‚úÖ –£–¥–æ–±—Å—Ç–≤–æ {i+1}-–≥–æ –æ–±—Ä–∞–∑–∞ –¥–ª—è {occasion}

‚∏ª

"""

    base_prompt += f"""üèÜ **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –°–†–ê–í–ù–ï–ù–ò–ï –í–°–ï–• {num_images} –û–ë–†–ê–ó–û–í**

‚ö†Ô∏è –í–ê–ñ–ù–û: –¢—ã –î–û–õ–ñ–ï–ù —Å—Ä–∞–≤–Ω–∏—Ç—å –í–°–ï {num_images} –æ–±—Ä–∞–∑–æ–≤!

**–õ—É—á—à–∏–π –æ–±—Ä–∞–∑ –∏–∑ {num_images}:** –û–±—Ä–∞–∑ [–Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {num_images}] - [–ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç]

**–•—É–¥—à–∏–π –æ–±—Ä–∞–∑ –∏–∑ {num_images}:** –û–±—Ä–∞–∑ [–Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ {num_images}] - [–ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç]

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é (–î–õ–Ø –ö–ê–ñ–î–û–ì–û –ò–ó {num_images} –û–ë–†–ê–ó–û–í):**"""

    for i in range(num_images):
        base_prompt += f"\n‚Ä¢ –û–ë–†–ê–ó {i+1}: [–∫–∞–∫ —É–ª—É—á—à–∏—Ç—å {i+1}-–π –æ–±—Ä–∞–∑]"

    base_prompt += f"""

‚∏ª

üí° **–°–æ–≤–µ—Ç –æ—Ç –ú–ò–®–£–†–´:** [–ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç —É—á–∏—Ç—ã–≤–∞—è –≤—Å–µ {num_images} –æ–±—Ä–∞–∑–∞]

‚ö†Ô∏è –ü–†–û–í–ï–†–¨ –°–ï–ë–Ø: –¢—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –í–°–ï {num_images} –æ–±—Ä–∞–∑–æ–≤? –ï—Å–ª–∏ –Ω–µ—Ç - –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ!

**–ß–ï–ö-–õ–ò–°–¢ –¥–ª—è —Ç–µ–±—è:**
- [ ] –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –í–°–ï {num_images} –æ–±—Ä–∞–∑–æ–≤
- [ ] –î–∞–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ö–ê–ñ–î–û–ì–û –æ–±—Ä–∞–∑–∞
- [ ] –í—ã–±—Ä–∞–Ω –ª—É—á—à–∏–π –∏ —Ö—É–¥—à–∏–π –æ–±—Ä–∞–∑
- [ ] –î–∞–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è

–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ."""

    if preferences:
        base_prompt += f"\n\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —É—á–∏—Ç—ã–≤–∞–π: {preferences}"

    return base_prompt

async def _send_to_gemini_with_retries(parts: List[Any], context: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ Gemini API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏."""
    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini: {context}")
    
    for attempt in range(MAX_RETRIES):
        try:
            model = genai.GenerativeModel(VISION_MODEL)
            response = model.generate_content(parts)
            
            if response and response.text:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Gemini ({len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return response.text
            else:
                error_msg = "API –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç"
                if response and hasattr(response, 'prompt_feedback'):
                    if response.prompt_feedback and hasattr(response.prompt_feedback, 'block_reason'):
                        error_msg += f": {response.prompt_feedback.block_reason}"
                raise ValueError(error_msg)
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES} –Ω–µ —É–¥–∞–ª–∞—Å—å: {str(e)}")
            if attempt < MAX_RETRIES - 1:
                await asyncio.sleep(RETRY_DELAY)
            else:
                error_msg = handle_gemini_error(e, context)
                logger.error(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã: {error_msg}")
                raise RuntimeError(error_msg)

async def analyze_clothing_image(image_data: bytes, occasion: str, preferences: Optional[str] = None) -> str:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–µ–∂–¥—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é Gemini AI.
    
    Args:
        image_data: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        occasion: –ü–æ–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        preferences: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    """
    logger.info(f"üé® –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–∑–∞ –¥–ª—è –ø–æ–≤–æ–¥–∞: {occasion}")
    
    try:
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = Image.open(BytesIO(image_data))
        optimized_image = optimize_image(img)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç
        prompt = create_analysis_prompt(occasion, preferences)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        parts = [
            prompt,
            {
                "mime_type": "image/jpeg",
                "data": optimized_image
            }
        ]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await _send_to_gemini_with_retries(
            parts,
            f"–∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞ –¥–ª—è {occasion}"
        )
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return response
        
    except Exception as e:
        error_msg = handle_gemini_error(e, f"–∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞ –¥–ª—è {occasion}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {error_msg}")
        raise RuntimeError(error_msg)

async def compare_clothing_images(image_data_list: List[bytes], occasion: str, preferences: Optional[str] = None) -> str:
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–∑–æ–≤ –æ–¥–µ–∂–¥—ã.
    
    Args:
        image_data_list: –°–ø–∏—Å–æ–∫ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        occasion: –ü–æ–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        preferences: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    Returns:
        str: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    """
    num_images = len(image_data_list)
    logger.info(f"‚öñÔ∏è –ù–∞—á–∞–ª–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è {num_images} –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è: {occasion}")
    
    try:
        # –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        optimized_images = []
        mime_types = []
        for i, img_data in enumerate(image_data_list):
            img = Image.open(BytesIO(img_data))
            optimized = optimize_image(img)
            optimized_images.append(optimized)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º mime_type –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            fmt = img.format if hasattr(img, 'format') and img.format else 'JPEG'
            mime_type = f"image/{fmt.lower()}"
            mime_types.append(mime_type)
            logger.info(f"üì∑ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {i+1}/{num_images}")
        
        # –°–æ–∑–¥–∞–µ–º –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ô –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        prompt = create_comparison_prompt(occasion, num_images, preferences)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        parts = [prompt]
        for img, mime_type in zip(optimized_images, mime_types):
            parts.append({
                "mime_type": mime_type, 
                "data": img
            })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = await _send_to_gemini_with_retries(
            parts,
            f"—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ {num_images} –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è {occasion}"
        )
        
        logger.info("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return response
        
    except Exception as e:
        error_msg = handle_gemini_error(e, f"—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –¥–ª—è {occasion}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {error_msg}\n{traceback.format_exc()}")
        raise RuntimeError(error_msg)

# –í–µ—Ä—Å–∏—è –º–æ–¥—É–ª—è
__version__ = "0.5.0"

class MishuraGeminiAI:
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Gemini AI –≤ –ø—Ä–æ–µ–∫—Ç–µ –ú–ò–®–£–†–ê.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å api.py –∏ –¥—Ä—É–≥–∏–º–∏ –º–æ–¥—É–ª—è–º–∏.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ MishuraGeminiAI"""
        self.cache_manager = cache_manager
        self.model_name = VISION_MODEL
        self.api_configured = API_CONFIGURED_SUCCESSFULLY
        
        if not self.api_configured:
            logger.error("‚ùå Gemini API –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∞—Å—Å–∞")
            raise RuntimeError("Gemini API –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω")
        
        logger.info(f"‚úÖ MishuraGeminiAI –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—å—é: {self.model_name}")
    
    async def test_gemini_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Gemini API.
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ, False –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        return await test_gemini_connection()
    
    async def analyze_clothing_image(self, image_data: bytes, occasion: str, 
                                   preferences: Optional[str] = None) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–µ–∂–¥—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é Gemini AI.
        
        Args:
            image_data: –ë–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            occasion: –ü–æ–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            preferences: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –ê–Ω–∞–ª–∏–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        return await analyze_clothing_image(image_data, occasion, preferences)
    
    async def compare_clothing_images(self, image_data_list: List[bytes], occasion: str, 
                                    preferences: Optional[str] = None) -> str:
        """
        –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä–∞–∑–æ–≤ –æ–¥–µ–∂–¥—ã.
        
        Args:
            image_data_list: –°–ø–∏—Å–æ–∫ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            occasion: –ü–æ–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            preferences: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        """
        return await compare_clothing_images(image_data_list, occasion, preferences)
    
    def get_model_info(self) -> Dict[str, Any]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏.
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ —Å—Ç–∞—Ç—É—Å–µ API
        """
        return {
            "model_name": self.model_name,
            "api_configured": self.api_configured,
            "version": __version__,
            "max_retries": MAX_RETRIES,
            "retry_delay": RETRY_DELAY
        }

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä—è–º–æ–º –∑–∞–ø—É—Å–∫–µ
if __name__ == "__main__":
    async def test_module():
        logger.info("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è Gemini AI")
        
        # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection_ok = await test_gemini_connection()
        logger.info(f"üîó –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {'‚úÖ –û–ö' if connection_ok else '‚ùå –û–®–ò–ë–ö–ê'}")
        
        if connection_ok:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            test_img = Image.new('RGB', (400, 300), (100, 150, 200))
            draw = ImageDraw.Draw(test_img)
            draw.text((50, 50), "–¢–µ—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑\n–¥–ª—è –ú–ò–®–£–†–´", fill=(255, 255, 255))
            
            img_byte_arr = BytesIO()
            test_img.save(img_byte_arr, format='JPEG')
            test_image_data = img_byte_arr.getvalue()
            
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
            try:
                analysis = await analyze_clothing_image(
                    test_image_data, 
                    "–¥–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞",
                    "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å"
                )
                logger.info(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—É—á–µ–Ω ({len(analysis)} —Å–∏–º–≤–æ–ª–æ–≤)")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
    
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    asyncio.run(test_module())