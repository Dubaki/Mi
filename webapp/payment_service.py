import logging
import asyncio
from typing import Dict, Any, Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PaymentService:
    def __init__(self):
        self.payments = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        self.test_mode = True  # –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    
    async def create_payment(self, user_id: str, plan_id: str, return_url: str) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
            payment_id = f"payment_{user_id}_{plan_id}_{int(asyncio.get_event_loop().time())}"
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
            payment = {
                "id": payment_id,
                "user_id": user_id,
                "plan_id": plan_id,
                "status": "pending",
                "return_url": return_url,
                "created_at": asyncio.get_event_loop().time()
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            self.payments[payment_id] = payment
            
            logger.info(f"üìù –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            return payment
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            raise
    
    async def process_successful_payment(self, payment_id: str, user_id: str, plan_id: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        """
        try:
            if payment_id not in self.payments:
                raise ValueError(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            payment = self.payments[payment_id]
            payment["status"] = "completed"
            payment["completed_at"] = asyncio.get_event_loop().time()
            
            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            return payment
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            raise
    
    async def create_payment_and_process(self, user_id: str, plan_id: str, return_url: str):
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        """
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
        payment = await self.create_payment(user_id, plan_id, return_url)
        
        # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ - —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
        if self.test_mode:
            await asyncio.sleep(2)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            await self.process_successful_payment(payment["id"], user_id, plan_id)
        
        return payment
    
    async def get_payment_status(self, payment_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        """
        try:
            # –í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            import random
            statuses = ["pending", "completed", "failed"]
            status = random.choice(statuses)
            
            logger.info(f"üìä –ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {status}")
            
            return {
                "payment_id": payment_id,
                "status": status,
                "amount": 100,  # –î–µ–º–æ-—Å—É–º–º–∞
                "currency": "STcoin"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                "payment_id": payment_id,
                "status": "error",
                "error": str(e)
            }

def get_user_payments(user_id: int, limit: int = 10):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        import database
        conn = database.get_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
            SELECT payment_id, user_id, amount, currency, status, 
                   plan_id, stcoins_amount, created_at, updated_at
            FROM payments 
            WHERE user_id = ? 
            ORDER BY created_at DESC 
            LIMIT ?
        """, (user_id, limit))
        
        rows = cursor.fetchall()
        conn.close()
        
        payments = []
        for row in rows:
            payments.append({
                'payment_id': row[0],
                'user_id': row[1],
                'amount': row[2],
                'currency': row[3],
                'status': row[4],
                'plan_id': row[5],
                'stcoins_amount': row[6],
                'created_at': row[7],
                'updated_at': row[8]
            })
        
        return payments
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        return []

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
payment_service = PaymentService() 