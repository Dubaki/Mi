/*
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (app.js)
–í–ï–†–°–ò–Ø: 1.0.0 (–°–û–ó–î–ê–ù –ó–ê–ù–û–í–û)
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-05-27

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –§–ê–ô–õ–ê:
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–≤–µ—á–∞—é—â–∏–π –∑–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é –∏—Ö —Ä–∞–±–æ—Ç—ã.
==========================================================================================
*/

window.MishuraApp = window.MishuraApp || {};

window.MishuraApp.app = (function() {
    'use strict';
    
    let logger;
    let uiHelpers;
    let apiService;
    let modals;
    let consultation;
    let comparison;
    let imageUpload;
    let isAppInitialized = false;
    
    function init() {
        if (isAppInitialized) {
            console.warn('App.js: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è app.js –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
            return;
        }

        console.log('üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ú–ò–®–£–†–ê (app.js v1.0.0)');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        initializeLogger();
        initializeConfig();
        initializeUIHelpers();
        initializeAPIService();
        initializeModals();
        initializeImageUpload();
        initializeConsultation();
        initializeComparison();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        setTimeout(() => {
            setupEventHandlers();
            setupNavigation();
        }, 100);
        
        isAppInitialized = true;
        logger.info('–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (app.js) —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    
    function initializeLogger() {
        if (window.MishuraApp.utils && window.Mish—É—Ä–∞App.utils.logger) {
            logger = window.MishuraApp.utils.logger;
            if (typeof logger.init === 'function' && (!logger.isInitialized || !logger.isInitialized())) {
                logger.init();
            }
        } else {
            logger = console;
            logger.warn('App.js: Logger –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è console.');
        }
    }

    function initializeConfig() {
        if (window.MishuraApp.config) {
            if (typeof window.MishuraApp.config.init === 'function' && 
                (!window.MishuraApp.config.isInitialized || !window.MishuraApp.config.isInitialized())) {
                window.MishuraApp.config.init();
                if(logger) logger.debug('App.js: Config –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
            }
        } else {
            if(logger) logger.error('App.js: Config –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    }
    
    function initializeUIHelpers() {
        if (window.MishuraApp.utils && window.MishuraApp.utils.uiHelpers) {
            uiHelpers = window.MishuraApp.utils.uiHelpers;
            if (typeof uiHelpers.init === 'function' && (!uiHelpers.isInitialized || !uiHelpers.isInitialized())) {
                uiHelpers.init();
            }
            if(logger) logger.debug('App.js: UI Helpers –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.');
        } else {
            if(logger) logger.error('App.js: UI Helpers –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        }
    }
    
    function initializeAPIService() {
        if (window.MishuraApp.api && window.MishuraApp.api.service) {
            apiService = window.MishuraApp.api.service;
            if (typeof apiService.init === 'function' && (!apiService.isInitialized || !apiService.isInitialized())) {
                 apiService.init(window.MishuraApp.config);
            }
            if(logger) logger.debug('App.js: API Service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        } else {
            if(logger) logger.error('App.js: API Service –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    }
    
    function initializeModals() {
        if (window.MishuraApp.components && window.MishuraApp.components.modals) {
            modals = window.MishuraApp.components.modals;
            if (typeof modals.init === 'function' && (!modals.isInitialized || !modals.isInitialized())) {
                modals.init();
            }
            if(logger) logger.debug('App.js: Modals –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.');
        } else {
            if(logger) logger.error('App.js: Modals –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.');
        }
    }
    
    function initializeImageUpload() {
        if (window.MishuraApp.components && window.MishuraApp.components.imageUpload) {
            imageUpload = window.MishuraApp.components.imageUpload;
            if (typeof imageUpload.init === 'function' && (!imageUpload.isInitialized || !imageUpload.isInitialized())) {
                imageUpload.init();
            }
            if(logger) logger.debug('App.js: Image Upload –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        } else {
            if(logger) logger.error('App.js: Image Upload –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    }
    
    function initializeConsultation() {
        if (window.MishuraApp.features && window.MishuraApp.features.consultation) {
            consultation = window.MishuraApp.features.consultation;
            if (typeof consultation.init === 'function' && (!consultation.isInitialized || !consultation.isInitialized())) {
                consultation.init();
            }
            if(logger) logger.debug('App.js: Consultation –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        } else {
            if(logger) logger.error('App.js: Consultation –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    }
    
    function initializeComparison() {
        if (window.MishuraApp.features && window.MishuraApp.features.comparison) {
            comparison = window.MishuraApp.features.comparison;
            if (typeof comparison.init === 'function' && (!comparison.isInitialized || !comparison.isInitialized())) {
                comparison.init();
            }
            if(logger) logger.debug('App.js: Comparison –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.');
        } else {
            if(logger) logger.error('App.js: Comparison –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        }
    }
    
    function setModalMode(mode) {
        if(logger) logger.debug(`App.js: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞: ${mode}`);
        
        const singleModeContainer = document.getElementById('single-analysis-mode');
        const compareModeContainer = document.getElementById('compare-analysis-mode');
        const dialogTitle = document.getElementById('consultation-dialog-title');
        const dialogSubtitle = document.querySelector('#consultation-overlay .dialog-subtitle');
        
        if (mode === 'single') {
            if (singleModeContainer) singleModeContainer.classList.remove('hidden');
            if (compareModeContainer) compareModeContainer.classList.add('hidden');
            if (dialogTitle) dialogTitle.textContent = '–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é';
            if (dialogSubtitle) dialogSubtitle.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞';
        } else if (mode === 'compare') {
            if (singleModeContainer) singleModeContainer.classList.add('hidden');
            if (compareModeContainer) compareModeContainer.classList.remove('hidden');
            if (dialogTitle) dialogTitle.textContent = '–°—Ä–∞–≤–Ω–∏—Ç—å –æ–±—Ä–∞–∑—ã';
            if (dialogSubtitle) dialogSubtitle.textContent = '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Ç 2 –¥–æ 4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è';
        }
        
        document.dispatchEvent(new CustomEvent('modeChanged', { detail: { mode: mode } }));
        if(logger) logger.debug(`App.js: –†–µ–∂–∏–º ${mode} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`);
    }
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
    function consultationButtonClickHandler(e) {
        e.preventDefault();
        logger.debug('App.js: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (single mode) - ID: consultation-button');
        if (consultation && typeof consultation.openConsultationModal === 'function') {
            consultation.openConsultationModal();
            setTimeout(() => setModalMode('single'), 50);
        } else {
            logger.error('App.js: Consultation module –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞');
        }
    }

    function compareButtonClickHandler(e) {
        e.preventDefault();
        logger.debug('App.js: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ (compare mode) - ID: compare-button');
        if (consultation && typeof consultation.openConsultationModal === 'function') {
            consultation.openConsultationModal();
            setTimeout(() => setModalMode('compare'), 50);
        } else {
            logger.error('App.js: Consultation module –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (compare)');
        }
    }

    function setupEventHandlers() {
        if(logger) logger.debug('App.js: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        
        const consultationButton = document.getElementById('consultation-button');
        if (consultationButton) {
            if (!consultationButton.dataset.mishuraHandlerAttached) {
                consultationButton.addEventListener('click', consultationButtonClickHandler);
                consultationButton.dataset.mishuraHandlerAttached = 'true';
                logger.debug('App.js: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ù–ê–°–¢–†–û–ï–ù');
            }
        } else {
            logger.warn('App.js: –ö–Ω–æ–ø–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (ID: consultation-button) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
        
        const compareButton = document.getElementById('compare-button');
        if (compareButton) {
             if (!compareButton.dataset.mishuraHandlerAttached) {
                compareButton.addEventListener('click', compareButtonClickHandler);
                compareButton.dataset.mishuraHandlerAttached = 'true';
                logger.debug('App.js: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ù–ê–°–¢–†–û–ï–ù');
            }
        } else {
            logger.warn('App.js: –ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ (ID: compare-button) –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        }
    }
    
    function navItemClickHandler(e) {
        e.preventDefault();
        const page = this.dataset.page;
        logger.debug(`App.js: –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${page}`);
        
        document.querySelectorAll('.content-section').forEach(section => {
            section.classList.add('hidden');
        });
        
        const targetSection = document.getElementById(`${page}-section`);
        if (targetSection) {
            targetSection.classList.remove('hidden');
        } else {
            const homeSection = document.getElementById('home-section');
            if (homeSection) {
                homeSection.classList.remove('hidden');
            }
            logger.warn(`App.js: –°–µ–∫—Ü–∏—è ${page}-section –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑–∞–Ω–∞ home-section`);
        }
        
        document.querySelectorAll('.nav-item').forEach(navItem => navItem.classList.remove('active'));
        this.classList.add('active');
        
        const navBar = document.querySelector('.nav-bar');
        if (navBar) {
            navBar.style.display = 'flex';
            navBar.style.visibility = 'visible';
        }

        document.dispatchEvent(new CustomEvent('navigationChanged', { 
            detail: { page: page } 
        }));
    }

    function setupNavigation() {
        if(logger) logger.debug('App.js: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
        
        const navItems = document.querySelectorAll('.nav-item');
        navItems.forEach(item => {
            if (!item.dataset.mishuraNavHandlerAttached) {
                item.addEventListener('click', navItemClickHandler);
                item.dataset.mishuraNavHandlerAttached = 'true';
            }
        });
        if(logger) logger.debug('App.js: –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }
    
    return {
        init,
        setModalMode,
        isInitialized: () => isAppInitialized
    };
})();