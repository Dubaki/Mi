/**
 * –ú–ò–®–£–†–ê - –ò–ò –°—Ç–∏–ª–∏—Å—Ç
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (app.js)
 * –í–µ—Ä—Å–∏—è: 2.0.0 (–ò–°–ü–†–ê–í–õ–ï–ù–´ –û–®–ò–ë–ö–ò –°–†–ê–í–ù–ï–ù–ò–Ø)
 * –î–∞—Ç–∞: 2025-05-31
 */

class MishuraApp {
    constructor() {
        this.currentMode = null;
        this.singleImage = null;
        this.compareImages = new Array(4).fill(null);
        this.minCompareImages = 2;
        
        this.logger = new Logger('MishuraApp');
        this.api = new MishuraAPI();
        
        this.initializeApp();
    }

    initializeApp() {
        this.logger.info('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ú–ò–®–£–†–ê');
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        document.getElementById('single-mode-btn').addEventListener('click', () => {
            this.logger.info('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ (single mode)');
            this.openConsultationModal('single');
        });
        
        document.getElementById('compare-mode-btn').addEventListener('click', () => {
            this.logger.info('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ (compare mode)');
            this.openConsultationModal('compare');
        });

        // –ö–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
        document.getElementById('consultation-cancel').addEventListener('click', () => {
            this.closeConsultationModal();
        });
        
        document.getElementById('form-cancel').addEventListener('click', () => {
            this.closeConsultationModal();
        });

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
        document.getElementById('form-submit').addEventListener('click', () => {
            this.submitConsultation();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –Ω–∞ overlay
        document.getElementById('consultation-overlay').addEventListener('click', (e) => {
            if (e.target.id === 'consultation-overlay') {
                this.closeConsultationModal();
            }
        });

        this.logger.info('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
    }

    openConsultationModal(mode) {
        this.logger.info(`üöÄ –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤ —Ä–µ–∂–∏–º–µ: ${mode}`);
        
        this.currentMode = mode;
        this.resetForm();
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        const overlay = document.getElementById('consultation-overlay');
        overlay.classList.add('active');
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const title = document.getElementById('modal-title');
        if (mode === 'single') {
            title.textContent = '–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞';
        } else {
            title.textContent = '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤';
        }
        
        // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º—ã
        this.switchMode(mode);
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        this.initializeUploadHandlers();
    }

    closeConsultationModal() {
        this.logger.debug('üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
        
        const overlay = document.getElementById('consultation-overlay');
        overlay.classList.remove('active');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.resetForm();
    }

    switchMode(mode) {
        this.logger.debug(`–°–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞ –Ω–∞: ${mode}`);
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Ä–µ–∂–∏–º—ã
        document.getElementById('single-mode').classList.remove('active');
        document.getElementById('compare-mode').classList.remove('active');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —Ä–µ–∂–∏–º
        document.getElementById(`${mode}-mode`).classList.add('active');
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
        if (mode === 'single') {
            this.resetCompareMode();
        } else {
            this.resetSingleMode();
        }
        
        this.updateSubmitButton();
        this.logger.debug(`–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${mode}`);
    }

    resetForm() {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        this.singleImage = null;
        this.compareImages = new Array(4).fill(null);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('occasion').value = '';
        document.getElementById('preferences').value = '';
        
        // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Ñ–æ—Ä–º—É
        document.getElementById('consultation-form').classList.remove('active');
        document.getElementById('result').classList.remove('active');
        document.getElementById('loading').classList.remove('active');
        
        this.updateSubmitButton();
    }

    resetSingleMode() {
        this.logger.debug('–°–±—Ä–æ—Å single —Ä–µ–∂–∏–º–∞');
        this.singleImage = null;
        
        const preview = document.getElementById('single-preview');
        const uploadText = document.getElementById('single-upload-text');
        const uploadArea = document.getElementById('single-upload-area');
        
        preview.innerHTML = '';
        uploadText.textContent = '–ù–∞–∂–º–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã';
        uploadArea.classList.remove('has-image');
        
        this.logger.debug('Single –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
        this.updateSubmitButton();
    }

    resetCompareMode() {
        this.logger.debug('–°–±—Ä–æ—Å compare —Ä–µ–∂–∏–º–∞');
        this.compareImages = new Array(4).fill(null);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–ª–æ—Ç—ã
        for (let i = 0; i < 4; i++) {
            const slot = document.querySelector(`[data-slot="${i}"]`);
            slot.innerHTML = `
                <span class="slot-number">${i + 1}</span>
                <span class="add-icon">+</span>
            `;
            slot.classList.remove('has-image');
        }
        
        this.logger.debug('Compare –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã');
        this.updateSubmitButton();
    }

    initializeUploadHandlers() {
        this.logger.debug('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏');
        
        if (this.currentMode === 'single') {
            this.initializeSingleMode();
        } else if (this.currentMode === 'compare') {
            this.initializeCompareMode();
        }
    }

    initializeSingleMode() {
        this.logger.debug('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è single —Ä–µ–∂–∏–º–∞');
        
        const uploadArea = document.getElementById('single-upload-area');
        const fileInput = document.getElementById('single-file-input');
        
        // –ö–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏
        uploadArea.addEventListener('click', () => {
            this.logger.debug('üñ±Ô∏è –ö–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏ single –∑–∞–≥—Ä—É–∑–∫–∏');
            fileInput.click();
        });
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        fileInput.addEventListener('change', (e) => {
            if (e.target.files && e.target.files[0]) {
                this.handleSingleImageUpload(e.target.files[0]);
            }
        });
        
        // Drag & Drop
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = '#4facfe';
        });
        
        uploadArea.addEventListener('dragleave', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = '#ddd';
        });
        
        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.style.borderColor = '#ddd';
            
            if (e.dataTransfer.files && e.dataTransfer.files[0]) {
                this.handleSingleImageUpload(e.dataTransfer.files[0]);
            }
        });
        
        this.logger.debug('‚úÖ Single —Ä–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    initializeCompareMode() {
        this.logger.debug('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è compare —Ä–µ–∂–∏–º–∞');
        
        const slots = document.querySelectorAll('.compare-slot');
        this.logger.debug(`Compare —Ä–µ–∂–∏–º: –Ω–∞–π–¥–µ–Ω–æ ${slots.length} —Å–ª–æ—Ç–æ–≤`);
        
        slots.forEach((slot, index) => {
            const fileInput = document.getElementById(`compare-file-input-${index}`);
            
            // –ö–ª–∏–∫ –ø–æ —Å–ª–æ—Ç—É
            slot.addEventListener('click', () => {
                this.logger.debug(`üñ±Ô∏è –ö–ª–∏–∫ –ø–æ —Å–ª–æ—Ç—É ${index}`);
                fileInput.click();
            });
            
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            fileInput.addEventListener('change', (e) => {
                if (e.target.files && e.target.files[0]) {
                    this.handleCompareImageUpload(e.target.files[0], index);
                }
            });
            
            // Drag & Drop –¥–ª—è —Å–ª–æ—Ç–æ–≤
            slot.addEventListener('dragover', (e) => {
                e.preventDefault();
                slot.style.borderColor = '#43e97b';
            });
            
            slot.addEventListener('dragleave', (e) => {
                e.preventDefault();
                slot.style.borderColor = '#ddd';
            });
            
            slot.addEventListener('drop', (e) => {
                e.preventDefault();
                slot.style.borderColor = '#ddd';
                
                if (e.dataTransfer.files && e.dataTransfer.files[0]) {
                    this.handleCompareImageUpload(e.dataTransfer.files[0], index);
                }
            });
        });
        
        this.logger.debug('‚úÖ Compare —Ä–µ–∂–∏–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    handleSingleImageUpload(file) {
        this.logger.debug(`Single —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω: ${file.name}`);
        
        if (!this.validateImageFile(file)) {
            return;
        }
        
        this.singleImage = file;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é
        const preview = document.getElementById('single-preview');
        const uploadText = document.getElementById('single-upload-text');
        const uploadArea = document.getElementById('single-upload-area');
        
        const reader = new FileReader();
        reader.onload = (e) => {
            preview.innerHTML = `<img src="${e.target.result}" class="image-preview" alt="–ü—Ä–µ–≤—å—é">`;
            uploadText.textContent = `–í—ã–±—Ä–∞–Ω–æ: ${file.name}`;
            uploadArea.classList.add('has-image');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            this.showConsultationForm();
            
            this.logger.debug(`Single –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${file.name}`);
            this.updateSubmitButton();
        };
        reader.readAsDataURL(file);
    }

    handleCompareImageUpload(file, slotIndex) {
        this.logger.debug(`Compare —Ñ–∞–π–ª –≤—ã–±—Ä–∞–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}: ${file.name}`);
        
        if (!this.validateImageFile(file)) {
            return;
        }
        
        this.compareImages[slotIndex] = file;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –≤ —Å–ª–æ—Ç–µ
        const slot = document.querySelector(`[data-slot="${slotIndex}"]`);
        
        const reader = new FileReader();
        reader.onload = (e) => {
            slot.innerHTML = `
                <span class="slot-number">${slotIndex + 1}</span>
                <img src="${e.target.result}" alt="–ü—Ä–µ–≤—å—é ${slotIndex + 1}">
            `;
            slot.classList.add('has-image');
            
            this.logger.debug(`Compare –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Å–ª–æ—Ç ${slotIndex}: ${file.name}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ä–º—ã
            const uploadedCount = this.compareImages.filter(img => img !== null).length;
            if (uploadedCount >= this.minCompareImages) {
                this.showConsultationForm();
            }
            
            this.updateSubmitButton();
        };
        reader.readAsDataURL(file);
    }

    validateImageFile(file) {
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        const maxSize = 10 * 1024 * 1024; // 10MB
        
        if (!allowedTypes.includes(file.type)) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG –∏–ª–∏ WebP');
            return false;
        }
        
        if (file.size > maxSize) {
            alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB');
            return false;
        }
        
        return true;
    }

    showConsultationForm() {
        this.logger.debug('–ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
        document.getElementById('consultation-form').classList.add('active');
    }

    updateSubmitButton() {
        const submitBtn = document.getElementById('form-submit');
        let canSubmit = false;
        
        if (this.currentMode === 'single') {
            canSubmit = this.singleImage !== null;
        } else if (this.currentMode === 'compare') {
            const uploadedCount = this.compareImages.filter(img => img !== null).length;
            canSubmit = uploadedCount >= this.minCompareImages;
        }
        
        submitBtn.disabled = !canSubmit;
        
        const status = canSubmit ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞';
        this.logger.debug(`–ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${status}`);
    }

    async submitConsultation() {
        this.logger.info('üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é');
        
        const occasion = document.getElementById('occasion').value.trim();
        const preferences = document.getElementById('preferences').value.trim();
        
        if (!occasion) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–≤–æ–¥/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ');
            return;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        this.showLoading();
        
        try {
            let result;
            
            if (this.currentMode === 'single') {
                this.logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ single –∞–Ω–∞–ª–∏–∑–∞');
                result = await this.api.analyzeSingle(this.singleImage, occasion, preferences);
            } else {
                const images = this.compareImages.filter(img => img !== null);
                this.logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ compare –∞–Ω–∞–ª–∏–∑–∞ —Å ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`);
                result = await this.api.analyzeCompare(images, occasion, preferences);
            }
            
            this.showResult(result);
            this.logger.info('‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞');
            
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
            this.showError(error.message);
        }
    }

    showLoading() {
        document.getElementById('loading').classList.add('active');
        document.getElementById('consultation-form').classList.remove('active');
        document.getElementById('result').classList.remove('active');
    }

    showResult(result) {
        document.getElementById('loading').classList.remove('active');
        document.getElementById('consultation-form').classList.remove('active');
        
        const resultSection = document.getElementById('result');
        const resultContent = document.getElementById('result-content');
        
        if (result.status === 'success') {
            resultContent.innerHTML = this.formatAdvice(result.advice);
        } else {
            resultContent.innerHTML = `<p style="color: #e74c3c;">–û—à–∏–±–∫–∞: ${result.message}</p>`;
        }
        
        resultSection.classList.add('active');
    }

    showError(message) {
        document.getElementById('loading').classList.remove('active');
        
        const resultSection = document.getElementById('result');
        const resultContent = document.getElementById('result-content');
        
        resultContent.innerHTML = `
            <p style="color: #e74c3c; font-weight: 600;">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:</p>
            <p style="color: #666;">${message}</p>
            <p style="color: #666; font-size: 0.9rem; margin-top: 15px;">
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
            </p>
        `;
        
        resultSection.classList.add('active');
    }

    formatAdvice(advice) {
        // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        return advice
            .replace(/\n\n/g, '</p><p>')
            .replace(/\n/g, '<br>')
            .replace(/^/, '<p>')
            .replace(/$/, '</p>')
            .replace(/üí° –°–æ–≤–µ—Ç –æ—Ç –ú–ò–®–£–†–´:/g, '<strong>üí° –°–æ–≤–µ—Ç –æ—Ç –ú–ò–®–£–†–´:</strong>');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('App.js: DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    window.mishuraApp = new MishuraApp();
});