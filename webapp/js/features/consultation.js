/*
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–º API (consultation.js)
–í–ï–†–°–ò–Ø: 1.1.0 (–í–°–¢–†–û–ï–ù–ù–´–ô API)
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-05-29

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø: API –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é –≤ –º–æ–¥—É–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
==========================================================================================
*/

window.MishuraApp = window.MishuraApp || {};
window.MishuraApp.features = window.MishuraApp.features || {};

window.MishuraApp.features.consultation = (function() {
    'use strict';
    
    let logger, uiHelpers, modalManager, imageUpload;
    let isConsultationInitialized = false;
    let currentMode = 'single';
    let isSubmitting = false;
    
    // ==== –í–°–¢–†–û–ï–ù–ù–´–ô API ====
    const API_SERVICE = {
        baseUrl: null,
        isReady: false,
        
        async init() {
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ API Service");
            
            // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π API
            const urls = [
                'http://localhost:8001/api/v1',
                'http://localhost:8000/api/v1',
                'https://style-ai-bot.onrender.com/api/v1'
            ];
            
            for (const url of urls) {
                try {
                    logger.debug(`‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ ${url}...`);
                    
                    const response = await fetch(`${url}/health`, {
                        method: 'GET',
                        headers: { 'Content-Type': 'application/json' },
                        signal: AbortSignal.timeout(5000)
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        this.baseUrl = url;
                        this.isReady = true;
                        logger.info(`‚úÖ API –Ω–∞–π–¥–µ–Ω: ${url}`, data);
                        
                        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ
                        window.MishuraApp.api = {
                            analyzeImage: this.analyzeImage.bind(this),
                            compareImages: this.compareImages.bind(this),
                            isInitialized: () => this.isReady
                        };
                        
                        return true;
                    }
                } catch (error) {
                    logger.debug(`‚ùå ${url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
                }
            }
            
            // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º mock
            logger.warn("üé≠ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏");
            this.setupMockApi();
            return false;
        },
        
        setupMockApi() {
            this.isReady = true;
            window.MishuraApp.api = {
                analyzeImage: this.mockAnalyzeImage.bind(this),
                compareImages: this.mockCompareImages.bind(this),
                isInitialized: () => true
            };
            logger.info("‚úÖ Mock API –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω");
        },
        
        async analyzeImage(imageFile, options = {}) {
            if (!this.baseUrl) {
                return this.mockAnalyzeImage(imageFile, options);
            }
            
            logger.info("üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API");
            
            try {
                const formData = new FormData();
                formData.append('image', imageFile);
                formData.append('metadata', JSON.stringify({
                    occasion: options.occasion || '',
                    preferences: options.preferences || '',
                    analysis_type: 'single',
                    timestamp: new Date().toISOString()
                }));
                
                const response = await fetch(`${this.baseUrl}/analyze/single`, {
                    method: 'POST',
                    body: formData,
                    signal: AbortSignal.timeout(30000)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const result = await response.json();
                logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω");
                return result;
                
            } catch (error) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ API –∞–Ω–∞–ª–∏–∑–∞:", error);
                logger.warn("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ");
                return this.mockAnalyzeImage(imageFile, options);
            }
        },
        
        async compareImages(imageFiles, options = {}) {
            if (!this.baseUrl) {
                return this.mockCompareImages(imageFiles, options);
            }
            
            logger.info("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API");
            
            try {
                const formData = new FormData();
                
                imageFiles.forEach((file, index) => {
                    formData.append(`image_${index}`, file);
                });
                
                formData.append('metadata', JSON.stringify({
                    occasion: options.occasion || '',
                    preferences: options.preferences || '',
                    analysis_type: 'compare',
                    image_count: imageFiles.length,
                    timestamp: new Date().toISOString()
                }));
                
                const response = await fetch(`${this.baseUrl}/analyze/compare`, {
                    method: 'POST',
                    body: formData,
                    signal: AbortSignal.timeout(45000)
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const result = await response.json();
                logger.info("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
                return result;
                
            } catch (error) {
                logger.error("‚ùå –û—à–∏–±–∫–∞ API —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:", error);
                logger.warn("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ");
                return this.mockCompareImages(imageFiles, options);
            }
        },
        
        async mockAnalyzeImage(imageFile, options) {
            logger.info("üé≠ Mock –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
            await new Promise(resolve => setTimeout(resolve, 2000));
            
            const occasionText = options.occasion ? ` –¥–ª—è —Å–ª—É—á–∞—è "${options.occasion}"` : '';
            
            return {
                success: true,
                analysis_type: 'single',
                image_name: imageFile.name,
                style_analysis: `–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞${occasionText}: –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã. –¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ.`,
                recommendations: `–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —è—Ä–∫–∏–π –∞–∫—Å–µ—Å—Å—É–∞—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ü–µ–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—É–≤—å –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –∫–∞–±–ª—É–∫–µ –¥–ª—è –±–æ–ª–µ–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ —Å–∏–ª—É—ç—Ç–∞.`,
                rating: `–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: 8.5/10. –û—Ç–ª–∏—á–Ω—ã–π –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π. –í—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ —Å—Ç–∏–ª—å–Ω–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ!`,
                color_analysis: "–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –≤–∞—à–µ–º—É —Ü–≤–µ—Ç–æ—Ç–∏–ø—É –∏ —Å–æ–∑–¥–∞–µ—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π –æ–±—Ä–∞–∑.",
                style_tips: [
                    "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –∞–∫—Å–µ—Å—Å—É–∞—Ä",
                    "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–±—É–≤—å", 
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–≥–∫–∞ –¥—Ä—É–≥–æ–π —Å–∏–ª—É—ç—Ç"
                ],
                timestamp: new Date().toISOString(),
                mode: 'mock'
            };
        },
        
        async mockCompareImages(imageFiles, options) {
            logger.info("üé≠ Mock —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π");
            await new Promise(resolve => setTimeout(resolve, 3000));
            
            const occasionText = options.occasion ? ` –¥–ª—è —Å–ª—É—á–∞—è "${options.occasion}"` : '';
            
            return {
                success: true,
                analysis_type: 'compare',
                image_count: imageFiles.length,
                best_outfit: `–õ—É—á—à–∏–π –æ–±—Ä–∞–∑${occasionText}: –û–±—Ä–∞–∑ ‚Ññ2 (${imageFiles[1]?.name || '–≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}) –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è –±–æ–ª–µ–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–º—É —Å–æ—á–µ—Ç–∞–Ω–∏—é —Ü–≤–µ—Ç–æ–≤ –∏ –ª—É—á—à–µ–π –ø–æ—Å–∞–¥–∫–µ –ø–æ —Ñ–∏–≥—É—Ä–µ.`,
                comparison: `–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:
                
ü•á –û–±—Ä–∞–∑ ‚Ññ1: –•–æ—Ä–æ—à–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏, –Ω–æ —Ü–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –±–æ–ª–µ–µ —è—Ä–∫–æ–π. –û—Ü–µ–Ω–∫–∞: 7.5/10

üèÜ –û–±—Ä–∞–∑ ‚Ññ2: –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤, –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞, —Å—Ç–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã. –û—Ü–µ–Ω–∫–∞: 9/10

${imageFiles[2] ? 'ü•â –û–±—Ä–∞–∑ ‚Ññ3: –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤—ã–±–æ—Ä, –Ω–æ —Å—Ç–∏–ª—å –Ω–µ–º–Ω–æ–≥–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ª—É—á–∞—é. –û—Ü–µ–Ω–∫–∞: 7/10' : ''}`,
                improvement_tips: `–°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:
‚Ä¢ –î–ª—è –æ–±—Ä–∞–∑–∞ ‚Ññ1: –¥–æ–±–∞–≤—å—Ç–µ —è—Ä–∫–∏–π –∞–∫—Å–µ—Å—Å—É–∞—Ä –∏–ª–∏ —à–∞—Ä—Ñ
‚Ä¢ –î–ª—è –æ–±—Ä–∞–∑–∞ ‚Ññ2: —É–∂–µ –æ—Ç–ª–∏—á–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥–∞—è –æ–±—É–≤—å
${imageFiles[2] ? '‚Ä¢ –î–ª—è –æ–±—Ä–∞–∑–∞ ‚Ññ3: —Å–º–µ–Ω–∏—Ç–µ –≤–µ—Ä—Ö –Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫ —Å–ª—É—á–∞—é' : ''}`,
                winner_index: 1,
                scores: imageFiles.map((_, i) => ({ 
                    image_index: i, 
                    score: i === 1 ? 9.0 : (7.5 - Math.random() * 0.5)
                })),
                timestamp: new Date().toISOString(),
                mode: 'mock'
            };
        }
    };
    
    function init() {
        if (isConsultationInitialized) {
            logger?.debug("–ú–æ–¥—É–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
            return;
        }

        logger = window.MishuraApp.utils.logger || createFallbackLogger();
        uiHelpers = window.MishuraApp.utils.uiHelpers;
        modalManager = window.MishuraApp.components.modalManager;
        imageUpload = window.MishuraApp.components.imageUpload;

        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π v1.1.0 (Embedded API)");
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π API
        API_SERVICE.init().then((hasRealApi) => {
            logger.info(hasRealApi ? "‚úÖ –†–µ–∞–ª—å–Ω—ã–π API –ø–æ–¥–∫–ª—é—á–µ–Ω" : "üé≠ –†–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏");
            setupEventListeners();
            setupButtonHandlers();
            isConsultationInitialized = true;
            logger.info("‚úÖ –ú–æ–¥—É–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
        });
    }
    
    function createFallbackLogger() {
        return {
            debug: (...args) => console.debug("Consultation:", ...args),
            info: (...args) => console.info("Consultation:", ...args),
            warn: (...args) => console.warn("Consultation:", ...args),
            error: (...args) => console.error("Consultation:", ...args)
        };
    }
    
    function setupEventListeners() {
        // –°–ª—É—à–∞–µ–º —Å–º–µ–Ω—É —Ä–µ–∂–∏–º–∞
        document.addEventListener('modeChanged', (e) => {
            currentMode = e.detail.mode;
            logger.debug(`Consultation (event modeChanged): —Ä–µ–∂–∏–º ${currentMode}. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏.`);
            updateSubmitButtonState();
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
            setTimeout(setupButtonHandlers, 100);
        });

        // –°–ª—É—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        document.addEventListener('singleImageUploaded', (e) => {
            logger.debug(`Consultation (event singleImageUploaded): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ - ${e.detail.file.name}`);
            updateSubmitButtonState();
        });

        document.addEventListener('singleImageRemoved', () => {
            logger.debug("Consultation (event singleImageRemoved): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É–¥–∞–ª–µ–Ω–æ.");
            updateSubmitButtonState();
        });

        document.addEventListener('compareImageUploaded', (e) => {
            logger.debug(`Consultation (event compareImageUploaded): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Å–ª–æ—Ç ${e.detail.slot} - ${e.detail.file.name}`);
            updateSubmitButtonState();
        });

        document.addEventListener('compareImageRemoved', (e) => {
            logger.debug(`Consultation (event compareImageRemoved): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ—Ç–∞ ${e.detail.slot}`);
            updateSubmitButtonState();
        });

        // –°–ª—É—à–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.addEventListener('modalOpened', (e) => {
            if (e.detail.modalId === 'consultation-overlay') {
                logger.debug(`Consultation (event modalOpened '${e.detail.modalId}'): –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–∫–∏.`);
                updateSubmitButtonState();
                setTimeout(setupButtonHandlers, 100);
            }
        });
    }
    
    function setupButtonHandlers() {
        logger.debug("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏");
        
        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ single –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        const submitSingleBtn = document.querySelector('#submit-consultation');
        if (submitSingleBtn) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const newBtn = submitSingleBtn.cloneNode(true);
            submitSingleBtn.parentNode.replaceChild(newBtn, submitSingleBtn);
            
            newBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                if (!isSubmitting) {
                    handleSingleConsultationSubmit();
                }
            });
            logger.debug("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ single consultation —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        // –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ compare –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏  
        const submitCompareBtn = document.querySelector('#submit-comparison');
        if (submitCompareBtn) {
            // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const newBtn = submitCompareBtn.cloneNode(true);
            submitCompareBtn.parentNode.replaceChild(newBtn, submitCompareBtn);
            
            newBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                if (!isSubmitting) {
                    handleCompareConsultationSubmit();
                }
            });
            logger.debug("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ compare consultation —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");
        }

        // –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
        const cancelBtns = document.querySelectorAll('#consultation-cancel, #compare-cancel');
        cancelBtns.forEach(btn => {
            const newBtn = btn.cloneNode(true);
            btn.parentNode.replaceChild(newBtn, btn);
            
            newBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                handleCancelConsultation();
            });
        });
        
        if (cancelBtns.length > 0) {
            logger.debug(`‚úÖ ${cancelBtns.length} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–º–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
        }
    }
    
    function updateSubmitButtonState() {
        const submitSingleBtn = document.querySelector('#submit-consultation');
        const submitCompareBtn = document.querySelector('#submit-comparison');
        
        if (currentMode === 'single') {
            const hasImage = imageUpload?.getUploadedImages()?.single !== null;
            
            if (submitSingleBtn) {
                if (hasImage && !isSubmitting) {
                    submitSingleBtn.disabled = false;
                    submitSingleBtn.classList.remove('disabled');
                    logger.debug("Consultation: –ö–Ω–æ–ø–∫–∞ submit (single mode) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
                } else {
                    submitSingleBtn.disabled = true;
                    submitSingleBtn.classList.add('disabled');
                    logger.debug("Consultation: –ö–Ω–æ–ø–∫–∞ submit (single mode) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞");
                }
            }
        } else if (currentMode === 'compare') {
            const images = imageUpload?.getUploadedImages()?.compare || [];
            const imageCount = images.filter(img => img !== null).length;
            
            if (submitCompareBtn) {
                if (imageCount >= 2 && !isSubmitting) {
                    submitCompareBtn.disabled = false;
                    submitCompareBtn.classList.remove('disabled');
                    logger.debug(`Consultation: –ö–Ω–æ–ø–∫–∞ submit (compare mode) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageCount})`);
                } else {
                    submitCompareBtn.disabled = true;
                    submitCompareBtn.classList.add('disabled');
                    logger.debug(`Consultation: –ö–Ω–æ–ø–∫–∞ submit (compare mode) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageCount})`);
                }
            }
        }
    }
    
    async function handleSingleConsultationSubmit() {
        logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ submit —Ñ–æ—Ä–º—ã, —Ä–µ–∂–∏–º 'single'");
        
        if (isSubmitting) {
            logger.warn("–£–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        const apiService = window.MishuraApp.api;
        if (!apiService) {
            logger.error("API Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
            showErrorMessage("–û—à–∏–±–∫–∞: API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
            return;
        }
        
        try {
            isSubmitting = true;
            updateSubmitButtonState();
            
            showLoadingIndicator("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –æ–±—Ä–∞–∑...");
            
            const uploadedImages = imageUpload?.getUploadedImages();
            const singleImage = uploadedImages?.single;
            
            if (!singleImage) {
                throw new Error("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            }
            
            const occasion = getSelectedOccasion();
            const preferences = getPreferences();
            
            logger.debug("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑:", { 
                imageSize: singleImage.size,
                imageName: singleImage.name,
                occasion,
                preferences 
            });
            
            const result = await apiService.analyzeImage(singleImage, { occasion, preferences });
            displayAnalysisResult(result);
            
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:", error);
            showErrorMessage(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
        } finally {
            isSubmitting = false;
            hideLoadingIndicator();
            updateSubmitButtonState();
        }
    }
    
    async function handleCompareConsultationSubmit() {
        logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ submit —Ñ–æ—Ä–º—ã, —Ä–µ–∂–∏–º 'compare'");
        
        if (isSubmitting) {
            logger.warn("–£–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        const apiService = window.MishuraApp.api;
        if (!apiService) {
            logger.error("API Service –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
            showErrorMessage("–û—à–∏–±–∫–∞: API –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.");
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ comparison
        const comparison = window.MishuraApp.features.comparison;
        if (!comparison || typeof comparison.getUploadedImages !== 'function') {
            logger.error("–ú–æ–¥—É–ª—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑—É–µ—Ç getUploadedImages");
            showErrorMessage("–û—à–∏–±–∫–∞: –ú–æ–¥—É–ª—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }
        const images = comparison.getUploadedImages ? comparison.getUploadedImages() : [];
        if (!images || images.length < 2) {
            if (uiHelpers) uiHelpers.showToast('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            return;
        }

        const occasion = document.getElementById('occasion-selector')?.value || '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π';
        const preferences = document.getElementById('preferences-input')?.value || '';

        if (uiHelpers) uiHelpers.showLoading('–°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±—Ä–∞–∑—ã...');

        try {
            const result = await apiService.compareImages(images, { occasion, preferences });
            if (uiHelpers) {
                uiHelpers.hideLoading();
                if (uiHelpers.closeModal) uiHelpers.closeModal('consultation-overlay');
                if (uiHelpers.showResults) uiHelpers.showResults(result);
            }
            logger.info("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
        } catch (error) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤:", error);
            if (uiHelpers) {
                uiHelpers.hideLoading();
                uiHelpers.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            }
        }
    }
    
    function handleCancelConsultation() {
        logger.debug("–û—Ç–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏");
        
        if (modalManager) {
            modalManager.closeModal('consultation-overlay');
        } else {
            const modal = document.querySelector('#consultation-overlay');
            if (modal) {
                modal.classList.remove('active');
                modal.style.display = 'none';
            }
        }
    }
    
    // –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–æ–π
    function getSelectedOccasion() {
        const select = document.querySelector('.occasion-selector select');
        return select?.value || '';
    }
    
    function getPreferences() {
        const textarea = document.querySelector('.preferences-input textarea');
        return textarea?.value || '';
    }
    
    // UI —Ñ—É–Ω–∫—Ü–∏–∏
    function showLoadingIndicator(message = "–û–±—Ä–∞–±–æ—Ç–∫–∞...") {
        if (uiHelpers?.showLoadingIndicator) {
            uiHelpers.showLoadingIndicator(message);
        } else {
            let loader = document.getElementById('loading-indicator');
            if (!loader) {
                loader = document.createElement('div');
                loader.id = 'loading-indicator';
                loader.style.cssText = `
                    position: fixed;
                    top: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background: rgba(0,0,0,0.8);
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    z-index: 9999;
                    color: white;
                    font-size: 18px;
                `;
                document.body.appendChild(loader);
            }
            loader.innerHTML = `
                <div style="text-align: center;">
                    <div style="font-size: 24px; margin-bottom: 16px;">‚è≥</div>
                    <div>${message}</div>
                </div>
            `;
            loader.style.display = 'flex';
        }
        logger.debug("–ü–æ–∫–∞–∑–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏");
    }
    
    function hideLoadingIndicator() {
        if (uiHelpers?.hideLoadingIndicator) {
            uiHelpers.hideLoadingIndicator();
        } else {
            const loader = document.getElementById('loading-indicator');
            if (loader) {
                loader.style.display = 'none';
            }
        }
        logger.debug("–°–∫—Ä—ã—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏");
    }
    
    function showErrorMessage(message) {
        if (uiHelpers?.showToast) {
            uiHelpers.showToast(message, 'error');
        } else {
            alert(message);
        }
    }
    
    function displayAnalysisResult(result) {
        logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞");
        
        if (modalManager) {
            modalManager.closeModal('consultation-overlay');
        }
        
        const resultHtml = formatAnalysisResult(result);
        showResultModal('–ê–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞–∑–∞', resultHtml);
    }
    
    function displayComparisonResult(result) {
        logger.info("–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è");
        
        if (modalManager) {
            modalManager.closeModal('consultation-overlay');
        }
        
        const resultHtml = formatComparisonResult(result);
        showResultModal('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞—à–∏—Ö –æ–±—Ä–∞–∑–æ–≤', resultHtml);
    }
    
    function formatAnalysisResult(result) {
        const modeLabel = result.mode === 'mock' ? '<p style="color: #7f8c8d; font-size: 0.9em;">üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º</p>' : '';
        
        return `
            <div class="analysis-result" style="padding: 20px; line-height: 1.6;">
                <div class="result-section" style="margin-bottom: 20px;">
                    <h3 style="color: #2c3e50; margin-bottom: 10px;">üéØ –°—Ç–∏–ª—å –∏ –æ–±—Ä–∞–∑</h3>
                    <p>${result.style_analysis || '–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è...'}</p>
                </div>
                <div class="result-section" style="margin-bottom: 20px;">
                    <h3 style="color: #2c3e50; margin-bottom: 10px;">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
                    <p>${result.recommendations || '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...'}</p>
                </div>
                <div class="result-section" style="margin-bottom: 20px;">
                    <h3 style="color: #2c3e50; margin-bottom: 10px;">üåü –û—Ü–µ–Ω–∫–∞</h3>
                    <p>${result.rating || '–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –æ–±—Ä–∞–∑–∞...'}</p>
                </div>
                ${modeLabel}
            </div>
        `;
    }
    
    function formatComparisonResult(result) {
        const modeLabel = result.mode === 'mock' ? '<p style="color: #7f8c8d; font-size: 0.9em; margin-top: 20px;">üìù –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º</p>' : '';
        
        return `
            <div class="comparison-result" style="padding: 20px; line-height: 1.6;">
                <div class="result-section" style="margin-bottom: 20px;">
                    <h3 style="color: #2c3e50; margin-bottom: 10px;">üèÜ –õ—É—á—à–∏–π –æ–±—Ä–∞–∑</h3>
                    <p>${result.best_outfit || '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–≥–æ –æ–±—Ä–∞–∑–∞...'}</p>
                </div>
                <div class="result-section" style="margin-bottom: 20px;">
                    <h3 style="color: #2c3e50; margin-bottom: 10px;">üìä –°—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑</h3>
                    <p style="white-space: pre-line;">${result.comparison || '–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤...'}</p>
                </div>
                <div class="result-section" style="margin-bottom: 20px;">
                    <h3 style="color: #2c3e50; margin-bottom: 10px;">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é</h3>
                    <p style="white-space: pre-line;">${result.improvement_tips || '–°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –æ–±—Ä–∞–∑–æ–≤...'}</p>
                </div>
                ${modeLabel}
            </div>
        `;
    }
    
    function showResultModal(title, content) {
        let resultModal = document.getElementById('result-modal');
        if (!resultModal) {
            resultModal = document.createElement('div');
            resultModal.id = 'result-modal';
            resultModal.innerHTML = `
                <div style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0,0,0,0.8); display: flex; align-items: center; justify-content: center; z-index: 10000;">
                    <div style="background: white; border-radius: 12px; max-width: 700px; max-height: 80vh; overflow-y: auto; position: relative; box-shadow: 0 10px 30px rgba(0,0,0,0.3);">
                        <div style="padding: 20px; border-bottom: 1px solid #eee; display: flex; justify-content: space-between; align-items: center; background: #f8f9fa; border-radius: 12px 12px 0 0;">
                            <h2 id="result-title" style="margin: 0; color: #2c3e50;"></h2>
                            <button onclick="document.getElementById('result-modal').remove()" style="background: none; border: none; font-size: 24px; cursor: pointer; color: #7f8c8d; padding: 0;">‚úï</button>
                        </div>
                        <div id="result-content"></div>
                        <div style="padding: 20px; border-top: 1px solid #eee; text-align: right; background: #f8f9fa; border-radius: 0 0 12px 12px;">
                            <button onclick="document.getElementById('result-modal').remove()" style="background: #3498db; color: white; border: none; padding: 12px 24px; border-radius: 6px; cursor: pointer; font-size: 16px;">–ó–∞–∫—Ä—ã—Ç—å</button>
                        </div>
                    </div>
                </div>
            `;
            document.body.appendChild(resultModal);
        }
        
        document.getElementById('result-title').textContent = title;
        document.getElementById('result-content').innerHTML = content;
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–π API
    function openConsultationModal(mode = 'single') {
        logger.info("Consultation: –≤—ã–∑–æ–≤ openConsultationModal()");
        currentMode = mode;
        
        if (modalManager) {
            modalManager.openModal('consultation-overlay');
        } else {
            const modal = document.querySelector('#consultation-overlay');
            if (modal) {
                modal.classList.add('active');
                modal.style.display = 'block';
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        setTimeout(() => {
            updateSubmitButtonState();
            setupButtonHandlers();
        }, 200);
    }
    
    function getCurrentMode() {
        return currentMode;
    }

    function handleConsultationSubmit() {
        const mode = getCurrentMode();
        if (mode === 'compare') {
            handleCompareConsultationSubmit();
        } else {
            handleSingleConsultationSubmit();
        }
    }
    
    return {
        init,
        openConsultationModal,
        updateSubmitButtonState,
        setupButtonHandlers,
        isInitialized: () => isConsultationInitialized
    };
})();