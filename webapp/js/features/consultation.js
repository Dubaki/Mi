/**
 * –ú–æ–¥—É–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
 */

import { Logger } from './logger.js';
import { ApiService } from './api.js';

const logger = new Logger('Consultation');

export class ConsultationModule {
    constructor() {
        this.apiService = null;
        this.currentMode = 'single';
        this.uploadedImages = new Map();
        this.compareImages = new Map();
        this.singleImage = null;
        this.submitHandler = null;
        this.cancelHandlers = [];
        this.isInitialized = false;
    }

    async init() {
        try {
            logger.debug('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ http://localhost:8001/api/v1...');
            const response = await fetch('http://localhost:8001/api/v1/health');
            if (response.ok) {
                logger.info('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π API –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8001');
                this.apiService = new ApiService('http://localhost:8001/api/v1');
                await this.apiService.init();
                logger.info('‚úÖ –†–µ–∞–ª—å–Ω—ã–π API –ø–æ–¥–∫–ª—é—á–µ–Ω');
                this.setupEventHandlers();
                this.isInitialized = true;
                logger.info('‚úÖ –ú–æ–¥—É–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
                return;
            }
        } catch (error) {
            logger.debug('‚ùå http://localhost:8001/api/v1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        }

        try {
            logger.debug('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ http://localhost:8000/api/v1...');
            const response = await fetch('http://localhost:8000/api/v1/health');
            if (response.ok) {
                logger.info('‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π API –Ω–∞–π–¥–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000');
                this.apiService = new ApiService('http://localhost:8000/api/v1');
                await this.apiService.init();
                logger.info('‚úÖ –†–µ–∞–ª—å–Ω—ã–π API –ø–æ–¥–∫–ª—é—á–µ–Ω');
                this.setupEventHandlers();
                this.isInitialized = true;
                logger.info('‚úÖ –ú–æ–¥—É–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
                return;
            }
        } catch (error) {
            logger.debug('‚ùå http://localhost:8000/api/v1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        }

        try {
            logger.debug('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ https://style-ai-bot.onrender.com/api/v1...');
            const response = await fetch('https://style-ai-bot.onrender.com/api/v1/health');
            if (response.ok) {
                const data = await response.json();
                logger.info('‚úÖ API –Ω–∞–π–¥–µ–Ω: https://style-ai-bot.onrender.com/api/v1', data);
                this.apiService = new ApiService('https://style-ai-bot.onrender.com/api/v1');
                await this.apiService.init();
                logger.info('‚úÖ –†–µ–∞–ª—å–Ω—ã–π API –ø–æ–¥–∫–ª—é—á–µ–Ω');
                this.setupEventHandlers();
                this.isInitialized = true;
                logger.info('‚úÖ –ú–æ–¥—É–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
                return;
            }
        } catch (error) {
            logger.debug('‚ùå https://style-ai-bot.onrender.com/api/v1 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        }

        logger.warn('‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è mock –¥–∞–Ω–Ω—ã–µ');
        this.setupEventHandlers();
        this.isInitialized = true;
        logger.info('‚úÖ –ú–æ–¥—É–ª—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ (mock —Ä–µ–∂–∏–º)');
    }

    async analyzeImage(imageData, imageName, occasion, preferences) {
        const apiBaseUrl = this.apiService ? this.apiService.baseUrl : null;
        
        if (!apiBaseUrl) {
            logger.warn('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ');
            return this.getMockAnalysisResult();
        }

        try {
            logger.info('üì∏ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ API');
            
            const formData = new FormData();
            
            const blob = this.dataURLtoBlob(imageData);
            formData.append('image', blob, imageName);
            formData.append('occasion', occasion || '');
            formData.append('preferences', preferences || '');
            formData.append('analysis_type', 'single');

            const response = await fetch(`${apiBaseUrl}/analyze`, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${await response.text()}`);
            }

            const result = await response.json();
            logger.info('‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω –æ—Ç API');
            return result;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ API –∞–Ω–∞–ª–∏–∑–∞:', error);
            logger.warn('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ');
            logger.info('üé≠ Mock –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
            await new Promise(resolve => setTimeout(resolve, 2000));
            return this.getMockAnalysisResult();
        }
    }

    async compareImages(images, occasion, preferences) {
        const apiBaseUrl = this.apiService ? this.apiService.baseUrl : null;
        
        if (!apiBaseUrl) {
            logger.warn('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ');
            return this.getMockComparisonResult();
        }

        try {
            logger.info('üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ API');
            
            const formData = new FormData();
            
            images.forEach((imageData, index) => {
                const blob = this.dataURLtoBlob(imageData.data);
                formData.append('images', blob, imageData.name);
            });
            
            formData.append('occasion', occasion || '');
            formData.append('preferences', preferences || '');
            formData.append('analysis_type', 'compare');

            const response = await fetch(`${apiBaseUrl}/analyze`, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${await response.text()}`);
            }

            const result = await response.json();
            logger.info('‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç API');
            return result;

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ API —Å—Ä–∞–≤–Ω–µ–Ω–∏—è:', error);
            logger.warn('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ mock –¥–∞–Ω–Ω—ã–µ');
            logger.info('üé≠ Mock —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
            await new Promise(resolve => setTimeout(resolve, 3000));
            return this.getMockComparisonResult();
        }
    }

    dataURLtoBlob(dataURL) {
        const arr = dataURL.split(',');
        const mime = arr[0].match(/:(.*?);/)[1];
        const bstr = atob(arr[1]);
        let n = bstr.length;
        const u8arr = new Uint8Array(n);
        while (n--) {
            u8arr[n] = bstr.charCodeAt(n);
        }
        return new Blob([u8arr], { type: mime });
    }

    getMockAnalysisResult() {
        return {
            analysis: {
                style: "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –≤–µ—á–µ—Ä–Ω–∏–π —Å—Ç–∏–ª—å",
                colors: ["–ß–µ—Ä–Ω—ã–π", "–ó–æ–ª–æ—Ç–æ–π", "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π"],
                occasion_fit: 95,
                recommendations: [
                    "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –≤–µ—á–µ—Ä–Ω–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
                    "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –∑–æ–ª–æ—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞",
                    "–ü–æ–¥—Ö–æ–¥—è—â–∞—è –æ–±—É–≤—å: –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç—É—Ñ–ª–∏ –Ω–∞ –∫–∞–±–ª—É–∫–µ"
                ],
                overall_score: 92
            },
            status: "success"
        };
    }

    getMockComparisonResult() {
        return {
            comparison: {
                best_choice: {
                    index: 0,
                    reason: "–õ—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–ª—É—á–∞—è"
                },
                analysis: [
                    {
                        style: "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –¥–µ–ª–æ–≤–æ–π",
                        score: 95,
                        pros: ["–≠–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç—å", "–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å"],
                        cons: ["–ú–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º"]
                    },
                    {
                        style: "–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π —à–∏–∫",
                        score: 78,
                        pros: ["–ö–æ–º—Ñ–æ—Ä—Ç", "–°—Ç–∏–ª—å–Ω–æ—Å—Ç—å"],
                        cons: ["–ú–µ–Ω–µ–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"]
                    }
                ],
                recommendations: [
                    "–ü–µ—Ä–≤—ã–π –æ–±—Ä–∞–∑ –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏",
                    "–î–æ–±–∞–≤—å—Ç–µ —è—Ä–∫–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –∫ –ø–µ—Ä–≤–æ–º—É –æ–±—Ä–∞–∑—É",
                    "–í—Ç–æ—Ä–æ–π –æ–±—Ä–∞–∑ –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–Ω–µ–≤–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π"
                ]
            },
            status: "success"
        };
    }

    setupEventHandlers() {
        document.addEventListener('consultationSubmit', this.handleConsultationSubmit.bind(this));
        document.addEventListener('consultationCancel', this.handleConsultationCancel.bind(this));
        document.addEventListener('modeChanged', this.handleModeChange.bind(this));
        document.addEventListener('singleImageUploaded', this.handleSingleImageUploaded.bind(this));
        document.addEventListener('singleImageRemoved', this.handleSingleImageRemoved.bind(this));
        document.addEventListener('compareImageUploaded', this.handleCompareImageUploaded.bind(this));
        document.addEventListener('compareImageRemoved', this.handleCompareImageRemoved.bind(this));
        
        this.setupSubmitHandler();
        this.setupCancelHandlers();
        logger.debug('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–Ω–æ–ø–æ–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
        logger.debug('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ consultation submit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        logger.debug(`‚úÖ ${this.cancelHandlers.length} –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—Ç–º–µ–Ω—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
    }

    setupSubmitHandler() {
        const form = document.getElementById('consultation-form');
        if (form) {
            if (this.submitHandler) {
                form.removeEventListener('submit', this.submitHandler);
            }
            
            this.submitHandler = (e) => {
                e.preventDefault();
                
                const mode = form.dataset.mode || this.currentMode;
                logger.info(`üöÄ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ submit —Ñ–æ—Ä–º—ã, —Ä–µ–∂–∏–º '${mode}'`);
                
                document.dispatchEvent(new CustomEvent('consultationSubmit', {
                    detail: { mode }
                }));
            };
            
            form.addEventListener('submit', this.submitHandler);
        }
    }

    setupCancelHandlers() {
        this.cancelHandlers.forEach(({ element, handler }) => {
            element.removeEventListener('click', handler);
        });
        this.cancelHandlers = [];

        const cancelButtons = document.querySelectorAll('.modal-close, .cancel-consultation');
        cancelButtons.forEach(button => {
            const handler = () => {
                document.dispatchEvent(new CustomEvent('consultationCancel'));
            };
            
            button.addEventListener('click', handler);
            this.cancelHandlers.push({ element: button, handler });
        });
    }

    async handleConsultationSubmit(event) {
        const { mode } = event.detail;
        
        if (mode === 'single') {
            await this.handleSingleConsultationSubmit();
        } else if (mode === 'compare') {
            await this.handleCompareConsultationSubmit();
        }
    }

    async handleSingleConsultationSubmit() {
        if (!this.singleImage) {
            logger.warn('‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞');
            return;
        }

        const submitButton = document.querySelector('#consultation-submit');
        const loadingIndicator = document.querySelector('.loading-indicator');
        
        if (submitButton) {
            submitButton.disabled = true;
            logger.debug('Consultation: –ö–Ω–æ–ø–∫–∞ submit (single mode) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        if (loadingIndicator) {
            loadingIndicator.style.display = 'block';
            logger.debug('–ü–æ–∫–∞–∑–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏');
        }

        try {
            const occasionSelect = document.getElementById('occasion');
            const preferencesInput = document.getElementById('preferences');
            
            const occasion = occasionSelect ? occasionSelect.value : '';
            const preferences = preferencesInput ? preferencesInput.value : '';
            
            logger.debug('–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑:', {
                imageSize: this.singleImage.data.length,
                imageName: this.singleImage.name,
                occasion,
                preferences
            });

            const result = await this.analyzeImage(
                this.singleImage.data,
                this.singleImage.name,
                occasion,
                preferences
            );

            this.displayAnalysisResult(result);

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –∞–Ω–∞–ª–∏–∑:', error);
            this.displayError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        } finally {
            if (loadingIndicator) {
                loadingIndicator.style.display = 'none';
                logger.debug('–°–∫—Ä—ã—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏');
            }
            
            if (submitButton) {
                submitButton.disabled = false;
                logger.debug('Consultation: –ö–Ω–æ–ø–∫–∞ submit (single mode) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
            }
        }
    }

    async handleCompareConsultationSubmit() {
        if (this.compareImages.size < 2) {
            logger.warn('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            return;
        }

        const submitButton = document.querySelector('#consultation-submit');
        const loadingIndicator = document.querySelector('.loading-indicator');
        
        if (submitButton) {
            submitButton.disabled = true;
            logger.debug(`Consultation: –ö–Ω–æ–ø–∫–∞ submit (compare mode) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${this.compareImages.size})`);
        }
        
        if (loadingIndicator) {
            loadingIndicator.style.display = 'block';
            logger.debug('–ü–æ–∫–∞–∑–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏');
        }

        try {
            const occasionSelect = document.getElementById('occasion');
            const preferencesInput = document.getElementById('preferences');
            
            const occasion = occasionSelect ? occasionSelect.value : '';
            const preferences = preferencesInput ? preferencesInput.value : '';
            
            logger.debug('–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:', {
                imageCount: this.compareImages.size,
                occasion,
                preferences
            });

            const images = Array.from(this.compareImages.values());
            const result = await this.compareImages(images, occasion, preferences);

            this.displayComparisonResult(result);

        } catch (error) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:', error);
            this.displayError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        } finally {
            if (loadingIndicator) {
                loadingIndicator.style.display = 'none';
                logger.debug('–°–∫—Ä—ã—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏');
            }
            
            if (submitButton) {
                submitButton.disabled = false;
                logger.debug(`Consultation: –ö–Ω–æ–ø–∫–∞ submit (compare mode) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${this.compareImages.size})`);
            }
        }
    }

    handleConsultationCancel() {
        logger.debug('–û—Ç–º–µ–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
        this.closeModal();
    }

    handleModeChange(event) {
        const { mode } = event.detail;
        this.currentMode = mode;
        
        logger.debug(`Consultation (event modeChanged): —Ä–µ–∂–∏–º ${mode}. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏.`);
        this.updateSubmitButton();
    }

    handleSingleImageUploaded(event) {
        const { imageData, imageName } = event.detail;
        this.singleImage = { data: imageData, name: imageName };
        
        logger.debug(`Consultation (event singleImageUploaded): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ, —Ñ–∞–π–ª ${imageName}`);
        this.updateSubmitButton();
    }

    handleSingleImageRemoved(event) {
        this.singleImage = null;
        
        logger.debug('Consultation (event singleImageRemoved): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —É–¥–∞–ª–µ–Ω–æ.');
        this.updateSubmitButton();
    }

    handleCompareImageUploaded(event) {
        const { slot, imageData, imageName } = event.detail;
        this.compareImages.set(slot, { data: imageData, name: imageName });
        
        logger.debug(`Consultation (event compareImageUploaded): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Å–ª–æ—Ç ${slot}, —Ñ–∞–π–ª ${imageName}`);
        this.updateSubmitButton();
    }

    handleCompareImageRemoved(event) {
        const { slot } = event.detail;
        this.compareImages.delete(slot);
        
        logger.debug(`Consultation (event compareImageRemoved): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ—Ç–∞ ${slot}`);
        this.updateSubmitButton();
    }

    updateSubmitButton() {
        const submitButton = document.querySelector('#consultation-submit');
        if (!submitButton) return;

        if (this.currentMode === 'single') {
            const hasImage = this.singleImage !== null;
            submitButton.disabled = !hasImage;
            
            if (hasImage) {
                logger.debug('Consultation: –ö–Ω–æ–ø–∫–∞ submit (single mode) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
            } else {
                logger.debug('Consultation: –ö–Ω–æ–ø–∫–∞ submit (single mode) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
            }
        } else if (this.currentMode === 'compare') {
            const imageCount = this.compareImages.size;
            const hasEnoughImages = imageCount >= 2;
            submitButton.disabled = !hasEnoughImages;
            
            if (hasEnoughImages) {
                logger.debug(`Consultation: –ö–Ω–æ–ø–∫–∞ submit (compare mode) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageCount})`);
            } else {
                logger.debug(`Consultation: –ö–Ω–æ–ø–∫–∞ submit (compare mode) –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${imageCount})`);
            }
        }
    }

    displayAnalysisResult(result) {
        logger.info('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞');
        
        const resultContainer = document.querySelector('.consultation-result');
        if (!resultContainer) {
            logger.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const analysis = result.analysis || {};
        
        const html = `
            <div class="analysis-result">
                <h3>üìä –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞</h3>
                <div class="result-section">
                    <h4>üé® –°—Ç–∏–ª—å</h4>
                    <p>${analysis.style || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</p>
                </div>
                <div class="result-section">
                    <h4>üåà –¶–≤–µ—Ç–∞</h4>
                    <p>${(analysis.colors || []).join(', ') || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}</p>
                </div>
                <div class="result-section">
                    <h4>üéØ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å–ª—É—á–∞—é</h4>
                    <p>${analysis.occasion_fit || 0}%</p>
                </div>
                <div class="result-section">
                    <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
                    <ul>
                        ${(analysis.recommendations || []).map(rec => `<li>${rec}</li>`).join('')}
                    </ul>
                </div>
                <div class="result-section">
                    <h4>‚≠ê –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</h4>
                    <p>${analysis.overall_score || 0}/100</p>
                </div>
            </div>
        `;
        
        resultContainer.innerHTML = html;
        resultContainer.style.display = 'block';
    }

    displayComparisonResult(result) {
        logger.info('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
        
        const resultContainer = document.querySelector('.consultation-result');
        if (!resultContainer) {
            logger.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const comparison = result.comparison || {};
        const bestChoice = comparison.best_choice || {};
        const analysis = comparison.analysis || [];
        
        const html = `
            <div class="comparison-result">
                <h3>üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤</h3>
                <div class="result-section">
                    <h4>üèÜ –õ—É—á—à–∏–π –≤—ã–±–æ—Ä</h4>
                    <p>–û–±—Ä–∞–∑ ${(bestChoice.index || 0) + 1}: ${bestChoice.reason || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</p>
                </div>
                <div class="result-section">
                    <h4>üìä –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–æ–≤</h4>
                    ${analysis.map((item, index) => `
                        <div class="outfit-analysis">
                            <h5>–û–±—Ä–∞–∑ ${index + 1} - ${item.style || '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}</h5>
                            <p><strong>–û—Ü–µ–Ω–∫–∞:</strong> ${item.score || 0}/100</p>
                            <p><strong>–ü–ª—é—Å—ã:</strong> ${(item.pros || []).join(', ')}</p>
                            <p><strong>–ú–∏–Ω—É—Å—ã:</strong> ${(item.cons || []).join(', ')}</p>
                        </div>
                    `).join('')}
                </div>
                <div class="result-section">
                    <h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4>
                    <ul>
                        ${(comparison.recommendations || []).map(rec => `<li>${rec}</li>`).join('')}
                    </ul>
                </div>
            </div>
        `;
        
        resultContainer.innerHTML = html;
        resultContainer.style.display = 'block';
    }

    displayError(message) {
        const resultContainer = document.querySelector('.consultation-result');
        if (!resultContainer) return;

        resultContainer.innerHTML = `
            <div class="error-result">
                <h3>‚ùå –û—à–∏–±–∫–∞</h3>
                <p>${message}</p>
            </div>
        `;
        resultContainer.style.display = 'block';
    }

    closeModal() {
        const modal = document.getElementById('consultation-modal');
        if (modal) {
            modal.style.display = 'none';
        }
        
        this.singleImage = null;
        this.compareImages.clear();
        
        const resultContainer = document.querySelector('.consultation-result');
        if (resultContainer) {
            resultContainer.style.display = 'none';
            resultContainer.innerHTML = '';
        }
    }

    openConsultationModal(mode = 'single') {
        logger.info('Consultation: –≤—ã–∑–æ–≤ openConsultationModal()');
        
        const modal = document.getElementById('consultation-modal');
        if (!modal) {
            logger.error('‚ùå –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        this.currentMode = mode;
        modal.style.display = 'flex';
        
        const form = document.getElementById('consultation-form');
        if (form) {
            form.dataset.mode = mode;
        }
        
        document.dispatchEvent(new CustomEvent('modeChanged', {
            detail: { mode }
        }));
        
        this.setupSubmitHandler();
        this.setupCancelHandlers();
        this.updateSubmitButton();
    }
}