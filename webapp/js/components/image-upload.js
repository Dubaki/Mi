/*
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (image-upload.js)
–í–ï–†–°–ò–Ø: 0.4.8 (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ)
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-05-24

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –§–ê–ô–õ–ê:
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
==========================================================================================
*/

window.MishuraApp = window.MishuraApp || {};
window.MishuraApp.components = window.MishuraApp.components || {};
window.MishuraApp.components.imageUpload = (function() {
    'use strict';
    
    let config, logger, uiHelpers;
    
    let singleUploadArea, singleFileInput, singlePreviewContainer, singlePreviewImage, singleDeleteButton;
    let imageSlotsContainer;
    let modeButtons, singleAnalysisMode, compareAnalysisMode;
    
    let isUploadingActive = false;
    let uploadedImages = { single: null, compare: [null, null, null, null] };
    let isImageUploadInitialized = false;
    
    function init() {
        if (isImageUploadInitialized) {
            // console.warn("ImageUpload: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.");
            return;
        }
        config = window.MishuraApp.config;
        logger = window.MishuraApp.utils.logger || { debug: (...args)=>console.debug("ImageUpload(f):",...args), info: (...args)=>console.info("ImageUpload(f):",...args), warn: (...args)=>console.warn("ImageUpload(f):",...args), error: (...args)=>console.error("ImageUpload(f):",...args) };
        uiHelpers = window.MishuraApp.utils.uiHelpers;
        
        logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (v0.4.8)");
        initDOMElements(); // –°–Ω–∞—á–∞–ª–∞ DOM
        initModeButtons();   // –ü–æ—Ç–æ–º —Ä–µ–∂–∏–º—ã
        initSingleImageUpload(); // –ü–æ—Ç–æ–º –∑–∞–≥—Ä—É–∑—á–∏–∫–∏
        initCompareImageUpload();
        isImageUploadInitialized = true;
        logger.info("–ú–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (v0.4.8)");
    }
    
    function initDOMElements() {
        logger.debug("ImageUpload: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤...");
        singleUploadArea = document.getElementById('single-upload-area');
        singleFileInput = document.getElementById('single-upload-input');
        singlePreviewContainer = document.getElementById('single-preview-container');
        singlePreviewImage = document.getElementById('single-preview-image');
        singleDeleteButton = document.querySelector('#single-preview-container .delete-image[data-target="single"]');
        
        imageSlotsContainer = document.querySelector('#compare-analysis-mode .image-slots');
        
        modeButtons = document.querySelectorAll('#consultation-overlay .mode-button');
        singleAnalysisMode = document.getElementById('single-analysis-mode');
        compareAnalysisMode = document.getElementById('compare-analysis-mode');

        const elementsToLog = {singleUploadArea, singleFileInput, singlePreviewContainer, singlePreviewImage, singleDeleteButton, imageSlotsContainer, modeButtonsLength: modeButtons.length, singleAnalysisMode, compareAnalysisMode};
        for(const key in elementsToLog){
            const element = elementsToLog[key];
            if(element === null || (typeof element === 'number' && element === 0) || (typeof element === 'object' && !element && key !== 'modeButtonsLength')) { // –î–ª—è modeButtonsLength 0 - —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                 logger.warn(`ImageUpload DOM: –≠–ª–µ–º–µ–Ω—Ç –∏–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è '${key}' –Ω–µ –Ω–∞–π–¥–µ–Ω(–∞) –∏–ª–∏ –ø—É—Å—Ç(–∞).`);
            } else {
                 logger.debug(`ImageUpload DOM: –≠–ª–µ–º–µ–Ω—Ç '${key}' –Ω–∞–π–¥–µ–Ω.`);
            }
        }
    }
    
    function initModeButtons() {
        // –¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –Ω–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–µ–π —Ä–µ–∂–∏–º–æ–≤ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        // –†–µ–∂–∏–º –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏—è
        logger.debug("ImageUpload: –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª–∏ —Ä–µ–∂–∏–º–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞–º–∏.");
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
        document.addEventListener('modeChanged', function(e) {
            const mode = e.detail.mode;
            console.log(`üéØ ImageUpload: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ modeChanged —Å —Ä–µ–∂–∏–º–æ–º '${mode}'`);
            logger.debug(`ImageUpload: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –Ω–∞ '${mode}'`);
            
            if (mode === 'single') {
                console.log(`üì± ImageUpload: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º single`);
                if (singleAnalysisMode) singleAnalysisMode.classList.remove('hidden');
                if (compareAnalysisMode) compareAnalysisMode.classList.add('hidden');
                resetCompareImageUploads();
                initSingleImageUpload();
                logger.debug('ImageUpload: –†–µ–∂–∏–º single –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
            } else if (mode === 'compare') {
                console.log(`üì∑ ImageUpload: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º compare`);
                if (singleAnalysisMode) singleAnalysisMode.classList.add('hidden');
                if (compareAnalysisMode) compareAnalysisMode.classList.remove('hidden');
                resetSingleImageUpload();
                logger.debug('ImageUpload: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º compare, –∑–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...');
                // –†–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º compare —Ä–µ–∂–∏–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
                setTimeout(() => {
                    console.log(`‚è∞ ImageUpload: –¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª, –∑–∞–ø—É—Å–∫ initCompareImageUpload...`);
                    logger.debug('ImageUpload: –ó–∞–ø—É—Å–∫ initCompareImageUpload...');
                    imageSlotsContainer = document.querySelector('#compare-analysis-mode .image-slots');
                    if (imageSlotsContainer) {
                        console.log(`‚úÖ ImageUpload: –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–æ—Ç–æ–≤, —Å–ª–æ—Ç–æ–≤: ${imageSlotsContainer.querySelectorAll('.image-slot').length}`);
                        logger.debug(`ImageUpload: –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–æ—Ç–æ–≤, —Å–ª–æ—Ç–æ–≤: ${imageSlotsContainer.querySelectorAll('.image-slot').length}`);
                    } else {
                        console.error(`‚ùå ImageUpload: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–æ—Ç–æ–≤ –ù–ï –ù–ê–ô–î–ï–ù!`);
                        logger.error('ImageUpload: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–æ—Ç–æ–≤ –ù–ï –ù–ê–ô–î–ï–ù!');
                    }
                    initCompareImageUpload();
                }, 250); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            }
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º single –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (singleAnalysisMode && compareAnalysisMode) {
            singleAnalysisMode.classList.remove('hidden');
            compareAnalysisMode.classList.add('hidden');
            logger.debug("ImageUpload: –†–µ–∂–∏–º 'single' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
        }
    }

    function resetFileInput(inputElement) {
        if (inputElement) {
            const inputId = inputElement.id || inputElement.className || 'unknown_input';
            try {
                inputElement.value = ""; // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ —Ç–∞–∫
                 // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤ –∏ —Å–∏—Ç—É–∞—Ü–∏–π –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
                if (inputElement.value) { // –ï—Å–ª–∏ value –Ω–µ —Å–±—Ä–æ—Å–∏–ª—Å—è
                    logger.warn(`ImageUpload: input.value –¥–ª—è '${inputId}' –Ω–µ —Å–±—Ä–æ—Å–∏–ª—Å—è –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É. –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ type.`);
                    inputElement.type = ''; // –≠—Ç–æ —Ç—Ä—é–∫
                    inputElement.type = 'file';
                    if (inputElement.value) {
                         logger.warn(`ImageUpload: input.value –¥–ª—è '${inputId}' –≤—Å–µ –µ—â–µ –Ω–µ —Å–±—Ä–æ—à–µ–Ω.`);
                    } else {
                        logger.debug(`ImageUpload: input.value –¥–ª—è '${inputId}' —Å–±—Ä–æ—à–µ–Ω —á–µ—Ä–µ–∑ —Å–º–µ–Ω—É —Ç–∏–ø–∞.`);
                    }
                } else {
                     logger.debug(`ImageUpload: input.value –¥–ª—è '${inputId}' —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.`);
                }
            } catch (ex) {
                logger.error(`ImageUpload: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ input.value –¥–ª—è '${inputId}'.`, ex);
            }
        } else {
            logger.warn("ImageUpload: –ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π file input.");
        }
    }

    function setupInputClick(triggerElement, fileInputElement) {
        if (!triggerElement || !fileInputElement) return;
        
        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
        const newTrigger = triggerElement.cloneNode(true);
        triggerElement.parentNode.replaceChild(newTrigger, triggerElement);
        
        newTrigger.addEventListener('click', () => {
            const inputId = fileInputElement.id || 'unknown_input';
            logger.debug(`ImageUpload: –ö–ª–∏–∫ –Ω–∞ —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è '${inputId}'. –°–±—Ä–æ—Å –∏–Ω–ø—É—Ç–∞.`);
            resetFileInput(fileInputElement); 
            fileInputElement.click();
        });
        return newTrigger; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (drag/drop) –≤–µ—à–∞–ª–∏—Å—å –Ω–∞ –Ω–µ–≥–æ
    }

    function initSingleImageUpload() {
        if (!singleUploadArea || !singleFileInput || !singleDeleteButton) {
            return logger.warn("ImageUpload (Single): –ü—Ä–æ–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - –∫–ª—é—á–µ–≤—ã–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        }
        singleUploadArea = setupInputClick(singleUploadArea, singleFileInput) || singleUploadArea; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
        
        singleFileInput.addEventListener('change', (event) => { /* ... –∫–∞–∫ –±—ã–ª–æ ... */ 
            const file = event.target.files[0];
            if (file) {
                logger.debug(`ImageUpload (Single): –§–∞–π–ª –≤—ã–±—Ä–∞–Ω: ${file.name}`);
                handleSingleImageSelection(file);
            } else {
                logger.debug("ImageUpload (Single): –î–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω.");
            }
        });
        
        singleUploadArea.addEventListener('dragover', (e) => { e.preventDefault(); singleUploadArea.classList.add('dragover'); });
        singleUploadArea.addEventListener('dragleave', () => singleUploadArea.classList.remove('dragover'));
        singleUploadArea.addEventListener('drop', (e) => { /* ... –∫–∞–∫ –±—ã–ª–æ ... */ 
            e.preventDefault();
            singleUploadArea.classList.remove('dragover');
            if (e.dataTransfer.files.length) {
                logger.debug(`ImageUpload (Single): –§–∞–π–ª –ø–µ—Ä–µ—Ç–∞—â–µ–Ω: ${e.dataTransfer.files[0].name}`);
                handleSingleImageSelection(e.dataTransfer.files[0]);
            }
        });

        const newSingleDeleteButton = singleDeleteButton.cloneNode(true);
        singleDeleteButton.parentNode.replaceChild(newSingleDeleteButton, singleDeleteButton);
        singleDeleteButton = newSingleDeleteButton;

        singleDeleteButton.addEventListener('click', () => {
            logger.debug("ImageUpload (Single): –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è.");
            resetSingleImageUpload();
        });
    }
    
    function handleSingleImageSelection(file) {
        logger.debug(`ImageUpload (Single): –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${file.name}`);
        if (!isValidImageFile(file)) return;

        isUploadingActive = true;
        const reader = new FileReader();
        reader.onload = (e) => {
            if (singlePreviewImage && singlePreviewContainer && singleUploadArea) {
                singlePreviewImage.src = e.target.result;
                singlePreviewImage.style.display = 'block';
                singlePreviewContainer.style.display = 'block';
                singlePreviewContainer.classList.remove('hidden');
                singleUploadArea.classList.add('hidden');
                uploadedImages.single = file;
                
                const formContainer = document.getElementById('consultation-overlay');
                if (formContainer) {
                    const occasionSel = formContainer.querySelector('.occasion-selector');
                    const labels = formContainer.querySelectorAll('.input-label');
                    const prefsInput = formContainer.querySelector('.preferences-input');
                    const submitBtn = formContainer.querySelector('#submit-consultation');
                    if (occasionSel) {
                        occasionSel.classList.remove('hidden');
                        occasionSel.disabled = false;
                    }
                    labels.forEach(l => l.classList.remove('hidden'));
                    if (prefsInput) {
                        prefsInput.classList.remove('hidden');
                        prefsInput.disabled = false;
                    }
                    if (submitBtn) {
                        submitBtn.disabled = false;
                        submitBtn.classList.remove('disabled');
                    }
                }
                logger.info(`ImageUpload (Single): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${file.name} –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–æ.`);
                document.dispatchEvent(new CustomEvent('singleImageUploaded', { detail: { file: file } }));
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                if (singleFileInput) {
                    singleFileInput.value = '';
                }
            } else {
                logger.error("ImageUpload (Single): DOM —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–µ–≤—å—é –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.");
            }
            isUploadingActive = false;
        };
        reader.onerror = (error) => {
            logger.error("ImageUpload (Single): –û—à–∏–±–∫–∞ FileReader:", error);
            if (uiHelpers) uiHelpers.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
            isUploadingActive = false;
        };
        reader.readAsDataURL(file);
    }
    
    function tryAlternativeMethods(input, slotIndex) {
        console.log(`üîÑ –ó–∞–ø—É—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
        
        // –°–ø–æ—Å–æ–± 1: focus + click
        setTimeout(() => {
            try {
                console.log(`üîÑ –°–ø–æ—Å–æ–± 1 - focus + click –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
                input.focus();
                input.click();
                console.log(`‚úÖ focus + click –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
            } catch (altError1) {
                console.error(`‚ùå –°–ø–æ—Å–æ–± 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, altError1);
            }
        }, 100);
        
        // –°–ø–æ—Å–æ–± 2: dispatchEvent —Å MouseEvent
        setTimeout(() => {
            try {
                console.log(`üîÑ –°–ø–æ—Å–æ–± 2 - dispatchEvent –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
                const clickEvent = new MouseEvent('click', {
                    view: window,
                    bubbles: true,
                    cancelable: true
                });
                input.dispatchEvent(clickEvent);
                console.log(`‚úÖ dispatchEvent –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
            } catch (altError2) {
                console.error(`‚ùå –°–ø–æ—Å–æ–± 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, altError2);
            }
        }, 200);
        
        // –°–ø–æ—Å–æ–± 3: –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π label –∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –Ω–µ–º—É
        setTimeout(() => {
            try {
                console.log(`üîÑ –°–ø–æ—Å–æ–± 3 - —Å–æ–∑–¥–∞–µ–º label –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
                const tempLabel = document.createElement('label');
                tempLabel.htmlFor = input.id || `temp-input-${slotIndex}`;
                if (!input.id) input.id = `temp-input-${slotIndex}`;
                
                tempLabel.style.position = 'fixed';
                tempLabel.style.left = '50%';
                tempLabel.style.top = '50%';
                tempLabel.style.width = '100px';
                tempLabel.style.height = '50px';
                tempLabel.style.zIndex = '10000';
                tempLabel.style.backgroundColor = 'red';
                tempLabel.style.color = 'white';
                tempLabel.style.cursor = 'pointer';
                tempLabel.style.display = 'flex';
                tempLabel.style.alignItems = 'center';
                tempLabel.style.justifyContent = 'center';
                tempLabel.textContent = `–ó–∞–≥—Ä—É–∑–∏—Ç—å ${slotIndex}`;
                
                document.body.appendChild(tempLabel);
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(() => {
                    if (document.body.contains(tempLabel)) {
                        document.body.removeChild(tempLabel);
                        console.log(`‚è∞ –í—Ä–µ–º–µ–Ω–Ω—ã–π label —É–¥–∞–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
                    }
                }, 3000);
                
                console.log(`‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–π label —Å–æ–∑–¥–∞–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}. –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫—Ä–∞—Å–Ω–æ–π –∫–Ω–æ–ø–∫–µ.`);
                
            } catch (altError3) {
                console.error(`‚ùå –°–ø–æ—Å–æ–± 3 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, altError3);
            }
        }, 300);
    }

    function initCompareImageUpload() {
        console.log(`üöÄ initCompareImageUpload: –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–æ—Ç–æ–≤ - —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ!
        imageSlotsContainer = document.querySelector('#compare-analysis-mode .image-slots');
        
        if (!imageSlotsContainer) {
            console.error(`‚ùå initCompareImageUpload: imageSlotsContainer –ù–ï –ù–ê–ô–î–ï–ù!`);
            logger.warn("ImageUpload (Compare): –ü—Ä–æ–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ - imageSlotsContainer –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }
        
        const slots = imageSlotsContainer.querySelectorAll('.image-slot');
        if (!slots.length) {
            console.error(`‚ùå initCompareImageUpload: –°–ª–æ—Ç—ã (.image-slot) –ù–ï –ù–ê–ô–î–ï–ù–´!`);
            logger.warn("ImageUpload (Compare): –°–ª–æ—Ç—ã (.image-slot) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ.");
            return;
        }

        console.log(`‚úÖ initCompareImageUpload: –ù–∞–π–¥–µ–Ω–æ ${slots.length} —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);
        logger.debug(`ImageUpload (Compare): –ù–∞–π–¥–µ–Ω–æ ${slots.length} —Å–ª–æ—Ç–æ–≤ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏`);

        slots.forEach((slot, index) => {
            const slotIndex = parseInt(slot.dataset.slot, 10);
            const input = slot.querySelector('.compare-upload-input');
            
            console.log(`üé∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–æ—Ç–∞ ${index}, data-slot = ${slotIndex}, input –Ω–∞–π–¥–µ–Ω = ${!!input}`);
            
            if (!input) {
                console.error(`‚ùå –°–ª–æ—Ç ${slotIndex}: –∏–Ω–ø—É—Ç –ù–ï –ù–ê–ô–î–ï–ù!`);
                logger.warn(`ImageUpload (Compare): –ò–Ω–ø—É—Ç –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
                return;
            }

            console.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
            logger.debug(`ImageUpload (Compare): –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
            
            // –û—á–∏—â–∞–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—è —Å–ª–æ—Ç
            const newSlot = slot.cloneNode(true);
            slot.parentNode.replaceChild(newSlot, slot);
            
            // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞
            const newInput = newSlot.querySelector('.compare-upload-input');
            
            // –ù–û–í–´–ô –ü–û–î–•–û–î: –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∏–¥–∏–º—ã–π label, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –≤–µ—Å—å —Å–ª–æ—Ç
            const slotLabel = document.createElement('label');
            slotLabel.style.position = 'absolute';
            slotLabel.style.top = '0';
            slotLabel.style.left = '0';
            slotLabel.style.right = '0';
            slotLabel.style.bottom = '0';
            slotLabel.style.cursor = 'pointer';
            slotLabel.style.zIndex = '10';
            slotLabel.style.backgroundColor = 'transparent';
            
            // –°–≤—è–∑—ã–≤–∞–µ–º label —Å input
            if (!newInput.id) newInput.id = `compare-input-${slotIndex}`;
            slotLabel.htmlFor = newInput.id;
            
            // –î–µ–ª–∞–µ–º —Å–ª–æ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
            newSlot.style.position = 'relative';
            
            // –î–æ–±–∞–≤–ª—è–µ–º label –≤ —Å–ª–æ—Ç
            newSlot.appendChild(slotLabel);
            
            console.log(`üè∑Ô∏è –°–æ–∑–¥–∞–Ω label –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å input ${newInput.id}`);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ label –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
            slotLabel.addEventListener('click', function(e) {
                if (newSlot.classList.contains('filled')) {
                    e.preventDefault();
                    e.stopPropagation();
                    console.log(`‚ö†Ô∏è –°–ª–æ—Ç ${slotIndex} —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω, –∫–ª–∏–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω`);
                } else {
                    console.log(`üëÜ –ö–ª–∏–∫ –Ω–∞ label —Å–ª–æ—Ç–∞ ${slotIndex} - –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –Ω–∞ input`);
                    resetFileInput(newInput); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º input –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
                }
            });
            
            console.log(`‚úÖ Label –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}, –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–µ –∫–ª–∏–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã`);

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ change –¥–ª—è –∏–Ω–ø—É—Ç–∞ 
            newInput.addEventListener('change', (e) => {
                const file = e.target.files[0];
                console.log(`üìÅ CHANGE —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}, —Ñ–∞–π–ª:`, file ? file.name : '–Ω–µ—Ç');
                logger.debug(`ImageUpload (Compare): Change event –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}, —Ñ–∞–π–ª:`, file ? file.name : '–Ω–µ—Ç');
                
                if (file) {
                    console.log(`‚úÖ –§–∞–π–ª –≤—ã–±—Ä–∞–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}: ${file.name}`);
                    logger.debug(`ImageUpload (Compare): –§–∞–π–ª –≤—ã–±—Ä–∞–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}: ${file.name}`);
                    handleCompareImageSelection(file, slotIndex);
                } else {
                    console.log(`‚ùå –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
                    logger.debug(`ImageUpload (Compare): –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
                }
            });

            // Drag & Drop –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            newSlot.addEventListener('dragover', (e) => { 
                e.preventDefault(); 
                if (!newSlot.classList.contains('filled')) {
                    newSlot.classList.add('dragover');
                }
            });
            
            newSlot.addEventListener('dragleave', () => {
                newSlot.classList.remove('dragover');
            });
            
            newSlot.addEventListener('drop', (e) => {
                e.preventDefault();
                newSlot.classList.remove('dragover');
                if (!newSlot.classList.contains('filled') && e.dataTransfer.files.length) {
                    logger.debug(`ImageUpload (Compare): –§–∞–π–ª –ø–µ—Ä–µ—Ç–∞—â–µ–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}: ${e.dataTransfer.files[0].name}`);
                    handleCompareImageSelection(e.dataTransfer.files[0], slotIndex);
                }
            });
        });
        
        logger.debug("ImageUpload (Compare): –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");
    }
    
    function handleCompareImageSelection(file, slotIndex) {
        logger.debug(`ImageUpload (Compare): –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}: ${file.name}`);
        if (!isValidImageFile(file)) return;

        isUploadingActive = true;
        const reader = new FileReader();
        reader.onload = (e) => {
            // –ù–∞—Ö–æ–¥–∏–º —Å–ª–æ—Ç –ø–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É 
            const slot = document.querySelector(`#compare-analysis-mode .image-slot[data-slot="${slotIndex}"]`);
            if (!slot) {
                logger.error(`ImageUpload (Compare): –°–ª–æ—Ç ${slotIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM.`);
                isUploadingActive = false;
                return;
            }

            const previewImg = slot.querySelector('.preview-image');
            const uploadIconElement = slot.querySelector('.upload-icon');
            let removeBtn = slot.querySelector('.delete-image');

            if (previewImg) {
                previewImg.src = e.target.result;
                previewImg.style.display = 'block';
                logger.debug(`ImageUpload (Compare): –ü—Ä–µ–≤—å—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
            }
            
            if (uploadIconElement) {
                uploadIconElement.style.display = 'none';
                logger.debug(`ImageUpload (Compare): –ò–∫–æ–Ω–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∫—Ä—ã—Ç–∞ –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
            }

            // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if (!removeBtn) {
                removeBtn = document.createElement('button');
                removeBtn.className = 'delete-image';
                removeBtn.innerHTML = '√ó';
                removeBtn.title = '–£–¥–∞–ª–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
                slot.appendChild(removeBtn);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤–æ–π –∫–Ω–æ–ø–∫–∏
                removeBtn.addEventListener('click', function(ev) {
                    ev.stopPropagation();
                    logger.debug(`ImageUpload (Compare): –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}.`);
                    resetSlot(slotIndex);
                });
                
                logger.debug(`ImageUpload (Compare): –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}`);
            }

            slot.classList.add('filled');
            uploadedImages.compare[slotIndex] = file;
            
            const filledSlotsCount = document.querySelectorAll('#compare-analysis-mode .image-slot.filled').length;
            logger.debug(`ImageUpload (Compare): –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —Å–ª–æ—Ç–æ–≤: ${filledSlotsCount}`);
            
            if (filledSlotsCount >= 2) {
                const formContainer = document.getElementById('consultation-overlay');
                if(formContainer){
                    const occasionSel = formContainer.querySelector('.occasion-selector');
                    const labels = formContainer.querySelectorAll('.input-label');
                    const prefsInput = formContainer.querySelector('.preferences-input');
                    const submitBtn = formContainer.querySelector('#submit-consultation');
                    if (occasionSel) {
                        occasionSel.classList.remove('hidden');
                        occasionSel.disabled = false;
                    }
                    labels.forEach(l => l.classList.remove('hidden'));
                    if (prefsInput) {
                        prefsInput.classList.remove('hidden');
                        prefsInput.disabled = false;
                    }
                    if (submitBtn) {
                        submitBtn.disabled = false;
                        submitBtn.classList.remove('disabled');
                    }
                    logger.debug(`ImageUpload (Compare): –§–æ—Ä–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (‚â•2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)`);
                }
            }
            
            logger.info(`ImageUpload (Compare): –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${file.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ —Å–ª–æ—Ç ${slotIndex}.`);
            document.dispatchEvent(new CustomEvent('compareImageUploaded', { detail: { file: file, slot: slotIndex } }));
            
            // –û—á–∏—â–∞–µ–º input –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            const fileInput = slot.querySelector('input[type="file"]');
            if (fileInput) {
                fileInput.value = '';
            }
            
            isUploadingActive = false;
        };
        reader.onerror = (error) => {
            logger.error("ImageUpload (Compare): –û—à–∏–±–∫–∞ FileReader:", error);
            if (uiHelpers) uiHelpers.showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
            isUploadingActive = false;
        };
        reader.readAsDataURL(file);
    }
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ—Ç–∞
    function resetSlotHandler(event) {
        event.stopPropagation();
        const slotIndex = parseInt(event.currentTarget.dataset.slot, 10);
        if (!isNaN(slotIndex)) {
            logger.debug(`ImageUpload (Compare): –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è (—á–µ—Ä–µ–∑ resetSlotHandler) –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}.`);
            resetSlot(slotIndex);
        } else {
            logger.error("ImageUpload (Compare): –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å slotIndex –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è.");
        }
    }
        
    function isValidImageFile(file) { /* ... –∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ 0.4.6 ... */ 
        const validTypes = (config && config.appSettings && config.appSettings.supportedImageFormats) 
                           ? config.appSettings.supportedImageFormats.map(fmt => `image/${fmt.replace('jpg','jpeg')}`) 
                           : ['image/jpeg', 'image/png', 'image/webp'];
        const defaultMaxSize = 5 * 1024 * 1024; 
        const maxSize = (config && config.LIMITS && config.LIMITS.MAX_FILE_SIZE) ? config.LIMITS.MAX_FILE_SIZE : defaultMaxSize;
        
        if (!file || !file.type) { logger.warn("isValidImageFile: –§–∞–π–ª –∏–ª–∏ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã."); return false; }
        if (!validTypes.includes(file.type.toLowerCase())) {
            logger.warn(`isValidImageFile: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${file.type} –¥–ª—è '${file.name}'. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: ${validTypes.join(', ')}`);
            if (uiHelpers) uiHelpers.showToast(`–¢–∏–ø —Ñ–∞–π–ª–∞ '${file.name}' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ${ (config && config.appSettings && config.appSettings.supportedImageFormats) ? config.appSettings.supportedImageFormats.join(', ').toUpperCase() : 'JPG, PNG, WEBP'}.`);
            return false;
        }
        if (file.size > maxSize) {
            const fileSizeMB = (file.size / (1024*1024)).toFixed(1);
            const maxAllowedMB = (maxSize / (1024*1024)).toFixed(1);
            logger.warn(`isValidImageFile: –§–∞–π–ª '${file.name}' —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${fileSizeMB}MB (–º–∞–∫—Å: ${maxAllowedMB}MB)`);
            if (uiHelpers) uiHelpers.showToast(`–§–∞–π–ª '${file.name}' (${fileSizeMB}–ú–ë) —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å. ${maxAllowedMB}–ú–ë.`);
            return false;
        }
        return true;
    }
    
    function resetSingleImageUpload() {
        logger.debug('ImageUpload: –°–±—Ä–æ—Å –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (resetSingleImageUpload)...');
        resetFileInput(singleFileInput);
        if (singlePreviewContainer) {
            singlePreviewContainer.classList.add('hidden');
            singlePreviewContainer.style.display = 'none';
        }
        if (singlePreviewImage) {
            singlePreviewImage.src = '';
            singlePreviewImage.style.display = 'none';
        }
        if (singleUploadArea) {
            singleUploadArea.classList.remove('hidden');
            singleUploadArea.style.display = 'block';
        }
        uploadedImages.single = null;

        const formContainer = document.getElementById('consultation-overlay');
        if(formContainer){
            const occasionSel = formContainer.querySelector('.occasion-selector');
            const labels = formContainer.querySelectorAll('.input-label');
            const prefsInput = formContainer.querySelector('.preferences-input');
            const submitBtn = formContainer.querySelector('#submit-consultation');
            if (occasionSel) {
                occasionSel.classList.add('hidden');
                occasionSel.disabled = true;
            }
            labels.forEach(l => l.classList.add('hidden'));
            if (prefsInput) {
                prefsInput.classList.add('hidden');
                prefsInput.disabled = true;
            }
            if (submitBtn) {
                submitBtn.disabled = true;
                submitBtn.classList.add('disabled');
            }
        }
        document.dispatchEvent(new CustomEvent('singleImageRemoved'));
        logger.debug('ImageUpload: –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.');
    }
    
    function resetSlot(slotIndex) {
        logger.debug(`ImageUpload: –°–±—Ä–æ—Å —Å–ª–æ—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ${slotIndex}...`);
        const slot = document.querySelector(`#compare-analysis-mode .image-slot[data-slot="${slotIndex}"]`);
        if (!slot) return logger.error(`ImageUpload: –°–ª–æ—Ç ${slotIndex} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ DOM –¥–ª—è —Å–±—Ä–æ—Å–∞.`);
        
        const img = slot.querySelector('.preview-image');
        if (img) {
            img.src = '';
            img.style.display = 'none';
        }
        const removeBtn = slot.querySelector('.delete-image');
        if (removeBtn) removeBtn.remove();
        
        const uploadIconElement = slot.querySelector('.upload-icon');
        if (uploadIconElement) uploadIconElement.style.display = 'flex';
        
        slot.classList.remove('filled');
        const input = slot.querySelector('.compare-upload-input');
        resetFileInput(input);
        uploadedImages.compare[slotIndex] = null;
        
        const filledSlotsCount = document.querySelectorAll('#compare-analysis-mode .image-slot.filled').length;
        logger.debug(`ImageUpload: –ö–æ–ª-–≤–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Å–ª–æ—Ç–∞ ${slotIndex}: ${filledSlotsCount}`);
        if (filledSlotsCount < 2) { 
             const formContainer = document.getElementById('consultation-overlay');
             if(formContainer){
                const occasionSel = formContainer.querySelector('.occasion-selector');
                const labels = formContainer.querySelectorAll('.input-label');
                const prefsInput = formContainer.querySelector('.preferences-input');
                const submitBtn = formContainer.querySelector('#submit-consultation');
                if (occasionSel) occasionSel.classList.add('hidden');
                labels.forEach(l => l.classList.add('hidden'));
                if (prefsInput) prefsInput.classList.add('hidden');
                if (submitBtn) submitBtn.disabled = true; 
            }
        }
        document.dispatchEvent(new CustomEvent('compareImageRemoved', { detail: { slot: slotIndex } }));
        logger.debug(`ImageUpload: –°–ª–æ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ${slotIndex} —Å–±—Ä–æ—à–µ–Ω.`);
    }
    
    function resetCompareImageUploads() { /* ... –∫–∞–∫ –≤ –≤–µ—Ä—Å–∏–∏ 0.4.6 ... */ 
        logger.debug('ImageUpload: –°–±—Ä–æ—Å –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
        imageSlotsContainer = document.querySelector('#compare-analysis-mode .image-slots');
        if (imageSlotsContainer) {
            const slots = imageSlotsContainer.querySelectorAll('.image-slot');
            slots.forEach(slot => resetSlot(parseInt(slot.dataset.slot, 10)));
        }
        const formContainer = document.getElementById('consultation-overlay');
        if(formContainer){ /* ... —Å–∫—Ä—ã—Ç—å –ø–æ–ª—è, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É ... */ 
            const occasionSel = formContainer.querySelector('.occasion-selector');
            const labels = formContainer.querySelectorAll('.input-label');
            const prefsInput = formContainer.querySelector('.preferences-input');
            const submitBtn = formContainer.querySelector('#submit-consultation');
            if (occasionSel) occasionSel.classList.add('hidden');
            labels.forEach(l => l.classList.add('hidden'));
            if (prefsInput) prefsInput.classList.add('hidden');
            if (submitBtn) submitBtn.disabled = true;
        }
        document.dispatchEvent(new CustomEvent('allCompareImagesRemoved'));
        logger.debug('ImageUpload: –í—Å–µ —Å–ª–æ—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.');
    }
    
    function isUploading() { return isUploadingActive; }
    function getUploadedImages() { return uploadedImages; }
    
    return { 
        init, 
        resetSingleImageUpload, 
        resetCompareImageUploads, 
        resetSlot, // –û—Å—Ç–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        isUploading, 
        getUploadedImages,
        isInitialized: () => isImageUploadInitialized // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–ª–∞–≥
    };
})();