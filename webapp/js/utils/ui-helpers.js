/*
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: UI-—É—Ç–∏–ª–∏—Ç—ã (ui-helpers.js)
–í–ï–†–°–ò–Ø: 0.4.0 (–ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-05-20

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –§–ê–ô–õ–ê:
–°–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º,
—Ç–∞–∫–∏–µ –∫–∞–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞.
==========================================================================================
*/

// –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏–º–µ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
window.MishuraApp = window.MishuraApp || {};
window.MishuraApp.utils = window.MishuraApp.utils || {};
window.MishuraApp.utils.uiHelpers = (function() {
    'use strict';
    
    // –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏
    let config, logger;
    
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const DEFAULT_TOAST_DURATION = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
     * @param {string} message - —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     * @param {number} duration - –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞ –≤ –º—Å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3000)
     */
    function showToast(message, duration) {
        // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–º–µ—Å—Ç–æ config.LIMITS.TOAST_DURATION
        const toastDuration = duration || DEFAULT_TOAST_DURATION;
        const toastElement = document.getElementById('toast');
        
        if (toastElement) {
            toastElement.textContent = message;
            toastElement.classList.add('show');
            setTimeout(() => toastElement.classList.remove('show'), toastDuration);
        } else {
            if (logger) {
                logger.warn("–≠–ª–µ–º–µ–Ω—Ç #toast –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", message);
            } else {
                console.warn("–≠–ª–µ–º–µ–Ω—Ç #toast –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", message);
            }
            // –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ–±—ã—á–Ω—ã–π alert –≤ –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ
            if (message.includes('–æ—à–∏–±–∫–∞') || message.includes('–û—à–∏–±–∫–∞')) {
                alert(message);
            }
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {string} message - —Ç–µ–∫—Å—Ç, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –≤ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–µ
     */
    function showLoading(message = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
        if (logger) {
            logger.debug(`–ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${message}`);
        }
        
        const loadingText = document.getElementById('loading-text');
        if (loadingText) loadingText.textContent = message;
        
        const loadingOverlay = document.getElementById('loading-overlay');
        if (loadingOverlay) {
            loadingOverlay.classList.add('active');
            document.body.style.overflow = 'hidden'; // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ñ–æ–Ω–∞
        } else {
            if (logger) {
                logger.error("–≠–ª–µ–º–µ–Ω—Ç #loading-overlay –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            } else {
                console.error("–≠–ª–µ–º–µ–Ω—Ç #loading-overlay –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            }
        }
    }
    
    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     */
    function hideLoading() {
        if (logger) {
            logger.debug('–°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
        }
        
        const loadingOverlay = document.getElementById('loading-overlay');
        if (loadingOverlay) {
            loadingOverlay.classList.remove('active');
            document.body.style.overflow = ''; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Ñ–æ–Ω–∞
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤–Ω—É—Ç—Ä–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
     * @param {HTMLElement} element - —ç–ª–µ–º–µ–Ω—Ç, –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
     */
    function showLoadingIndicatorFor(element) {
        if (!element) return;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
        let indicator = element.querySelector('.upload-loading-indicator');
        if (!indicator) {
            indicator = document.createElement('div');
            indicator.className = 'upload-loading-indicator';
            indicator.innerHTML = '<div class="loading-spinner" style="width:25px;height:25px;"></div>';
            indicator.style.position = 'absolute';
            indicator.style.top = '50%';
            indicator.style.left = '50%';
            indicator.style.transform = 'translate(-50%, -50%)';
            indicator.style.backgroundColor = 'rgba(255, 255, 255, 0.8)';
            indicator.style.borderRadius = '50%';
            indicator.style.padding = '10px';
            indicator.style.zIndex = '5';
            
            element.appendChild(indicator);
            
            // –ü–æ–ª—É–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–∞
            element.style.position = 'relative';
            element.style.opacity = '0.7';
        }
    }
    
    /**
     * –°–∫—Ä—ã–≤–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
     * @param {HTMLElement} element - —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º
     */
    function hideLoadingIndicatorFor(element) {
        if (!element) return;
        
        const indicator = element.querySelector('.upload-loading-indicator');
        if (indicator) {
            element.removeChild(indicator);
        }
        element.style.opacity = '1';
    }
    
    /**
     * –ü–∞—Ä—Å–∏—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –≤ HTML
     * @param {string} markdown - —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown
     * @returns {string} - HTML-—Ä–∞–∑–º–µ—Ç–∫–∞
     */
    function parseMarkdownToHtml(markdown) {
        if (typeof markdown !== 'string' || !markdown.trim()) {
            return '<p>–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç –ú–∏—à—É—Ä–∞ –Ω–µ —Å–º–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.</p>';
        }
        
        let html = markdown;
        
        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ (### –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ ### -> <h4>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</h4>)
        html = html.replace(/^###\s*(.*?)\s*###\s*$/gm, '<h4>$1</h4>');
        html = html.replace(/^###\s*(.*?)\s*$/gm, '<div class="result-section-title">$1</div>');

        // –°–ø–∏—Å–∫–∏ (* –∏–ª–∏ - )
        html = html.replace(/^\s*[\*\-]\s+(.*)$/gm, '<li>$1</li>');
        
        // –û–±–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤ <li> –≤ <ul>
        let inList = false;
        const lines = html.split('\n');
        html = lines.map(line => {
            const trimmedLine = line.trim();
            if (trimmedLine.startsWith('<li>')) {
                if (!inList) {
                    inList = true;
                    return '<ul>' + line;
                }
                return line;
            } else if (trimmedLine.startsWith('üí°')) { // –î–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫
                 if (inList) {
                    inList = false;
                    return '</ul><p class="ai-tip">' + line + '</p>';
                }
                return '<p class="ai-tip">' + line + '</p>';
            }
            else { // –ù–µ —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
                if (inList) { // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º –±—ã–ª —Å–ø–∏—Å–æ–∫, –∑–∞–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                    inList = false;
                    // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–µ –≤ <p>
                    return trimmedLine === '' ? '</ul>' : '</ul><p>' + line + '</p>';
                }
                // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –ø—É—Å—Ç–∞—è –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É–∂–µ HTML —Ç–µ–≥–æ–º, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ <p>
                return (trimmedLine !== '' && !trimmedLine.match(/^<(\w+)\b[^>]*>/)) ? '<p>' + line + '</p>' : line;
            }
        }).join('\n');

        if (inList) { // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
            html += '</ul>';
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–∏–Ω
        html = html.replace(/\n\n+/g, '\n');
        // –ó–∞–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ \n –Ω–∞ <br> –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
        html = html.replace(/\n/g, '<br>');
        // –£–±–∏—Ä–∞–µ–º <br> –≤–Ω—É—Ç—Ä–∏ <li> –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –ª–∏—à–Ω–∏–π
        html = html.replace(/<li><br\s*\/?>/gi, '<li>');
        // –£–±–∏—Ä–∞–µ–º <br> –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–º </li>
        html = html.replace(/<br\s*\/?>\s*<\/li>/gi, '</li>');
        // –£–±–∏—Ä–∞–µ–º <p><br></p> –∏–ª–∏ <p></p>
        html = html.replace(/<p>(<br\s*\/?>|\s*)<\/p>/gi, '');

        return html;
    }
    
    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è
     */
    function init() {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –¥—Ä—É–≥–∏–µ –º–æ–¥—É–ª–∏
        config = window.MishuraApp.config;
        logger = window.MishuraApp.utils.logger;
        
        if (logger) {
            logger.debug('UI-—Ö–µ–ª–ø–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        } else {
            console.debug('UI-—Ö–µ–ª–ø–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
        }
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–π API –º–æ–¥—É–ª—è
    return {
        init,
        showToast,
        showLoading,
        hideLoading,
        showLoadingIndicatorFor,
        hideLoadingIndicatorFor,
        parseMarkdownToHtml
    };
})();