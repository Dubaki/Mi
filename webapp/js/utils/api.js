window.MishuraApp = window.MishuraApp || {};
window.MishuraApp.utils = window.MishuraApp.utils || {};

window.MishuraApp.utils.api = (function() {
    'use strict';
    
    let logger;
    const API_BASE_URL = '/api';
    
    function init() {
        logger = window.MishuraApp.utils.logger;
        logger.debug('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –º–æ–¥—É–ª—è');
    }
    
    async function sendRequest(endpoint, method = 'GET', data = null) {
        try {
            const options = {
                method,
                headers: {
                    'Content-Type': 'application/json'
                }
            };
            
            if (data) {
                options.body = JSON.stringify(data);
            }
            
            const response = await fetch(`${API_BASE_URL}${endpoint}`, options);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return await response.json();
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
            throw error;
        }
    }
    
    async function analyzeImage(imageData, mode = 'single', occasion = null, preferences = null) {
        try {
            console.log('üöÄ API: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑', {
                image: imageData.name,
                mode,
                occasion, 
                preferences,
                endpoint: `${API_BASE_URL}/analyze`
            });
            
            // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –æ—Ç–≤–µ—Ç
            console.log('‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –¥–µ–º–æ-–æ—Ç–≤–µ—Ç...');
            
            return new Promise((resolve) => {
                setTimeout(() => {
                    const mockResponse = {
                        status: 'success',
                        advice: `# üé® –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞\n\n**–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:** ${imageData.name}\n**–ü–æ–≤–æ–¥:** ${occasion || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n## üìã –û—Ü–µ–Ω–∫–∞ —Å—Ç–∏–ª—è:\n\n‚úÖ **–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞:** –ì–∞—Ä–º–æ–Ω–∏—á–Ω–∞—è –∏ –ø–æ–¥—Ö–æ–¥—è—â–∞—è\n‚úÖ **–ö—Ä–æ–π:** –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —Å—Ç–∏–ª—å–Ω—ã–π\n‚úÖ **–°–æ—á–µ—Ç–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤:** –£–¥–∞—á–Ω–æ–µ\n\n## üéØ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:\n- ${occasion || '–†–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–≤–æ–≤–æ–¥–æ–≤'}\n- –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏\n- –î–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á\n\n## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n1. **–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã:** –î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è\n2. **–û–±—É–≤—å:** –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç—É—Ñ–ª–∏ –∏–ª–∏ —Å—Ç–∏–ª—å–Ω—ã–µ –∫—Ä–æ—Å—Å–æ–≤–∫–∏\n3. **–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è:** ${preferences ? `–£—á–∏—Ç—ã–≤–∞—è –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è "${preferences}", —Ä–µ–∫–æ–º–µ–Ω–¥—É—é...` : '–ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –ª–µ–≥–∫–∏–º –∂–∞–∫–µ—Ç–æ–º'}\n\n---\n*–≠—Ç–æ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ò–ò-—Å–µ—Ä–≤–∏—Å—É.*`
                    };
                    resolve(mockResponse);
                }, 1500); // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
            });
            
            // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å:
            /*
            const formData = new FormData();
            formData.append('image', imageData);
            formData.append('mode', mode);
            
            if (occasion) {
                formData.append('occasion', occasion);
            }
            
            if (preferences) {
                formData.append('preferences', preferences);
            }
            
            const response = await fetch(`${API_BASE_URL}/analyze`, {
                method: 'POST',
                body: formData
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return await response.json();
            */
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            throw error;
        }
    }
    
    async function compareImages(images, occasion = null, preferences = null) {
        try {
            console.log('üöÄ API: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ', {
                images: images.map(img => img ? img.name : null),
                occasion, 
                preferences,
                endpoint: `${API_BASE_URL}/compare`
            });
            
            const formData = new FormData();
            
            images.forEach((image, index) => {
                formData.append(`image${index + 1}`, image);
                console.log(`üìé –î–æ–±–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}: ${image.name}`);
            });
            
            if (occasion) {
                formData.append('occasion', occasion);
                console.log(`üéØ –ü–æ–≤–æ–¥: ${occasion}`);
            }
            
            if (preferences) {
                formData.append('preferences', preferences);
                console.log(`üí≠ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${preferences}`);
            }

            // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –æ—Ç–≤–µ—Ç
            console.log('‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é –¥–µ–º–æ-–æ—Ç–≤–µ—Ç...');
            
            return new Promise((resolve) => {
                setTimeout(() => {
                    const mockResponse = {
                        status: 'success',
                        advice: `# üé® –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤\n\n**–ü–æ–≤–æ–¥:** ${occasion || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n## üì∏ –ê–Ω–∞–ª–∏–∑ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n\n${images.map((img, i) => `**–û–±—Ä–∞–∑ ${i+1}:** ${img.name}\n- –°—Ç–∏–ª—å: –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π\n- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: ${occasion || '—Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤'}\n`).join('\n')}\n\n## üèÜ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n1. **–õ—É—á—à–∏–π –≤—ã–±–æ—Ä:** –û–±—Ä–∞–∑ 1 –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è ${occasion || '–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–≤–æ–¥–∞'}\n2. **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:** –û–±—Ä–∞–∑ 2 –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç\n3. **–°—Ç–∏–ª–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤\n\n---\n*–≠—Ç–æ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ò–ò-—Å–µ—Ä–≤–∏—Å—É.*`
                    };
                    resolve(mockResponse);
                }, 2000); // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
            });
            
            // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å:
            /*
            const response = await fetch(`${API_BASE_URL}/compare`, {
                method: 'POST',
                body: formData
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return await response.json();
            */
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
            throw error;
        }
    }
    
    async function processCompareOutfits(formData) {
        try {
            const response = await fetch(`${API_BASE_URL}/compare`, {
                method: 'POST',
                body: formData
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            return await response.json();
        } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞–∑–æ–≤:', error);
            throw error;
        }
    }
    
    return {
        init,
        sendRequest,
        analyzeImage,
        compareImages,
        processCompareOutfits
    };
})(); 