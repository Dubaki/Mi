/*
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: API Service - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Gemini AI (api.js)
–í–ï–†–°–ò–Ø: 1.0.8 (–ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø)
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-05-29

–§–£–ù–ö–¶–ò–ò: –ü—Ä—è–º–∞—è —Ä–∞–±–æ—Ç–∞ —Å Gemini API —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥ –Ω–∞ –ø–æ—Ä—Ç—É 8001
==========================================================================================
*/

window.MishuraApp = window.MishuraApp || {};
window.MishuraApp.services = window.MishuraApp.services || {};

window.MishuraApp.services.api = (function() {
    'use strict';
    
    let logger;
    let isInitialized = false;
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
    const CONFIG = {
        possibleUrls: [
            'http://localhost:8001/api/v1',  // –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å
            'http://localhost:8000/api/v1',  // –†–µ–∑–µ—Ä–≤–Ω—ã–π
            'https://style-ai-bot.onrender.com/api/v1'  // –ü—Ä–æ–¥–∞–∫—à–Ω
        ],
        baseUrl: null, // –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        timeout: 30000,
        retries: 3
    };
    
    // Endpoints
    const ENDPOINTS = {
        health: '/health',
        singleAnalysis: '/analyze/single',
        compareAnalysis: '/analyze/compare',
        geminiDirect: '/gemini/analyze'
    };
    
    // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ API URL
    async function detectWorkingApiUrl() {
        logger.debug('üîç –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ API –∞–¥—Ä–µ—Å–∞...');
        
        for (const url of CONFIG.possibleUrls) {
            try {
                logger.debug(`‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ ${url}...`);
                
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 5000);
                
                const response = await fetch(`${url}/health`, {
                    method: 'GET',
                    headers: { 'Content-Type': 'application/json' },
                    signal: controller.signal
                });
                
                clearTimeout(timeoutId);
                
                if (response.ok) {
                    const data = await response.json();
                    CONFIG.baseUrl = url;
                    logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π API: ${url}`);
                    return { url, data };
                }
            } catch (error) {
                logger.debug(`‚ùå ${url} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
            }
        }
        
        throw new Error('–í—Å–µ API –∞–¥—Ä–µ—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }
    
    async function init() {
        if (isInitialized) {
            return;
        }
        
        logger = window.MishuraApp.utils?.logger || createFallbackLogger();
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Service v1.0.9 (Auto-detect)");
        
        try {
            // –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–±–æ—á–∏–π API URL
            const apiInfo = await detectWorkingApiUrl();
            
            logger.info(`‚úÖ API Service –ø–æ–¥–∫–ª—é—á–µ–Ω –∫: ${CONFIG.baseUrl}`);
            logger.debug("API Info:", apiInfo.data);
            
            isInitialized = true;
            
            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—ä–µ–∫—Ç–µ
            window.MishuraApp.api = {
                analyzeImage,
                compareImages,
                isHealthy: () => checkBackendConnection(),
                isInitialized: () => isInitialized,
                getApiUrl: () => CONFIG.baseUrl
            };
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            document.dispatchEvent(new CustomEvent('apiServiceReady', {
                detail: { apiUrl: CONFIG.baseUrl, apiInfo: apiInfo.data }
            }));
            
        } catch (error) {
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π API:", error);
            logger.warn("üé≠ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏...");
            setupMockMode();
        }
    }
    
    function createFallbackLogger() {
        return {
            debug: (...args) => console.debug("API:", ...args),
            info: (...args) => console.info("API:", ...args),
            warn: (...args) => console.warn("API:", ...args),
            error: (...args) => console.error("API:", ...args)
        };
    }
    
    async function checkBackendConnection() {
        if (!CONFIG.baseUrl) {
            throw new Error('API URL –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω');
        }
        
        try {
            logger.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API...");
            
            const response = await fetchWithTimeout(`${CONFIG.baseUrl}/health`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' }
            });
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const data = await response.json();
            logger.debug("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω:", data);
            
            return data;
        } catch (error) {
            logger.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", error);
            throw error;
        }
    }
    
    async function fetchWithTimeout(url, options = {}, timeout = CONFIG.timeout) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), timeout);
        
        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });
            clearTimeout(timeoutId);
            return response;
        } catch (error) {
            clearTimeout(timeoutId);
            if (error.name === 'AbortError') {
                throw new Error('Timeout: –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏');
            }
            throw error;
        }
    }
    
    async function analyzeImage(imageFile, options = {}) {
        logger.info("üì∏ –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è");
        logger.debug("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:", { 
            fileName: imageFile.name, 
            fileSize: imageFile.size,
            options 
        });
        
        try {
            // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞
            const formData = new FormData();
            formData.append('image', imageFile);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const metadata = {
                occasion: options.occasion || '',
                preferences: options.preferences || '',
                analysis_type: 'single',
                timestamp: new Date().toISOString()
            };
            
            formData.append('metadata', JSON.stringify(metadata));
            
            logger.debug("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑...");
            
            const response = await fetchWithTimeout(`${CONFIG.baseUrl}${ENDPOINTS.singleAnalysis}`, {
                method: 'POST',
                body: formData
                // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData!
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${response.status} - ${errorText}`);
            }
            
            const result = await response.json();
            logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ");
            logger.debug("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result);
            
            return result;
            
        } catch (error) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", error);
            
            // –ï—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
            if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
                logger.warn("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏");
                return getMockSingleAnalysis(imageFile, options);
            }
            
            throw error;
        }
    }
    
    async function compareImages(imageFiles, options = {}) {
        logger.info("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π");
        logger.debug("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:", { 
            imageCount: imageFiles.length,
            options 
        });
        
        try {
            // –°–æ–∑–¥–∞–µ–º FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤
            const formData = new FormData();
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            imageFiles.forEach((file, index) => {
                formData.append(`image_${index}`, file);
            });
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            const metadata = {
                occasion: options.occasion || '',
                preferences: options.preferences || '',
                analysis_type: 'compare',
                image_count: imageFiles.length,
                timestamp: new Date().toISOString()
            };
            
            formData.append('metadata', JSON.stringify(metadata));
            
            logger.debug("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ...");
            
            const response = await fetchWithTimeout(`${CONFIG.baseUrl}${ENDPOINTS.compareAnalysis}`, {
                method: 'POST',
                body: formData
            });
            
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${response.status} - ${errorText}`);
            }
            
            const result = await response.json();
            logger.info("‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ");
            logger.debug("–†–µ–∑—É–ª—å—Ç–∞—Ç:", result);
            
            return result;
            
        } catch (error) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", error);
            
            // –ï—Å–ª–∏ –±—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º mock –¥–∞–Ω–Ω—ã–µ
            if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
                logger.warn("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏");
                return getMockCompareAnalysis(imageFiles, options);
            }
            
            throw error;
        }
    }
    
    // Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∫–æ–≥–¥–∞ –±—ç–∫–µ–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
    function setupMockMode() {
        logger.warn("üé≠ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (Mock API)");
        
        window.MishuraApp.api = {
            analyzeImage: (imageFile, options) => {
                return new Promise(resolve => {
                    setTimeout(() => {
                        resolve(getMockSingleAnalysis(imageFile, options));
                    }, 2000); // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
                });
            },
            compareImages: (imageFiles, options) => {
                return new Promise(resolve => {
                    setTimeout(() => {
                        resolve(getMockCompareAnalysis(imageFiles, options));
                    }, 3000); // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É API
                });
            },
            isHealthy: () => Promise.resolve({ status: 'mock', mode: 'demonstration' }),
            isInitialized: () => true
        };
        
        isInitialized = true;
        document.dispatchEvent(new CustomEvent('apiServiceReady'));
    }
    
    function getMockSingleAnalysis(imageFile, options) {
        const occasionText = options.occasion ? ` –¥–ª—è —Å–ª—É—á–∞—è "${options.occasion}"` : '';
        
        return {
            success: true,
            analysis_type: 'single',
            image_name: imageFile.name,
            style_analysis: `–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞${occasionText}: –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—Ç–∏–ª—å–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∏–ø–∞ —Ñ–∏–≥—É—Ä—ã. –¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ.`,
            
            recommendations: `–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —è—Ä–∫–∏–π –∞–∫—Å–µ—Å—Å—É–∞—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–∫—Ü–µ–Ω—Ç–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—É–≤—å –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –∫–∞–±–ª—É–∫–µ –¥–ª—è –±–æ–ª–µ–µ —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ–≥–æ —Å–∏–ª—É—ç—Ç–∞.`,
            
            rating: `–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: 8.5/10. –û—Ç–ª–∏—á–Ω—ã–π –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π. –í—ã –≤—ã–≥–ª—è–¥–∏—Ç–µ —Å—Ç–∏–ª—å–Ω–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ!`,
            
            color_analysis: "–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –≤–∞—à–µ–º—É —Ü–≤–µ—Ç–æ—Ç–∏–ø—É –∏ —Å–æ–∑–¥–∞–µ—Ç –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π –æ–±—Ä–∞–∑.",
            
            style_tips: [
                "–î–æ–±–∞–≤—å—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –∞–∫—Å–µ—Å—Å—É–∞—Ä",
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –æ–±—É–≤—å", 
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–≥–∫–∞ –¥—Ä—É–≥–æ–π —Å–∏–ª—É—ç—Ç"
            ],
            
            timestamp: new Date().toISOString(),
            mode: 'demonstration'
        };
    }
    
    function getMockCompareAnalysis(imageFiles, options) {
        const occasionText = options.occasion ? ` –¥–ª—è —Å–ª—É—á–∞—è "${options.occasion}"` : '';
        
        return {
            success: true,
            analysis_type: 'compare',
            image_count: imageFiles.length,
            
            best_outfit: `–õ—É—á—à–∏–π –æ–±—Ä–∞–∑${occasionText}: –û–±—Ä–∞–∑ ‚Ññ2 (${imageFiles[1]?.name || '–≤—Ç–æ—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'}) –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç –±–ª–∞–≥–æ–¥–∞—Ä—è –±–æ–ª–µ–µ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–º—É —Å–æ—á–µ—Ç–∞–Ω–∏—é —Ü–≤–µ—Ç–æ–≤ –∏ –ª—É—á—à–µ–π –ø–æ—Å–∞–¥–∫–µ –ø–æ —Ñ–∏–≥—É—Ä–µ.`,
            
            comparison: `–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:
            
            ü•á –û–±—Ä–∞–∑ ‚Ññ1: –•–æ—Ä–æ—à–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏, –Ω–æ —Ü–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –º–æ–≥–ª–∞ –±—ã –±—ã—Ç—å –±–æ–ª–µ–µ —è—Ä–∫–æ–π. –û—Ü–µ–Ω–∫–∞: 7.5/10
            
            üèÜ –û–±—Ä–∞–∑ ‚Ññ2: –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤, –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞, —Å—Ç–∏–ª—å–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã. –û—Ü–µ–Ω–∫–∞: 9/10
            
            ${imageFiles[2] ? 'ü•â –û–±—Ä–∞–∑ ‚Ññ3: –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤—ã–±–æ—Ä, –Ω–æ —Å—Ç–∏–ª—å –Ω–µ–º–Ω–æ–≥–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å–ª—É—á–∞—é. –û—Ü–µ–Ω–∫–∞: 7/10' : ''}`,
            
            improvement_tips: `–°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:
            ‚Ä¢ –î–ª—è –æ–±—Ä–∞–∑–∞ ‚Ññ1: –¥–æ–±–∞–≤—å—Ç–µ —è—Ä–∫–∏–π –∞–∫—Å–µ—Å—Å—É–∞—Ä –∏–ª–∏ —à–∞—Ä—Ñ
            ‚Ä¢ –î–ª—è –æ–±—Ä–∞–∑–∞ ‚Ññ2: —É–∂–µ –æ—Ç–ª–∏—á–Ω–æ, –≤–æ–∑–º–æ–∂–Ω–æ –¥—Ä—É–≥–∞—è –æ–±—É–≤—å
            ${imageFiles[2] ? '‚Ä¢ –î–ª—è –æ–±—Ä–∞–∑–∞ ‚Ññ3: —Å–º–µ–Ω–∏—Ç–µ –≤–µ—Ä—Ö –Ω–∞ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫ —Å–ª—É—á–∞—é' : ''}`,
            
            winner_index: 1,
            scores: imageFiles.map((_, i) => ({ 
                image_index: i, 
                score: i === 1 ? 9.0 : (7.5 - Math.random() * 0.5)
            })),
            
            timestamp: new Date().toISOString(),
            mode: 'demonstration'
        };
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–π API
    return {
        init,
        analyzeImage,
        compareImages,
        checkBackendConnection,
        isInitialized: () => isInitialized,
        
        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        CONFIG,
        ENDPOINTS
    };
})();

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.MishuraApp.services.api.init();
    });
} else {
    window.MishuraApp.services.api.init();
}