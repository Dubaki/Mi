/**
 * ==========================================================================================
 * –ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
 * –ö–û–ú–ü–û–ù–ï–ù–¢: API –∫–ª–∏–µ–Ω—Ç (api.js)
 * –í–ï–†–°–ò–Ø: 2.1.0 (–ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò)
 * –î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-05-31
 * 
 * –ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –†–ê–ë–û–¢–´ –ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–û–î–ê:
 * 1. –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: –õ—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Ü–µ–ª–∏–∫–æ–º.
 * 2. –Ø–∑—ã–∫ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤–µ–¥—É—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
 * 3. –°—Ç–∞–Ω–¥–∞—Ä—Ç –ö–∞—á–µ—Å—Ç–≤–∞: –î–∞–Ω–Ω—ã–π –∫–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –ø—Ä–æ–µ–∫—Ç–∞ "–ú–ò–®–£–†–ê", —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
 *    —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –≤—ã—Å–æ—á–∞–π—à–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏–∑–∞–π–Ω–∞.
 * 
 * –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –§–ê–ô–õ–ê:
 * –ö–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Backend API. –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–≤–µ—Ç–æ–≤ –æ—Ç –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç–∞.
 * 
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í –í–ï–†–°–ò–ò 2.1.0:
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —Ç–∞–π–º–∞—É—Ç–æ–≤
 * - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å backend
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ retry –¥–ª—è –Ω–µ—É—Å—Ç–æ–π—á–∏–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * - –£–ª—É—á—à–µ–Ω–∞ –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 * - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ legacy API –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * ==========================================================================================
 */

class MishuraAPI {
    constructor() {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL API
        this.baseURL = this.getBaseURL();
        this.logger = new Logger('MishuraAPI');
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        this.requestTimeout = 60000; // 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        this.retryAttempts = 3;
        this.retryDelay = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        
        this.logger.info(`üöÄ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–∑–æ–≤—ã–º URL: ${this.baseURL}`);
        this.logger.debug(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏: timeout=${this.requestTimeout}ms, retry=${this.retryAttempts}`);
    }

    getBaseURL() {
        const hostname = window.location.hostname;
        const origin = window.location.origin;
        
        this.logger.debug(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ URL –¥–ª—è hostname: ${hostname}`);
        
        // –î–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω–∞ (Render)
        if (hostname.includes('onrender.com')) {
            this.logger.debug('–†–µ–∂–∏–º: –ü—Ä–æ–¥–∞–∫—à–Ω (Render)');
            return `${origin}/api/v1`;
        }
        
        // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        if (hostname === 'localhost' || hostname === '127.0.0.1') {
            this.logger.debug('–†–µ–∂–∏–º: –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞');
            return `${origin}/api/v1`;
        }
        
        // –î–ª—è GitHub Pages –∏–ª–∏ –¥—Ä—É–≥–∏—Ö —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤
        if (hostname.includes('github.io')) {
            this.logger.debug('–†–µ–∂–∏–º: GitHub Pages');
            return `${origin}/api/v1`;
        }
        
        // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏–π
        this.logger.debug('–†–µ–∂–∏–º: Fallback');
        return '/api/v1';
    }

    async analyzeSingle(imageFile, occasion, preferences = '') {
        this.logger.info('üîç –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞');
        this.logger.debug(`–§–∞–π–ª: ${imageFile.name}, —Ä–∞–∑–º–µ—Ä: ${this.formatFileSize(imageFile.size)}`);
        this.logger.debug(`–ü–æ–≤–æ–¥: "${occasion}", –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: "${preferences.substring(0, 50)}..."`);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!imageFile || !(imageFile instanceof File)) {
            throw new Error('–ù–µ –≤—ã–±—Ä–∞–Ω —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
        
        if (!occasion || occasion.trim().length === 0) {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
        }
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData
        const formData = new FormData();
        formData.append('image', imageFile);
        formData.append('occasion', occasion.trim());
        formData.append('preferences', preferences.trim());
        formData.append('metadata', JSON.stringify({
            timestamp: new Date().toISOString(),
            mode: 'single',
            filename: imageFile.name,
            filesize: imageFile.size,
            filetype: imageFile.type
        }));

        try {
            // –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç
            let response;
            try {
                response = await this.makeRequestWithRetry('/analyze/single', {
                    method: 'POST',
                    body: formData
                });
            } catch (newApiError) {
                this.logger.warn('–ù–æ–≤—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º legacy —ç–Ω–¥–ø–æ–∏–Ω—Ç:', newApiError.message);
                
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API
                response = await this.makeRequestWithRetry('/analyze', {
                    method: 'POST',
                    body: formData
                });
            }

            this.logger.info('‚úÖ –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
            this.logger.debug('–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.status);
            
            return response;
            
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞:', error);
            throw this.enhanceError(error, '–∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞');
        }
    }

    async analyzeCompare(imageFiles, occasion, preferences = '') {
        this.logger.info(`üîÑ –ó–∞–ø—Ä–æ—Å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è ${imageFiles.length} –æ–±—Ä–∞–∑–æ–≤`);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!Array.isArray(imageFiles) || imageFiles.length < 2) {
            throw new Error('–î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        }
        
        if (imageFiles.length > 4) {
            throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: 4');
        }
        
        if (!occasion || occasion.trim().length === 0) {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
        }
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        imageFiles.forEach((file, index) => {
            this.logger.debug(`–§–∞–π–ª ${index + 1}: ${file.name}, —Ä–∞–∑–º–µ—Ä: ${this.formatFileSize(file.size)}`);
        });
        
        this.logger.debug(`–ü–æ–≤–æ–¥: "${occasion}", –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: "${preferences.substring(0, 50)}..."`);
        
        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ FormData
        const formData = new FormData();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª–µ–π
        imageFiles.forEach((file, index) => {
            if (!(file instanceof File)) {
                throw new Error(`–≠–ª–µ–º–µ–Ω—Ç ${index + 1} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º`);
            }
            formData.append(`image_${index}`, file);
        });
        
        formData.append('occasion', occasion.trim());
        formData.append('preferences', preferences.trim());
        formData.append('metadata', JSON.stringify({
            timestamp: new Date().toISOString(),
            mode: 'compare',
            imageCount: imageFiles.length,
            files: imageFiles.map((file, index) => ({
                index,
                name: file.name,
                size: file.size,
                type: file.type
            }))
        }));

        try {
            // –ü—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π API —ç–Ω–¥–ø–æ–∏–Ω—Ç
            let response;
            try {
                response = await this.makeRequestWithRetry('/analyze/compare', {
                    method: 'POST',
                    body: formData
                });
            } catch (newApiError) {
                this.logger.warn('–ù–æ–≤—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º legacy —ç–Ω–¥–ø–æ–∏–Ω—Ç:', newApiError.message);
                
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π API
                response = await this.makeRequestWithRetry('/compare', {
                    method: 'POST',
                    body: formData
                });
            }

            this.logger.info('‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ');
            this.logger.debug('–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', response.status);
            
            return response;
            
        } catch (error) {
            this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤:', error);
            throw this.enhanceError(error, '—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤');
        }
    }

    async checkHealth() {
        this.logger.debug('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API');
        
        try {
            const response = await this.makeRequestWithRetry('/health', {
                method: 'GET'
            }, 1); // –¢–æ–ª—å–∫–æ 1 –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è health check

            this.logger.info('‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ');
            return response;
            
        } catch (error) {
            this.logger.error('‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
            throw error;
        }
    }

    async makeRequestWithRetry(endpoint, options = {}, customRetryAttempts = null) {
        const attempts = customRetryAttempts !== null ? customRetryAttempts : this.retryAttempts;
        let lastError;

        for (let attempt = 1; attempt <= attempts; attempt++) {
            try {
                this.logger.debug(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${attempts} –¥–ª—è ${endpoint}`);
                return await this.makeRequest(endpoint, options);
                
            } catch (error) {
                lastError = error;
                
                if (attempt < attempts) {
                    const delay = this.retryDelay * attempt; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    this.logger.warn(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞: ${error.message}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ ${delay}ms`);
                    await this.sleep(delay);
                } else {
                    this.logger.error(`–í—Å–µ ${attempts} –ø–æ–ø—ã—Ç–æ–∫ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –¥–ª—è ${endpoint}`);
                }
            }
        }

        throw lastError;
    }

    async makeRequest(endpoint, options = {}) {
        const url = `${this.baseURL}${endpoint}`;
        
        this.logger.debug(`üì° ${options.method || 'GET'} ${url}`);
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultOptions = {
            method: 'GET',
            headers: {},
            signal: AbortSignal.timeout(this.requestTimeout) // –¢–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        };

        // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è FormData - –±—Ä–∞—É–∑–µ—Ä —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        if (!(options.body instanceof FormData)) {
            defaultOptions.headers['Content-Type'] = 'application/json';
        }

        const requestOptions = {
            ...defaultOptions,
            ...options,
            headers: {
                ...defaultOptions.headers,
                ...options.headers
            }
        };

        try {
            this.logger.debug('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
            const startTime = Date.now();
            
            const response = await fetch(url, requestOptions);
            
            const duration = Date.now() - startTime;
            this.logger.debug(`üì• –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${response.status} ${response.statusText} (${duration}ms)`);
            
            if (!response.ok) {
                let errorMessage = `HTTP ${response.status}: ${response.statusText}`;
                let errorDetails = null;
                
                try {
                    const contentType = response.headers.get('content-type');
                    if (contentType && contentType.includes('application/json')) {
                        const errorData = await response.json();
                        if (errorData.message) {
                            errorMessage = errorData.message;
                        }
                        if (errorData.details) {
                            errorDetails = errorData.details;
                        }
                    } else {
                        const errorText = await response.text();
                        if (errorText) {
                            errorMessage = errorText;
                        }
                    }
                } catch (parseError) {
                    this.logger.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—à–∏–±–∫—É –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', parseError);
                }
                
                const error = new Error(errorMessage);
                error.status = response.status;
                error.details = errorDetails;
                throw error;
            }

            const contentType = response.headers.get('content-type');
            if (contentType && contentType.includes('application/json')) {
                const data = await response.json();
                this.logger.debug('‚úÖ JSON –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
                return data;
            } else {
                const text = await response.text();
                this.logger.debug('‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω');
                return { message: text, status: 'success' };
            }

        } catch (error) {
            // –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
            if (error.name === 'AbortError' || error.name === 'TimeoutError') {
                throw new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (${this.requestTimeout/1000}—Å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.`);
            } else if (error.name === 'TypeError' && error.message.includes('Failed to fetch')) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            } else if (error.status) {
                // –û—à–∏–±–∫–∞ HTTP —Å –∫–æ–¥–æ–º —Å—Ç–∞—Ç—É—Å–∞
                throw error;
            } else {
                // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${error.message}`);
            }
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    enhanceError(error, context) {
        let enhancedMessage = error.message;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –æ–± –æ—à–∏–±–∫–µ
        if (!enhancedMessage.includes(context)) {
            enhancedMessage = `–û—à–∏–±–∫–∞ –ø—Ä–∏ ${context}: ${enhancedMessage}`;
        }
        
        // –£–ª—É—á—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (error.status === 413) {
            enhancedMessage = '–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–¥–æ 10MB).';
        } else if (error.status === 415) {
            enhancedMessage = '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG, PNG –∏–ª–∏ WebP.';
        } else if (error.status === 429) {
            enhancedMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        } else if (error.status === 500) {
            enhancedMessage = '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
        } else if (error.status === 503) {
            enhancedMessage = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.';
        }
        
        const enhancedError = new Error(enhancedMessage);
        enhancedError.status = error.status;
        enhancedError.originalError = error;
        
        return enhancedError;
    }

    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    async testConnection() {
        this.logger.info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API');
        
        try {
            const health = await this.checkHealth();
            this.logger.info('üü¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', health);
            return true;
        } catch (error) {
            this.logger.error('üî¥ –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API:', error);
            return false;
        }
    }

    getEndpointInfo() {
        return {
            baseURL: this.baseURL,
            settings: {
                timeout: this.requestTimeout,
                retryAttempts: this.retryAttempts,
                retryDelay: this.retryDelay
            },
            endpoints: {
                health: `${this.baseURL}/health`,
                analyzeSingle: `${this.baseURL}/analyze/single`,
                analyzeCompare: `${this.baseURL}/analyze/compare`,
                // Legacy endpoints –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                legacyAnalyze: `${this.baseURL}/../analyze`,
                legacyCompare: `${this.baseURL}/../compare`
            }
        };
    }

    async testSingleAnalysis() {
        this.logger.info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const canvas = document.createElement('canvas');
        canvas.width = 200;
        canvas.height = 200;
        const ctx = canvas.getContext('2d');
        
        // –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        ctx.fillStyle = '#4facfe';
        ctx.fillRect(0, 0, 200, 200);
        ctx.fillStyle = 'white';
        ctx.font = '20px Arial';
        ctx.fillText('TEST', 80, 100);
        
        return new Promise((resolve) => {
            canvas.toBlob(async (blob) => {
                try {
                    const testFile = new File([blob], 'test-image.png', { type: 'image/png' });
                    const result = await this.analyzeSingle(testFile, '—Ç–µ—Å—Ç–æ–≤–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', '—Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è');
                    this.logger.info('‚úÖ –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ');
                    resolve(result);
                } catch (error) {
                    this.logger.error('‚ùå –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞ –ø—Ä–æ–≤–∞–ª–µ–Ω:', error);
                    resolve({ error: error.message });
                }
            }, 'image/png');
        });
    }

    // –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    getDiagnostics() {
        return {
            timestamp: new Date().toISOString(),
            userAgent: navigator.userAgent,
            location: {
                hostname: window.location.hostname,
                origin: window.location.origin,
                href: window.location.href
            },
            api: this.getEndpointInfo(),
            browser: {
                onLine: navigator.onLine,
                language: navigator.language,
                cookieEnabled: navigator.cookieEnabled
            }
        };
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞
window.testMishuraAPI = async function() {
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–ò–®–£–†–ê API...');
    
    const api = new MishuraAPI();
    console.log('üìä API Info:', api.getEndpointInfo());
    console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:', api.getDiagnostics());
    
    const isConnected = await api.testConnection();
    console.log('üåê –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', isConnected);
    
    if (isConnected) {
        console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
        const testResult = await api.testSingleAnalysis();
        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:', testResult);
    }
    
    return api;
};

window.getMishuraDiagnostics = function() {
    const api = new MishuraAPI();
    return api.getDiagnostics();
};