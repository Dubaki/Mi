// üé≠ –ú–ò–®–£–†–ê - Luxury –ò–ò –°—Ç–∏–ª–∏—Å—Ç
// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - app.js (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

console.log('üé≠ –ú–ò–®–£–†–ê App –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

class MishuraApp {
    constructor() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MishuraApp...');
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.currentMode = null; // 'single' –∏–ª–∏ 'compare'
        this.currentSection = 'home'; // 'home', 'history', 'balance'
        this.compareImages = [null, null, null, null];
        this.singleImage = null;
        this.isLoading = false;
        this.lastAnalysisResult = null;
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        this.userBalance = 100;
        this.consultationsHistory = [];
        this.consultationsUsed = 0;
        
        // API –∫–ª–∏–µ–Ω—Ç - —Å–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä!
        if (window.MishuraAPIService) {
            this.api = new window.MishuraAPIService();
            console.log('‚úÖ API —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–æ–∑–¥–∞–Ω:', this.api);
        } else if (window.mishuraAPI) {
            this.api = window.mishuraAPI;
            console.log('‚úÖ API –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω:', this.api);
        } else {
            this.api = null;
            console.error('‚ùå API –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            this.showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API', 'error');
        }
        
        // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–≤–æ–¥–æ–≤
        this.occasionOptions = [
            'üíº –î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞',
            '‚ù§Ô∏è –°–≤–∏–¥–∞–Ω–∏–µ', 
            'üö∂ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞',
            'üéâ –í–µ—á–µ—Ä–∏–Ω–∫–∞',
            'üëî –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ',
            'üçΩÔ∏è –£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ',
            'üé≠ –¢–µ–∞—Ç—Ä/–∫–æ–Ω—Ü–µ—Ä—Ç',
            'üèãÔ∏è –°–ø–æ—Ä—Ç–∑–∞–ª/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
            'üõçÔ∏è –®–æ–ø–ø–∏–Ω–≥',
            '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ',
            'üéì –£—á–µ–±–∞/—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç',
            'üè† –î–æ–º–∞/–æ—Ç–¥—ã—Ö',
            'üåû –ü–ª—è–∂/–æ—Ç–ø—É—Å–∫',
            '‚ùÑÔ∏è –ó–∏–º–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞',
            'üåßÔ∏è –î–æ–∂–¥–ª–∏–≤–∞—è –ø–æ–≥–æ–¥–∞',
            'üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ'
        ];
        
        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        this.analytics = {
            appStartTime: Date.now(),
            analysisRequested: 0,
            successfulAnalysis: 0,
            errors: 0
        };
        
        this.init();
    }

    // üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        try {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            this.setupModeButtons();
            this.setupCloseButtons();
            this.setupSubmitButton();
            this.initUploaders();
            this.setupNavigation();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            this.setupKeyboardShortcuts();
            this.setupDragAndDrop();
            this.setupContextMenu();
            this.setupOccasionDropdown();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.loadUserData();
            
            // Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
            this.setupTelegramIntegration();
            
            console.log('‚úÖ MishuraApp –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // üß≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    setupNavigation() {
        const navButtons = document.querySelectorAll('.nav-btn');
        
        navButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const targetSection = btn.id.replace('nav-', '');
                this.navigateToSection(targetSection);
                this.triggerHapticFeedback('light');
            });
        });
        
        console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }

    navigateToSection(section) {
        console.log(`üß≠ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Ä–∞–∑–¥–µ–ª: ${section}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        document.getElementById(`nav-${section}`).classList.add('active');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        this.currentSection = section;
        this.showSection(section);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ
        this.closeModal();
    }

    showSection(section) {
        switch (section) {
            case 'home':
                this.showHomeSection();
                break;
            case 'history':
                this.showHistorySection();
                break;
            case 'balance':
                this.showBalanceSection();
                break;
        }
    }

    showHomeSection() {
        const container = document.querySelector('.container');
        container.innerHTML = `
            <header class="header">
                <h1>‚ú® –ú–ò–®–£–†–ê</h1>
                <p>Luxury –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç –ø—Ä–µ–º–∏—É–º –∫–ª–∞—Å—Å–∞</p>
            </header>

            <div class="action-buttons">
                <button id="single-mode-btn" class="action-btn">
                    <span class="icon">üì∑</span>
                    –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞
                </button>
                <button id="compare-mode-btn" class="action-btn">
                    <span class="icon">üîÑ</span>
                    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
                </button>
            </div>
        `;
        
        // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        setTimeout(() => {
            this.setupModeButtons();
        }, 100);
    }

    showHistorySection() {
        const container = document.querySelector('.container');
        const history = this.consultationsHistory.slice(-10).reverse();
        
        let historyHTML = `
            <header class="header">
                <h1>üìö –ò—Å—Ç–æ—Ä–∏—è</h1>
                <p>–í–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å—Ç–∏–ª–∏—Å—Ç–∞</p>
            </header>
            
            <div class="stats-card" style="
                background: rgba(212, 175, 55, 0.1);
                border: 1px solid var(--border-gold);
                border-radius: 16px;
                padding: 20px;
                margin-bottom: 20px;
                text-align: center;
            ">
                <div style="color: var(--text-gold); font-size: 1.2rem; font-weight: 600;">
                    –í—Å–µ–≥–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ${this.consultationsHistory.length}
                </div>
                <div style="color: var(--text-muted); font-size: 0.9rem; margin-top: 4px;">
                    –û—Å—Ç–∞–ª–æ—Å—å: ${this.userBalance} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö
                </div>
            </div>
        `;

        if (history.length === 0) {
            historyHTML += `
                <div style="
                    text-align: center;
                    padding: 40px 20px;
                    color: var(--text-muted);
                ">
                    <div style="font-size: 3rem; margin-bottom: 16px;">üìù</div>
                    <div style="font-size: 1.1rem;">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>
                    <div style="font-size: 0.9rem; margin-top: 8px;">
                        –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!
                    </div>
                </div>
            `;
        } else {
            historyHTML += '<div class="history-list">';
            
            history.forEach((consultation, index) => {
                const date = new Date(consultation.timestamp).toLocaleDateString('ru-RU');
                const time = new Date(consultation.timestamp).toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
                
                historyHTML += `
                    <div class="history-item" style="
                        background: rgba(26, 26, 26, 0.8);
                        border: 1px solid var(--border-light);
                        border-radius: 12px;
                        padding: 16px;
                        margin-bottom: 12px;
                        cursor: pointer;
                        transition: var(--transition);
                    " onclick="window.mishuraApp.viewConsultation(${this.consultationsHistory.length - 1 - index})">
                        <div style="
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                            margin-bottom: 8px;
                        ">
                            <span style="
                                color: var(--text-gold);
                                font-weight: 600;
                                text-transform: uppercase;
                                font-size: 0.9rem;
                            ">${consultation.occasion}</span>
                            <span style="
                                color: var(--text-muted);
                                font-size: 0.8rem;
                            ">${date} ${time}</span>
                        </div>
                        <div style="
                            color: var(--text-light);
                            font-size: 0.9rem;
                            line-height: 1.4;
                            display: -webkit-box;
                            -webkit-line-clamp: 2;
                            -webkit-box-orient: vertical;
                            overflow: hidden;
                        ">
                            ${consultation.advice.replace(/<[^>]*>/g, '').substring(0, 100)}...
                        </div>
                    </div>
                `;
            });
            
            historyHTML += '</div>';
        }

        container.innerHTML = historyHTML;
    }

    showBalanceSection() {
        const container = document.querySelector('.container');
        
        container.innerHTML = `
            <header class="header">
                <h1>üí∞ –ë–∞–ª–∞–Ω—Å</h1>
                <p>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏</p>
            </header>
            
            <div class="balance-card" style="
                background: var(--gold-gradient);
                color: var(--text-dark);
                border-radius: 20px;
                padding: 24px;
                margin-bottom: 24px;
                text-align: center;
                box-shadow: var(--shadow-gold);
            ">
                <div style="font-size: 2.5rem; font-weight: 900; margin-bottom: 8px;">
                    ${this.userBalance}
                </div>
                <div style="font-size: 1.1rem; font-weight: 600; text-transform: uppercase;">
                    –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
                </div>
            </div>
            
            <div class="usage-stats" style="
                background: rgba(26, 26, 26, 0.8);
                border: 1px solid var(--border-light);
                border-radius: 16px;
                padding: 20px;
                margin-bottom: 24px;
            ">
                <h3 style="
                    color: var(--text-gold);
                    margin-bottom: 16px;
                    text-transform: uppercase;
                    letter-spacing: 1px;
                    font-size: 1rem;
                ">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</h3>
                
                <div style="display: flex; justify-content: space-between; margin-bottom: 12px;">
                    <span style="color: var(--text-muted);">–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:</span>
                    <span style="color: var(--text-light); font-weight: 600;">${this.consultationsHistory.length}</span>
                </div>
                
                <div style="display: flex; justify-content: space-between; margin-bottom: 12px;">
                    <span style="color: var(--text-muted);">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:</span>
                    <span style="color: var(--text-light); font-weight: 600;">${this.consultationsUsed}</span>
                </div>
                
                <div style="display: flex; justify-content: space-between;">
                    <span style="color: var(--text-muted);">–û—Å—Ç–∞–ª–æ—Å—å:</span>
                    <span style="color: var(--text-gold); font-weight: 600;">${this.userBalance}</span>
                </div>
            </div>
            
            <div class="add-balance-section">
                <button id="add-balance-btn" class="action-btn" style="
                    width: 100%;
                    margin-bottom: 16px;
                    background: rgba(26, 26, 26, 0.8);
                    border: 2px solid var(--border-gold);
                    color: var(--text-gold);
                ">
                    <span class="icon">‚ûï</span>
                    –î–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
                </button>
                
                <div style="
                    background: rgba(212, 175, 55, 0.1);
                    border: 1px solid var(--border-gold);
                    border-radius: 12px;
                    padding: 16px;
                    text-align: center;
                ">
                    <div style="
                        color: var(--text-gold);
                        font-weight: 600;
                        margin-bottom: 8px;
                        text-transform: uppercase;
                        letter-spacing: 0.5px;
                        font-size: 0.9rem;
                    ">üí° –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
                    <div style="
                        color: var(--text-light);
                        font-size: 0.9rem;
                        line-height: 1.4;
                    ">
                        –ö–∞–∂–¥—ã–π –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç 100 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π. 
                        –ü–æ—Å–ª–µ –∏—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã 
                        –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç –¥–æ–±—Ä–æ–≤–æ–ª—å–Ω—ã–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ–º.
                    </div>
                </div>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        document.getElementById('add-balance-btn').addEventListener('click', () => {
            this.showAddBalanceModal();
        });
    }

    // üí∞ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    showAddBalanceModal() {
        this.showNotification('üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –æ–ø–ª–∞—Ç–∞!', 'info', 4000);
        this.triggerHapticFeedback('warning');
        
        // –ü–æ–∫–∞ —á—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º 10 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –±–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        setTimeout(() => {
            this.userBalance += 10;
            this.saveUserData();
            this.showBalanceSection();
            this.showNotification('üéÅ –î–æ–±–∞–≤–ª–µ–Ω–æ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!', 'success');
            this.triggerHapticFeedback('success');
        }, 1000);
    }

    // üìÑ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    viewConsultation(index) {
        const consultation = this.consultationsHistory[index];
        if (!consultation) return;
        
        const modal = document.createElement('div');
        modal.className = 'modal-overlay active';
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 500px;">
                <div class="modal-header">
                    <h2 class="modal-title">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #${index + 1}</h2>
                    <button class="close-btn" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <div style="
                        background: rgba(212, 175, 55, 0.1);
                        border: 1px solid var(--border-gold);
                        border-radius: 12px;
                        padding: 16px;
                        margin-bottom: 16px;
                    ">
                        <div style="color: var(--text-gold); font-weight: 600; margin-bottom: 8px;">
                            üìÖ ${new Date(consultation.timestamp).toLocaleString('ru-RU')}
                        </div>
                        <div style="color: var(--text-light); margin-bottom: 4px;">
                            <strong>–ü–æ–≤–æ–¥:</strong> ${consultation.occasion}
                        </div>
                        ${consultation.preferences ? `
                            <div style="color: var(--text-light);">
                                <strong>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</strong> ${consultation.preferences}
                            </div>
                        ` : ''}
                    </div>
                    
                    <div class="result-content">
                        ${consultation.advice}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        this.triggerHapticFeedback('light');
    }

    // üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    loadUserData() {
        try {
            const data = JSON.parse(localStorage.getItem('mishura_user_data') || '{}');
            this.userBalance = data.balance || 100;
            this.consultationsHistory = data.history || [];
            this.consultationsUsed = data.used || 0;
            
            console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', {
                balance: this.userBalance,
                history: this.consultationsHistory.length,
                used: this.consultationsUsed
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.initializeUserData();
        }
    }

    saveUserData() {
        try {
            const data = {
                balance: this.userBalance,
                history: this.consultationsHistory,
                used: this.consultationsUsed,
                lastSaved: Date.now()
            };
            
            localStorage.setItem('mishura_user_data', JSON.stringify(data));
            console.log('üíæ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }

    initializeUserData() {
        this.userBalance = 100;
        this.consultationsHistory = [];
        this.consultationsUsed = 0;
        this.saveUserData();
        
        console.log('üÜï –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        this.showNotification('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å 100 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π!', 'success', 5000);
    }

    // üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    setupModeButtons() {
        const singleBtn = document.getElementById('single-mode-btn');
        const compareBtn = document.getElementById('compare-mode-btn');
        
        if (singleBtn) {
            const handleSingleClick = () => {
                console.log('üî• Single Mode button clicked');
                this.triggerHapticFeedback('light');
                this.openSingleModal();
            };
            singleBtn.addEventListener('click', handleSingleClick);
        } else {
            console.warn('‚ö†Ô∏è Single button –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        if (compareBtn) {
            const handleCompareClick = () => {
                console.log('üîÑ Compare Mode button clicked');
                this.triggerHapticFeedback('light');
                this.openCompareModal();
            };
            compareBtn.addEventListener('click', handleCompareClick);
        } else {
            console.warn('‚ö†Ô∏è Compare button –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        console.log('‚úÖ Mode buttons –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    setupCloseButtons() {
        document.addEventListener('click', (event) => {
            if (event.target.matches('#consultation-cancel, .close-btn, #form-cancel')) {
                this.closeModal();
                this.triggerHapticFeedback('light');
            }
        });
    }

    setupSubmitButton() {
        document.addEventListener('click', (event) => {
            if (event.target.matches('#form-submit')) {
                event.preventDefault();
                this.submit();
            }
        });
        
        document.addEventListener('input', (event) => {
            if (['occasion', 'preferences'].includes(event.target.id)) {
                this.updateSubmitButton();
            }
        });
    }

    // üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–≤–æ–¥–æ–≤
    setupOccasionDropdown() {
        document.addEventListener('click', (event) => {
            const occasionInput = document.getElementById('occasion');
            const optionsContainer = document.getElementById('occasion-options');
            
            if (!occasionInput || !optionsContainer) return;
            
            if (event.target === occasionInput) {
                // –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                if (optionsContainer.children.length === 0) {
                    this.occasionOptions.forEach(option => {
                        const optionElement = document.createElement('div');
                        optionElement.className = 'occasion-option';
                        optionElement.textContent = option;
                        optionElement.addEventListener('click', () => {
                            occasionInput.value = option;
                            optionsContainer.classList.remove('active');
                            this.updateSubmitButton();
                            this.triggerHapticFeedback('light');
                        });
                        optionsContainer.appendChild(optionElement);
                    });
                }
                
                optionsContainer.classList.toggle('active');
                this.triggerHapticFeedback('light');
            } else if (!event.target.closest('.occasion-dropdown')) {
                optionsContainer.classList.remove('active');
            }
        });
    }

    // üì± Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
    setupTelegramIntegration() {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            
            tg.ready();
            tg.expand();
            
            tg.MainButton.setText('–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é');
            tg.MainButton.show();
            
            tg.MainButton.onClick(() => {
                if (this.currentSection === 'home') {
                    this.openSingleModal();
                } else {
                    this.navigateToSection('home');
                }
            });
            
            console.log('üì± Telegram WebApp –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω');
        }
    }

    // üéÆ Haptic Feedback
    triggerHapticFeedback(type = 'light') {
        try {
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
                const feedback = window.Telegram.WebApp.HapticFeedback;
                
                switch (type) {
                    case 'light':
                        feedback.impactOccurred('light');
                        break;
                    case 'medium':
                        feedback.impactOccurred('medium');
                        break;
                    case 'heavy':
                        feedback.impactOccurred('heavy');
                        break;
                    case 'success':
                        feedback.notificationOccurred('success');
                        break;
                    case 'warning':
                        feedback.notificationOccurred('warning');
                        break;
                    case 'error':
                        feedback.notificationOccurred('error');
                        break;
                }
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ haptic feedback
        }
    }

    // üñ±Ô∏è Drag & Drop —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    setupDragAndDrop() {
        // Single —Ä–µ–∂–∏–º
        const singlePreview = document.getElementById('single-preview');
        if (singlePreview) {
            this.setupDragDropForElement(singlePreview, (file) => {
                this.handleSingleFile(file);
            });
        }
        
        // Compare —Ä–µ–∂–∏–º
        document.querySelectorAll('.compare-slot').forEach((slot, index) => {
            this.setupDragDropForElement(slot, (file) => {
                this.handleCompareFile(file, index);
            });
        });
        
        console.log('üñ±Ô∏è Drag & Drop –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    }

    setupDragDropForElement(element, onDrop) {
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            element.addEventListener(eventName, this.preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            element.addEventListener(eventName, () => {
                element.classList.add('drag-over');
            }, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            element.addEventListener(eventName, () => {
                element.classList.remove('drag-over');
            }, false);
        });

        element.addEventListener('drop', (e) => {
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                onDrop(files[0]);
            }
        }, false);
    }

    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    // ‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è
    setupKeyboardShortcuts() {
        document.addEventListener('keydown', (event) => {
            // ESC - –∑–∞–∫—Ä—ã—Ç—å –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
            if (event.key === 'Escape') {
                this.closeModal();
            }
            
            // Enter - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞)
            if (event.key === 'Enter' && event.ctrlKey) {
                const submitBtn = document.getElementById('form-submit');
                if (submitBtn && !submitBtn.disabled) {
                    this.submit();
                }
            }
            
            // S - –æ—Ç–∫—Ä—ã—Ç—å single —Ä–µ–∂–∏–º
            if (event.key === 's' || event.key === '—ã') {
                if (this.currentSection === 'home' && !document.querySelector('.modal-overlay.active')) {
                    this.openSingleModal();
                }
            }
            
            // C - –æ—Ç–∫—Ä—ã—Ç—å compare —Ä–µ–∂–∏–º  
            if (event.key === 'c' || event.key === '—Å') {
                if (this.currentSection === 'home' && !document.querySelector('.modal-overlay.active')) {
                    this.openCompareModal();
                }
            }
        });
        
        console.log('‚å®Ô∏è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // üñ±Ô∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    setupContextMenu() {
        document.addEventListener('contextmenu', (event) => {
            // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            if (event.target.closest('.upload-preview, .compare-slot img')) {
                event.preventDefault();
                this.showImageContextMenu(event);
            }
        });
    }

    showImageContextMenu(event) {
        // –ü—Ä–æ—Å—Ç–æ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        const menu = document.createElement('div');
        menu.style.cssText = `
            position: fixed;
            top: ${event.clientY}px;
            left: ${event.clientX}px;
            background: var(--secondary-black);
            border: 1px solid var(--border-gold);
            border-radius: 8px;
            padding: 8px 0;
            z-index: 10000;
            min-width: 150px;
            box-shadow: var(--shadow-black);
        `;
        
        const actions = [
            { text: 'üîÑ –ó–∞–º–µ–Ω–∏—Ç—å', action: () => this.replaceImage(event.target) },
            { text: '‚ùå –£–¥–∞–ª–∏—Ç—å', action: () => this.removeImage(event.target) }
        ];
        
        actions.forEach(({ text, action }) => {
            const item = document.createElement('div');
            item.textContent = text;
            item.style.cssText = `
                padding: 8px 16px;
                cursor: pointer;
                color: var(--text-light);
                transition: background-color 0.2s;
            `;
            
            item.addEventListener('mouseenter', () => {
                item.style.backgroundColor = 'rgba(212, 175, 55, 0.1)';
            });
            
            item.addEventListener('mouseleave', () => {
                item.style.backgroundColor = 'transparent';
            });
            
            item.addEventListener('click', () => {
                action();
                menu.remove();
            });
            
            menu.appendChild(item);
        });
        
        document.body.appendChild(menu);
        
        // –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –µ–≥–æ
        setTimeout(() => {
            document.addEventListener('click', () => menu.remove(), { once: true });
        }, 100);
    }

    replaceImage(imgElement) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–∞–º–µ–Ω—è–µ–º
        const slot = imgElement.closest('.compare-slot');
        if (slot) {
            const slotIndex = parseInt(slot.dataset.slot);
            const fileInput = document.getElementById(`compare-file-input-${slotIndex}`);
            if (fileInput) fileInput.click();
        } else {
            // Single —Ä–µ–∂–∏–º
            const fileInput = document.getElementById('single-file-input');
            if (fileInput) fileInput.click();
        }
    }

    removeImage(imgElement) {
        const slot = imgElement.closest('.compare-slot');
        if (slot) {
            // Compare —Ä–µ–∂–∏–º
            const slotIndex = parseInt(slot.dataset.slot);
            this.compareImages[slotIndex] = null;
            slot.innerHTML = `
                <span class="slot-number">${slotIndex + 1}</span>
                <span class="add-icon">+</span>
            `;
            slot.classList.remove('has-image');
        } else {
            // Single —Ä–µ–∂–∏–º
            this.singleImage = null;
            const preview = document.getElementById('single-preview');
            if (preview) {
                preview.innerHTML = '<div class="upload-text">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ</div>';
                preview.classList.remove('has-image');
            }
        }
        
        this.updateSubmitButton();
        this.triggerHapticFeedback('light');
    }

    // üéØ –ú–µ—Ç–æ–¥—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    openSingleModal() {
        this.currentMode = 'single';
        document.getElementById('modal-title').textContent = '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞';
        this.showModal('single-mode');
    }

    openCompareModal() {
        this.currentMode = 'compare';
        document.getElementById('modal-title').textContent = '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤';
        this.showModal('compare-mode');
    }

    showModal(mode) {
        const overlay = document.getElementById('consultation-overlay');
        const modes = document.querySelectorAll('.upload-mode');
        
        modes.forEach(m => m.classList.remove('active'));
        document.getElementById(mode).classList.add('active');
        
        overlay.classList.add('active');
        this.clearForm();
        this.hideForm();
        this.hideLoading();
        this.hideResult();
    }

    closeModal() {
        const overlay = document.getElementById('consultation-overlay');
        overlay.classList.remove('active');
        this.clearForm();
        this.clearImages();
    }

    // üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Ñ–æ—Ä–º—ã
    clearForm() {
        const occasion = document.getElementById('occasion');
        const preferences = document.getElementById('preferences');
        const options = document.getElementById('occasion-options');
        
        if (occasion) occasion.value = '';
        if (preferences) preferences.value = '';
        if (options) options.classList.remove('active');
        
        this.updateSubmitButton();
    }

    clearImages() {
        this.singleImage = null;
        this.compareImages = [null, null, null, null];
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–≤—å—é
        const singlePreview = document.getElementById('single-preview');
        if (singlePreview) {
            singlePreview.innerHTML = '<div class="upload-text">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ</div>';
            singlePreview.classList.remove('has-image');
        }
        
        // –û—á–∏—â–∞–µ–º —Å–ª–æ—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        document.querySelectorAll('.compare-slot').forEach((slot, index) => {
            slot.innerHTML = `
                <span class="slot-number">${index + 1}</span>
                <span class="add-icon">+</span>
            `;
            slot.classList.remove('has-image');
        });
    }

    updateSubmitButton() {
        const submitBtn = document.getElementById('form-submit');
        const occasion = document.getElementById('occasion')?.value?.trim() || '';
        
        let hasImages = false;
        if (this.currentMode === 'single') {
            hasImages = this.singleImage !== null;
        } else if (this.currentMode === 'compare') {
            hasImages = this.compareImages.filter(img => img !== null).length >= 2;
        }
        
        if (submitBtn) {
            submitBtn.disabled = !hasImages || !occasion;
        }
    }

    hideForm() {
        const form = document.getElementById('consultation-form');
        if (form) form.classList.remove('active');
    }

    showForm() {
        const form = document.getElementById('consultation-form');
        if (form) form.classList.add('active');
        this.updateSubmitButton();
    }

    hideLoading() {
        const loading = document.getElementById('loading');
        if (loading) loading.classList.remove('active');
    }

    showLoading() {
        this.isLoading = true;
        
        const sections = {
            loading: true,
            'consultation-form': false,
            result: false
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
    }

    hideResult() {
        const result = document.getElementById('result');
        if (result) result.classList.remove('active');
    }

    showResult(result) {
        this.isLoading = false;
        
        const sections = {
            loading: false,
            'consultation-form': false,
            result: true
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
        
        // –ö–æ–Ω—Ç–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        const content = document.getElementById('result-content');
        if (content) {
            const advice = result.advice || result.message || '–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω';
            content.innerHTML = this.formatAdvice(advice);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –∏—Å—Ç–æ—Ä–∏—é
        const consultation = {
            id: Date.now(),
            type: this.currentMode,
            occasion: document.getElementById('occasion')?.value || '',
            preferences: document.getElementById('preferences')?.value || '',
            advice: result.advice || result.message || '',
            timestamp: new Date().toISOString(),
            imagesCount: this.currentMode === 'compare' ? 
                this.compareImages.filter(img => img !== null).length : 1
        };
        
        // –°–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        this.userBalance--;
        this.consultationsUsed++;
        this.consultationsHistory.push(consultation);
        this.saveUserData();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if (this.userBalance <= 10) {
            setTimeout(() => {
                this.showNotification(`‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${this.userBalance} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π`, 'warning', 4000);
            }, 2000);
        }
    }

    showError(message) {
        this.isLoading = false;
        
        const sections = {
            loading: false,
            'consultation-form': true,
            result: false
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
        
        this.showNotification(message, 'error');
    }

    // ‚ú® –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    formatAdvice(advice) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ
        const colorMapping = {
            '—Å–∏–Ω–∏–π': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑',
            '—Å–∏–Ω–µ–º': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑', 
            '—Å–∏–Ω—è—è': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑',
            '–∫—Ä–∞—Å–Ω—ã–π': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑',
            '–∫—Ä–∞—Å–Ω–æ–º': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑',
            '–∫—Ä–∞—Å–Ω–∞—è': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑',
            '–±–µ–ª—ã–π': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑',
            '–±–µ–ª–æ–º': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑',
            '–±–µ–ª–∞—è': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑',
            '—á–µ—Ä–Ω—ã–π': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑',
            '—á–µ—Ä–Ω–æ–º': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑',
            '—á–µ—Ä–Ω–∞—è': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑',
            '–∑–µ–ª–µ–Ω—ã–π': '–ó–µ–ª–µ–Ω—ã–π –æ–±—Ä–∞–∑',
            '–∑–µ–ª–µ–Ω–æ–º': '–ó–µ–ª–µ–Ω—ã–π –æ–±—Ä–∞–∑',
            '–∑–µ–ª–µ–Ω–∞—è': '–ó–µ–ª–µ–Ω—ã–π –æ–±—Ä–∞–∑',
            '–∂–µ–ª—Ç—ã–π': '–ñ–µ–ª—Ç—ã–π –æ–±—Ä–∞–∑',
            '–∂–µ–ª—Ç–æ–º': '–ñ–µ–ª—Ç—ã–π –æ–±—Ä–∞–∑',
            '–∂–µ–ª—Ç–∞—è': '–ñ–µ–ª—Ç—ã–π –æ–±—Ä–∞–∑',
            '—Ä–æ–∑–æ–≤—ã–π': '–†–æ–∑–æ–≤—ã–π –æ–±—Ä–∞–∑',
            '—Ä–æ–∑–æ–≤–æ–º': '–†–æ–∑–æ–≤—ã–π –æ–±—Ä–∞–∑',
            '—Ä–æ–∑–æ–≤–∞—è': '–†–æ–∑–æ–≤—ã–π –æ–±—Ä–∞–∑',
            '—Å–µ—Ä—ã–π': '–°–µ—Ä—ã–π –æ–±—Ä–∞–∑',
            '—Å–µ—Ä–æ–º': '–°–µ—Ä—ã–π –æ–±—Ä–∞–∑',
            '—Å–µ—Ä–∞—è': '–°–µ—Ä—ã–π –æ–±—Ä–∞–∑',
            '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π': '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π –æ–±—Ä–∞–∑',
            '–∫–æ—Ä–∏—á–Ω–µ–≤–æ–º': '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π –æ–±—Ä–∞–∑',
            '–∫–æ—Ä–∏—á–Ω–µ–≤–∞—è': '–ö–æ—Ä–∏—á–Ω–µ–≤—ã–π –æ–±—Ä–∞–∑',
            '–æ—Ä–∞–Ω–∂–µ–≤—ã–π': '–û—Ä–∞–Ω–∂–µ–≤—ã–π –æ–±—Ä–∞–∑',
            '–æ—Ä–∞–Ω–∂–µ–≤–æ–º': '–û—Ä–∞–Ω–∂–µ–≤—ã–π –æ–±—Ä–∞–∑',
            '–æ—Ä–∞–Ω–∂–µ–≤–∞—è': '–û—Ä–∞–Ω–∂–µ–≤—ã–π –æ–±—Ä–∞–∑',
            '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π': '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑',
            '—Ñ–∏–æ–ª–µ—Ç–æ–≤–æ–º': '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑',
            '—Ñ–∏–æ–ª–µ—Ç–æ–≤–∞—è': '–§–∏–æ–ª–µ—Ç–æ–≤—ã–π –æ–±—Ä–∞–∑'
        };
        
        let processedAdvice = advice;
        
        // –£–±–∏—Ä–∞–µ–º –∏–∑–±—ã—Ç–æ—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≥–æ, —á—Ç–æ –Ω–∞–¥–µ—Ç–æ
        const descriptionsToRemove = [
            /–ù–∞ –ø–µ—Ä–≤–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ –≤—Ç–æ—Ä–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —Ç—Ä–µ—Ç—å–µ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —á–µ—Ç–≤–µ—Ä—Ç–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —Ñ–æ—Ç–æ.*?–≤—ã.*?–æ–¥–µ—Ç—ã.*?\./gi,
            /–Ø –≤–∏–∂—É.*?—á—Ç–æ.*?–Ω–∞.*?\./gi,
            /–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.*?\./gi
        ];
        
        descriptionsToRemove.forEach(pattern => {
            processedAdvice = processedAdvice.replace(pattern, '');
        });
        
        // –ó–∞–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤
        Object.entries(colorMapping).forEach(([color, title]) => {
            const regex = new RegExp(`(–≤|–Ω–∞)\\s+${color}[–∞-—è]*\\s+(–ø–ª–∞—Ç—å–µ|—Ä—É–±–∞—à–∫–µ|—Ñ—É—Ç–±–æ–ª–∫–µ|–±–ª—É–∑–∫–µ|–∫–æ—Å—Ç—é–º–µ|–∂–∞–∫–µ—Ç–µ|–ø–∏–¥–∂–∞–∫–µ|–±—Ä—é–∫–∞—Ö|–¥–∂–∏–Ω—Å–∞—Ö|—é–±–∫–µ|—à–æ—Ä—Ç–∞—Ö|—Ç–æ–ø–µ|–∫–∞—Ä–¥–∏–≥–∞–Ω–µ|—Å–≤–∏—Ç–µ—Ä–µ|–ø–∞–ª—å—Ç–æ|–∫—É—Ä—Ç–∫–µ)`, 'gi');
            processedAdvice = processedAdvice.replace(regex, `<span class="outfit-title">${title}</span>`);
        });
        
        // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ª–æ–≥–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        const sections = processedAdvice.split(/\n\n|\. [–ê-–Ø–Å]/).map(section => section.trim()).filter(s => s.length > 10);
        
        let formattedAdvice = '';
        sections.forEach((section, index) => {
            if (section.toLowerCase().includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é') || section.toLowerCase().includes('—Å–æ–≤–µ—Ç—É—é')) {
                formattedAdvice += `<h4>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h4><p>${section}</p>`;
            } else if (section.toLowerCase().includes('–ø–æ–¥–æ–π–¥–µ—Ç') || section.toLowerCase().includes('–ª—É—á—à–µ')) {
                formattedAdvice += `<h4>‚ú® –ß—Ç–æ –ø–æ–¥–æ–π–¥–µ—Ç</h4><p>${section}</p>`;
            } else if (section.toLowerCase().includes('–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã') || section.toLowerCase().includes('—É–∫—Ä–∞—à–µ–Ω–∏—è')) {
                formattedAdvice += `<h4>üíé –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã</h4><p>${section}</p>`;
            } else if (section.toLowerCase().includes('—Ü–≤–µ—Ç') || section.toLowerCase().includes('–æ—Ç—Ç–µ–Ω–æ–∫')) {
                formattedAdvice += `<h4>üé® –¶–≤–µ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è</h4><p>${section}</p>`;
            } else if (section.toLowerCase().includes('–æ–±—É–≤—å') || section.toLowerCase().includes('—Ç—É—Ñ–ª–∏')) {
                formattedAdvice += `<h4>üë† –û–±—É–≤—å</h4><p>${section}</p>`;
            } else if (index === 0) {
                formattedAdvice += `<h4>üìã –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑</h4><p>${section}</p>`;
            } else {
                formattedAdvice += `<p>${section}</p>`;
            }
        });
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        return formattedAdvice
            .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
            .replace(/\*(.*?)\*/g, '<em>$1</em>')
            .replace(/([.!?])\s+([–ê-–Ø–Å])/g, '$1</p><p>$2');
    }

    // üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º
    async submit() {
        if (this.isLoading) {
            console.log('‚è≥ –ó–∞–ø—Ä–æ—Å —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
            return;
        }
        
        const occasion = document.getElementById('occasion')?.value?.trim() || '';
        const preferences = document.getElementById('preferences')?.value?.trim() || '';
        
        if (!occasion) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–≤–æ–¥', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if (this.userBalance <= 0) {
            this.showNotification('‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        this.analytics.analysisRequested++;
        
        if (this.currentMode === 'single') {
            await this.submitSingle(occasion, preferences);
        } else if (this.currentMode === 'compare') {
            await this.submitCompare(occasion, preferences);
        }
    }

    async submitSingle(occasion, preferences) {
        console.log('üöÄ Single submit –Ω–∞—á–∞–ª—Å—è');
        
        if (!this.singleImage) {
            this.showNotification('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        if (!this.api) {
            this.showNotification('‚ùå API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        this.showLoading();
        this.triggerHapticFeedback('medium');
        
        try {
            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
            console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥:', 'analyzeSingle');
            
            const result = await this.api.analyzeSingle(this.singleImage, occasion, preferences);
            console.log('‚úÖ Single —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω:', result);
            
            this.lastAnalysisResult = result;
            this.analytics.successfulAnalysis++;
            this.showResult(result);
            this.triggerHapticFeedback('success');
            
        } catch (error) {
            console.error('‚ùå Single –æ—à–∏–±–∫–∞:', error);
            this.analytics.errors++;
            this.showError(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
            this.triggerHapticFeedback('error');
        }
    }

    async submitCompare(occasion, preferences) {
        const images = this.compareImages.filter(img => img !== null);
        
        if (images.length < 2) {
            this.showNotification('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
        if (!this.api) {
            this.showNotification('‚ùå API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        console.log(`üöÄ Compare submit: –æ—Ç–ø—Ä–∞–≤–∫–∞ ${images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        this.showLoading();
        this.triggerHapticFeedback('medium');
        
        try {
            console.log('üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
            console.log('üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥:', 'analyzeCompare');
            
            const result = await this.api.analyzeCompare(images, occasion, preferences);
            console.log('‚úÖ Compare —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω:', result);
            
            this.lastAnalysisResult = result;
            this.analytics.successfulAnalysis++;
            this.showResult(result);
            this.triggerHapticFeedback('success');
            
        } catch (error) {
            console.error('‚ùå Compare –æ—à–∏–±–∫–∞:', error);
            this.analytics.errors++;
            this.showError(`–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${error.message}`);
            this.triggerHapticFeedback('error');
        }
    }

    // üìÅ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤
    initUploaders() {
        // Single —Ä–µ–∂–∏–º
        this.setupSingleUploader();
        
        // Compare —Ä–µ–∂–∏–º  
        this.setupCompareUploader();
        
        console.log('üìÅ –ó–∞–≥—Ä—É–∑—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    // üì∑ Single –∑–∞–≥—Ä—É–∑—á–∏–∫
    setupSingleUploader() {
        const preview = document.getElementById('single-preview');
        const fileInput = document.getElementById('single-file-input');
        
        if (preview) {
            preview.addEventListener('click', () => {
                console.log('üìÅ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è Single —Ä–µ–∂–∏–º–∞');
                if (fileInput) {
                    fileInput.click();
                }
            });
        }
        
        if (fileInput) {
            fileInput.addEventListener('change', (event) => {
                const file = event.target.files[0];
                if (file) {
                    this.handleSingleFile(file);
                }
            });
        }
    }

    // üîÑ Compare –∑–∞–≥—Ä—É–∑—á–∏–∫
    setupCompareUploader() {
        document.querySelectorAll('.compare-slot').forEach((slot, index) => {
            slot.addEventListener('click', () => {
                console.log(`üìÅ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è Compare —Å–ª–æ—Ç–∞ ${index}`);
                const fileInput = document.getElementById(`compare-file-input-${index}`);
                if (fileInput) {
                    fileInput.click();
                }
            });
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ—Ç–∞
        for (let i = 0; i < 4; i++) {
            const fileInput = document.getElementById(`compare-file-input-${i}`);
            if (fileInput) {
                fileInput.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    if (file) {
                        this.handleCompareFile(file, i);
                    }
                });
            }
        }
    }

    // üì∑ –û–±—Ä–∞–±–æ—Ç–∫–∞ Single —Ñ–∞–π–ª–∞
    async handleSingleFile(file) {
        console.log('üì∑ Single —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω:', file.name);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!this.validateFile(file)) {
            return;
        }
        
        try {
            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const optimizedFile = await this.optimizeImage(file);
            this.singleImage = optimizedFile;
            
            // –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é
            const reader = new FileReader();
            reader.onload = (e) => {
                const preview = document.getElementById('single-preview');
                if (preview) {
                    preview.innerHTML = `<img src="${e.target.result}" alt="–ü—Ä–µ–≤—å—é" class="upload-preview">`;
                    preview.classList.add('has-image');
                }
                
                this.updateSubmitButton();
                this.showForm();
                this.triggerHapticFeedback('success');
            };
            reader.readAsDataURL(optimizedFile);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
        }
    }

    // üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ Compare —Ñ–∞–π–ª–∞
    async handleCompareFile(file, slotIndex) {
        console.log(`üîÑ Compare —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è —Å–ª–æ—Ç–∞ ${slotIndex}:`, file.name);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!this.validateFile(file)) {
            return;
        }
        
        try {
            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const optimizedFile = await this.optimizeImage(file);
            this.compareImages[slotIndex] = optimizedFile;
            
            // –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é
            const reader = new FileReader();
            reader.onload = (e) => {
                const slot = document.querySelector(`[data-slot="${slotIndex}"]`);
                if (slot) {
                    slot.innerHTML = `
                        <span class="slot-number">${slotIndex + 1}</span>
                        <img src="${e.target.result}" alt="–ü—Ä–µ–≤—å—é ${slotIndex + 1}">
                    `;
                    slot.classList.add('has-image');
                }
                
                this.updateSubmitButton();
                this.updateCompareForm();
                this.triggerHapticFeedback('success');
            };
            reader.readAsDataURL(optimizedFile);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error);
            this.showNotification('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
        }
    }

    // ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤
    validateFile(file) {
        const maxSize = 20 * 1024 * 1024; // 20MB
        const allowedTypes = ['image/jpeg', 'image/png', 'image/webp'];
        
        if (!allowedTypes.includes(file.type)) {
            this.showNotification('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPG, PNG –∏ WebP', 'error');
            this.triggerHapticFeedback('error');
            return false;
        }
        
        if (file.size > maxSize) {
            this.showNotification('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å–∏–º—É–º 20MB)', 'error');
            this.triggerHapticFeedback('error');
            return false;
        }
        
        return true;
    }

    // üé® –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    async optimizeImage(file) {
        return new Promise((resolve) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();
            
            img.onload = () => {
                // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                const maxWidth = 1920;
                const maxHeight = 1920;
                
                let { width, height } = img;
                
                // –ü—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
                if (width > maxWidth || height > maxHeight) {
                    const ratio = Math.min(maxWidth / width, maxHeight / height);
                    width *= ratio;
                    height *= ratio;
                }
                
                canvas.width = width;
                canvas.height = height;
                
                // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                ctx.drawImage(img, 0, 0, width, height);
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
                canvas.toBlob((blob) => {
                    const optimizedFile = new File([blob], file.name, {
                        type: 'image/jpeg',
                        lastModified: Date.now()
                    });
                    
                    console.log(`üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${file.size} ‚Üí ${optimizedFile.size} –±–∞–π—Ç`);
                    resolve(optimizedFile);
                }, 'image/jpeg', 0.85);
            };
            
            img.src = URL.createObjectURL(file);
        });
    }

    // üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    updateCompareForm() {
        const imageCount = this.compareImages.filter(img => img !== null).length;
        
        if (imageCount >= 2) {
            this.showForm();
        }
        
        console.log(`üîÑ Compare: –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${imageCount} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
    }

    // üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    showNotification(message, type = 'info', duration = 3000) {
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.textContent = message;
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, duration);
        
        console.log(`üîî ${type.toUpperCase()}: ${message}`);
    }
}

// üéâ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    console.log('üì± DOM –≥–æ—Ç–æ–≤, —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...');
    window.mishuraApp = new MishuraApp();
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ú–ò–®–£–†–ê –∑–∞–ø—É—â–µ–Ω–æ!');
});