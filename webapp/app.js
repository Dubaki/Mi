// üé≠ –ú–ò–®–£–†–ê - –¢–≤–æ–π –°—Ç–∏–ª–∏—Å—Ç
// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - app.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
// –í–µ—Ä—Å–∏—è: 2.6.0 - –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –ÆKASSA –ü–õ–ê–¢–ï–ñ–ï–ô

class MishuraApp {
    constructor() {
        this.initializeState();
        this.initializeAPI();
    }

    initializeState() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MishuraApp...');
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.currentMode = null;
        this.currentSection = 'home';
        this.compareImages = [null, null, null, null];
        this.singleImage = null;
        this.isLoading = false;
        this.lastAnalysisResult = null;
        this.requestTimeout = 90000; // 90 —Å–µ–∫—É–Ω–¥
        this.eventListenersAttached = false;
        this.initializationComplete = false;
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–æ–≤ (—Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ñ–æ–Ω–µ)
        this.syncState = {
            isOnline: navigator.onLine,
            lastSyncTime: 0,
            syncInProgress: false,
            pendingChanges: [],
            userId: null,
            deviceId: null
        };
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        this.userBalance = 200;
        this.consultationsHistory = [];
        this.consultationsUsed = 0;
        
        // –ü–ª–∞—Ç–µ–∂–∏ –ÆKassa
        this.paymentPackages = null;
        this.currentPayment = null;
        this.paymentCheckInterval = null;
        
        // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        this.syncInterval = null;
        this.balanceCheckInterval = null;
        this.onlineStatusInterval = null;
        
        this.api = null;
        
        // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–≤–æ–¥–æ–≤
        this.occasionOptions = [
            'üíº –î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞', '‚ù§Ô∏è –°–≤–∏–¥–∞–Ω–∏–µ', 'üö∂ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞',
            'üéâ –í–µ—á–µ—Ä–∏–Ω–∫–∞', 'üëî –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', 'üçΩÔ∏è –£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ',
            'üé≠ –¢–µ–∞—Ç—Ä/–∫–æ–Ω—Ü–µ—Ä—Ç', 'üèãÔ∏è –°–ø–æ—Ä—Ç–∑–∞–ª/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', 'üõçÔ∏è –®–æ–ø–ø–∏–Ω–≥',
            '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', 'üéì –£—á–µ–±–∞/—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', 'üè† –î–æ–º–∞/–æ—Ç–¥—ã—Ö',
            'üåû –ü–ª—è–∂/–æ—Ç–ø—É—Å–∫', '‚ùÑÔ∏è –ó–∏–º–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞', 'üåßÔ∏è –î–æ–∂–¥–ª–∏–≤–∞—è –ø–æ–≥–æ–¥–∞',
            'üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ', 'üè¢ –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
            'üé® –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', 'üë∂ –í—Å—Ç—Ä–µ—á–∞ —Å –¥–µ—Ç—å–º–∏', 'üë• –î–µ–ª–æ–≤—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã'
        ];
        
        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        this.analytics = {
            appStartTime: Date.now(),
            analysisRequested: 0,
            successfulAnalysis: 0,
            errors: 0,
            syncCount: 0,
            syncErrors: 0
        };
        
        this.init = this.init.bind(this);
        setTimeout(() => this.init(), 100);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API
    async initializeAPI() {
        try {
            const healthData = await fetch(`${API_BASE_URL}/api/v1/health`).then(res => res.json());
            console.log('üè• –°—Ç–∞—Ç—É—Å API:', healthData);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π API
            this.api = new window.MishuraAPIService();
            
            console.log('üöÄ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', this.api.constructor.name);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API:', error);
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –Ω–µ –ø—É–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.showNotification('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...', 'info', 3000);
            this.api = new window.MishuraAPIService();
        }
        
        this.updateAPIStatus();
    }

    updateAPIStatus() {
        const isRealAPI = this.api && !this.api.isMock;
        const statusElement = document.querySelector('.api-status');
        
        if (statusElement) {
            statusElement.textContent = isRealAPI ? 'üåê –†–µ–∞–ª—å–Ω—ã–π API' : 'üé≠ –î–µ–º–æ-—Ä–µ–∂–∏–º';
            statusElement.className = `api-status ${isRealAPI ? 'real' : 'demo'}`;
        }
        
        console.log('üîß API —Å—Ç–∞—Ç—É—Å:', isRealAPI ? '–†–µ–∞–ª—å–Ω—ã–π API' : '–î–µ–º–æ-—Ä–µ–∂–∏–º');
    }

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            this.setupNavigation();
            
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤
        this.fixModeButtons();
        
        // –ï—Å–ª–∏ –º—ã –≤ —Å–µ–∫—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
        if (this.currentSection === 'balance') {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞...');
            this.showBalanceSection();
        }
        
        if (this.initializationComplete) return;

        try {
            this.syncState.deviceId = this.generateDeviceId();
            this.setupNetworkMonitoring();
            this.checkForSuccessfulPayment();
            // –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–ê–ó–û–í–´–ï –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupBasicEventHandlers();
            this.loadUserData();
            this.startPeriodicSync();
            this.setupTelegramIntegration();
            this.initModularNavigation();
            this.initializationComplete = true;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    setupBasicEventHandlers() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        this.setupNavigation();
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        this.setupModeButtons();
        this.setupCloseButtons();
        this.setupSubmitButton();
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥—Ä—É–∑—á–∏–∫–æ–≤
        this.initUploaders();
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º
        this.setupOccasionDropdown();
        this.setupResultNavigation();
        console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    setupNavigation() {
        if (this.navigationSetup) return;
        console.log('üß≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(btn => {
            // –ö–ª–æ–Ω–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            const newBtn = btn.cloneNode(true);
            btn.parentNode.replaceChild(newBtn, btn);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            newBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                const section = newBtn.id.replace('nav-', ''); // nav-balance -> balance
                console.log('üîÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Å–µ–∫—Ü–∏—é:', section);
                
                // –£–±–∏—Ä–∞–µ–º active —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
                // –î–æ–±–∞–≤–ª—è–µ–º active —Ç–µ–∫—É—â–µ–π
                newBtn.classList.add('active');
                
                // –ù–∞–≤–∏–≥–∏—Ä—É–µ–º
                this.navigateToSection(section);
                this.triggerHapticFeedback('light');
            });
        });
        this.navigationSetup = true;
        console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }

    setupModeButtons() {
        if (this.modeButtonsSetup) return;

        const singleBtn = document.getElementById('single-mode-btn');
        const compareBtn = document.getElementById('compare-mode-btn');
        
        if (singleBtn) {
            const newSingleBtn = singleBtn.cloneNode(true);
            singleBtn.parentNode.replaceChild(newSingleBtn, singleBtn);
            newSingleBtn.addEventListener('click', () => {
                this.triggerHapticFeedback('light');
                this.openSingleModal();
            });
        }

        if (compareBtn) {
            const newCompareBtn = compareBtn.cloneNode(true);
            compareBtn.parentNode.replaceChild(newCompareBtn, compareBtn);
            newCompareBtn.addEventListener('click', () => {
                this.triggerHapticFeedback('light');
                this.openCompareModal();
            });
        }
        
        this.modeButtonsSetup = true;
        console.log('‚úÖ Mode buttons –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    showHomeSection() {
        console.log('üè† –ü–æ–∫–∞–∑ –¥–æ–º–∞—à–Ω–µ–π —Å–µ–∫—Ü–∏–∏');
        
        const container = document.querySelector('.container');
        if (!container) return;
        
        container.innerHTML = `
            <header class="header">
                <h1>‚ú® –ú–ò–®–£–†–ê</h1>
                <p>–¢–≤–æ–π –ª–∏—á–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç –≤ –∫–∞—Ä–º–∞–Ω–µ</p>
            </header>

            <div class="action-buttons">
                <button id="single-mode-btn" class="action-btn">
                    <span class="icon">üì∑</span>
                    –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞
                </button>
                <button id="compare-mode-btn" class="action-btn">
                    <span class="icon">üîÑ</span>
                    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
                </button>
            </div>
        `;
        
        // –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è DOM
        setTimeout(() => {
            this.modeButtonsSetup = false;
            this.setupModeButtons();
        }, 100);
    }

    showHistorySection() {
        console.log('üìö –ü–æ–∫–∞–∑ —Å–µ–∫—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        
        const container = document.querySelector('.container');
        if (!container) return;
        
        const history = this.consultationsHistory.slice(-10).reverse();
        const consultationsRemaining = Math.floor(this.userBalance / 10);
        
        let historyHTML = `
            <header class="header">
                <h1>üìö –ò—Å—Ç–æ—Ä–∏—è</h1>
                <p>–í–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å—Ç–∏–ª–∏—Å—Ç–∞</p>
            </header>
            
            <div class="stats-card" style="
                background: rgba(212, 175, 55, 0.1);
                border: 1px solid var(--border-gold);
                border-radius: 16px;
                padding: 20px;
                margin-bottom: 20px;
                text-align: center;
            ">
                <div style="color: var(--text-gold); font-size: 1.2rem; font-weight: 700; margin-bottom: 6px;">
                    –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ${consultationsRemaining}
                </div>
                <div style="color: var(--text-muted); font-size: 0.9rem;">
                    ${this.userBalance} STcoin
                </div>
            </div>
        `;

        if (history.length === 0) {
            historyHTML += `
                <div style="text-align: center; padding: 40px 20px; color: var(--text-muted);">
                    <div style="font-size: 3rem; margin-bottom: 16px;">üìù</div>
                    <div style="font-size: 1.1rem;">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>
                    <div style="font-size: 0.9rem; margin-top: 8px;">
                        –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!
                    </div>
                </div>
            `;
        } else {
            historyHTML += '<div class="history-list">';
            
            history.forEach((consultation, index) => {
                const date = new Date(consultation.timestamp).toLocaleDateString('ru-RU');
                const time = new Date(consultation.timestamp).toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
                
                historyHTML += `
                    <div class="history-item" style="
                        background: rgba(26, 26, 26, 0.8);
                        border: 1px solid var(--border-light);
                        border-radius: 12px;
                        padding: 16px;
                        margin-bottom: 12px;
                        cursor: pointer;
                        transition: var(--transition);
                    " onclick="window.mishuraApp.viewConsultation(${this.consultationsHistory.length - 1 - index})">
                        <div style="
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                            margin-bottom: 8px;
                        ">
                            <span style="
                                color: var(--text-gold);
                                font-weight: 600;
                                text-transform: uppercase;
                                font-size: 0.9rem;
                            ">${consultation.occasion}</span>
                            <span style="
                                color: var(--text-muted);
                                font-size: 0.8rem;
                            ">${date} ${time}</span>
                        </div>
                        <div style="
                            color: var(--text-light);
                            font-size: 0.9rem;
                            line-height: 1.4;
                            display: -webkit-box;
                            -webkit-line-clamp: 2;
                            -webkit-box-orient: vertical;
                            overflow: hidden;
                        ">
                            ${consultation.advice.replace(/<[^>]*>/g, '').substring(0, 100)}...
                        </div>
                    </div>
                `;
            });
            
            historyHTML += '</div>';
        }

        container.innerHTML = historyHTML;
    }

    navigateToSection(section) {
        console.log('üß≠ app.js: –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Å–µ–∫—Ü–∏—é:', section);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        document.querySelectorAll('.nav-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        const targetBtn = document.getElementById(`nav-${section}`);
        if (targetBtn) {
            targetBtn.classList.add('active');
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ–∫—Ü–∏—é
        this.currentSection = section;
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—ã
        this.closeModal();
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é
        if (window.MishuraApp && 
            window.MishuraApp.components && 
            window.MishuraApp.components.navigation) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            window.MishuraApp.components.navigation.navigateTo(section);
        } else {
            // Fallback –Ω–∞ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤
            console.log('üìÑ –ü—Ä—è–º–æ–π –ø–æ–∫–∞–∑ —Å–µ–∫—Ü–∏–∏:', section);
            this.showSection(section);
        }
    }

    showSection(section) {
        console.log('üìÑ –ü–æ–∫–∞–∑ —Å–µ–∫—Ü–∏–∏:', section);
        switch (section) {
            case 'home':
                this.showHomeSection();
                break;
            case 'history':
                this.showHistorySection();
                break;
            case 'balance':
                this.showBalanceSection();
                break;
            default:
                console.warn('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è:', section);
        }
    }

    async showBalanceSection() {
        console.log('üí∞ –ü–û–ö–ê–ó –°–ï–ö–¶–ò–ò –ë–ê–õ–ê–ù–°–ê –° –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï–ú');
        
        const container = document.querySelector('.container');
        if (!container) return;
        
        const consultationsRemaining = Math.floor(this.userBalance / 10);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        container.innerHTML = `
            <div class="balance-card" style="
                background: var(--gold-gradient);
                color: var(--text-dark);
                border-radius: 20px;
                padding: 24px;
                margin-bottom: 24px;
                text-align: center;
                box-shadow: var(--shadow-gold);
            ">
                <div style="font-size: 2.5rem; font-weight: 900; margin-bottom: 8px;" data-balance-display>
                    ${this.userBalance}
                </div>
                <div style="font-size: 1.1rem; font-weight: 600; text-transform: uppercase;">
                    STcoin
                </div>
                <div style="font-size: 0.9rem; margin-top: 8px; opacity: 0.8;">
                    –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: <span data-consultations-display>${consultationsRemaining}</span>
                </div>
            </div>
            
            <div class="usage-stats" style="
                background: rgba(26, 26, 26, 0.8);
                border: 1px solid var(--border-light);
                border-radius: 16px;
                padding: 20px;
                margin-bottom: 24px;
            ">
                <h3 style="
                    color: var(--text-gold);
                    margin-bottom: 16px;
                    text-transform: uppercase;
                    letter-spacing: 1px;
                    font-size: 1rem;
                ">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</h3>
                
                <div style="display: flex; justify-content: space-between; margin-bottom: 12px;">
                    <span style="color: var(--text-muted);">–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:</span>
                    <span style="color: var(--text-light); font-weight: 600;">${this.consultationsHistory.length}</span>
                </div>
                
                <div style="display: flex; justify-content: space-between; margin-bottom: 12px;">
                    <span style="color: var(--text-muted);">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ STcoin:</span>
                    <span style="color: var(--text-light); font-weight: 600;">${this.consultationsUsed}</span>
                </div>
                
                <div style="display: flex; justify-content: space-between;">
                    <span style="color: var(--text-muted);">–û—Å—Ç–∞—Ç–æ–∫ STcoin:</span>
                    <span style="color: var(--text-gold); font-weight: 600;" data-balance-display>${this.userBalance}</span>
                </div>
            </div>
            
            <!-- –ö–ù–û–ü–ö–ò –í–ù–ò–ó–£ -->
            <div class="balance-actions">
                <button class="action-btn" onclick="window.mishuraApp.showPaymentModal()" style="
                    width: 100%;
                    margin-bottom: 16px;
                    background: rgba(26, 26, 26, 0.8);
                    border: 2px solid var(--border-gold);
                    color: var(--text-gold);
                    padding: 20px;
                    font-size: 1.1rem;
                ">
                    <span style="margin-right: 8px;">üí≥</span>
                    –ü–æ–ø–æ–ª–Ω–∏—Ç—å STcoin
                </button>
                
                <button class="action-btn" onclick="window.open('https://t.me/marketolog_online', '_blank')" style="
                    width: 100%;
                    margin-bottom: 16px;
                    background: rgba(26, 26, 26, 0.8);
                    border: 2px solid rgba(0, 123, 255, 0.5);
                    color: #007bff;
                        padding: 20px;
                    font-size: 1.1rem;
                ">
                    <span style="margin-right: 8px;">üí¨</span>
                    –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                </button>
            </div>
        `;

        // –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–ï: –°—Ä–∞–∑—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–µ–∫—Ü–∏—é
        console.log('üîÑ –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–µ–∫—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞...');
        setTimeout(async () => {
            await this.refreshBalance();
        }, 500);
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –í–æ–∑–≤—Ä–∞—Ç –≤ —Å–µ–∫—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    async checkForSuccessfulPayment() {
        const urlParams = new URLSearchParams(window.location.search);
        const paymentSuccess = urlParams.get('payment_success');
        const urlUserId = urlParams.get('user_id');
        const returnTo = urlParams.get('return_to');
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã:', { paymentSuccess, urlUserId, returnTo });

        if (paymentSuccess === '1' && urlUserId) {
            const numericUserId = parseInt(urlUserId);
            if (numericUserId === this.getCurrentUserId()) {
                console.log('üéâ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É...');
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–µ–∫—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞
                setTimeout(() => {
                    console.log('üéØ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–µ–∫—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞');
                    this.navigateToSection('balance');
                }, 500);
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                setTimeout(async () => {
                    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...');
                    const oldBalance = this.userBalance;
                    
                    try {
                        const response = await fetch(`${API_BASE_URL}/api/v1/users/${numericUserId}/balance?_t=${Date.now()}`);
                        if (response.ok) {
                            const balanceData = await response.json();
                            const newBalance = balanceData.balance;
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                            this.userBalance = newBalance;
                            this.saveUserData();
                            
                            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                            this.updateBalanceDisplay(newBalance);
                            
                            const difference = newBalance - oldBalance;
                            if (difference > 0) {
                                this.showNotification(`üéâ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${difference} STcoin!`, 'success', 5000);
                                this.triggerHapticFeedback('success');
                            }
                            
                            console.log(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${oldBalance} ‚Üí ${newBalance} STcoin`);
                        }
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
                        // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                        setTimeout(() => this.forceSyncBalance(), 5000);
                    }
                }, 2000);
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—á–∏—â–∞–µ–º URL –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
                setTimeout(() => {
                    const newUrl = window.location.origin + window.location.pathname;
                    window.history.replaceState({}, document.title, newUrl);
                }, 3000);
            }
        }
    }

    // === –ù–ê–í–ò–ì–ê–¶–ò–Ø ===

    setupCloseButtons() {
        if (this.eventListenersAttached) return;

        document.addEventListener('click', (event) => {
            if (event.target.matches('#consultation-cancel, .close-btn, #form-cancel')) {
                this.closeModal();
                this.triggerHapticFeedback('light');
            }
        });
    }

    setupSubmitButton() {
        if (this.submitButtonSetup) return;

        document.addEventListener('click', (event) => {
            if (event.target.matches('#form-submit')) {
                event.preventDefault();
                this.submit();
            }
        });
        
        document.addEventListener('input', (event) => {
            if (['occasion', 'preferences'].includes(event.target.id)) {
                this.updateSubmitButton();
            }
        });

        this.submitButtonSetup = true;
    }

    setupOccasionDropdown() {
        if (this.occasionDropdownSetup) return;

        document.addEventListener('click', (event) => {
            const occasionInput = document.getElementById('occasion');
            const optionsContainer = document.getElementById('occasion-options');
            
            if (!occasionInput || !optionsContainer) return;
            
            if (event.target === occasionInput) {
                if (optionsContainer.children.length === 0) {
                    this.occasionOptions.forEach(option => {
                        const optionElement = document.createElement('div');
                        optionElement.className = 'occasion-option';
                        optionElement.textContent = option;
                        optionElement.addEventListener('click', () => {
                            occasionInput.value = option;
                            optionsContainer.classList.remove('active');
                            this.updateSubmitButton();
                            this.triggerHapticFeedback('light');
                        });
                        optionsContainer.appendChild(optionElement);
                    });
                }
                
                optionsContainer.classList.toggle('active');
                this.triggerHapticFeedback('light');
            } else if (!event.target.closest('.occasion-dropdown')) {
                optionsContainer.classList.remove('active');
            }
        });

        this.occasionDropdownSetup = true;
    }

    setupResultNavigation() {
        document.addEventListener('click', (event) => {
            if (event.target.matches('#result-back')) {
                this.backToSelection();
            } else if (event.target.matches('#result-new')) {
                this.startNewAnalysis();
            }
        });
    }

    backToSelection() {
        this.hideResult();
        
        if (this.currentMode === 'single') {
            const singleMode = document.getElementById('single-mode');
            if (singleMode) singleMode.classList.add('active');
        } else if (this.currentMode === 'compare') {
            const compareMode = document.getElementById('compare-mode');
            if (compareMode) compareMode.classList.add('active');
        }
        
        if ((this.currentMode === 'single' && this.singleImage) || 
            (this.currentMode === 'compare' && this.compareImages.filter(img => img !== null).length >= 2)) {
            this.showForm();
        }
    }

    startNewAnalysis() {
        this.closeModal();
    }

    setupTelegramIntegration() {
        if (window.Telegram && window.Telegram.WebApp) {
            const tg = window.Telegram.WebApp;
            tg.ready();
            tg.expand();
            tg.MainButton.setText('–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é');
            tg.MainButton.show();
            
            tg.MainButton.onClick(() => {
                if (this.currentSection === 'home') {
                    this.openSingleModal();
                } else {
                    this.navigateToSection('home');
                }
            });
        }
    }

    triggerHapticFeedback(type = 'light') {
        try {
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
                const feedback = window.Telegram.WebApp.HapticFeedback;
                switch (type) {
                    case 'light': feedback.impactOccurred('light'); break;
                    case 'medium': feedback.impactOccurred('medium'); break;
                    case 'heavy': feedback.impactOccurred('heavy'); break;
                    case 'success': feedback.notificationOccurred('success'); break;
                    case 'warning': feedback.notificationOccurred('warning'); break;
                    case 'error': feedback.notificationOccurred('error'); break;
                }
            }
        } catch (error) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ haptic feedback
        }
    }

    // === –ü–õ–ê–¢–ï–ñ–ò (–û–°–ù–û–í–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø) ===
    
    showPaymentModal() {
        if (!window.PRICING_PLANS) {
            this.showNotification('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã...', 'info');
            return;
        }

        const modal = document.createElement('div');
        modal.className = 'modal-overlay active';
        modal.id = 'payment-modal';
        
        let packagesHTML = '';
        Object.entries(window.PRICING_PLANS).forEach(([planId, plan]) => {
            const isPopular = plan.popular;
            packagesHTML += `
                <div class="pricing-card ${isPopular ? 'popular' : ''}" 
                     onclick="window.mishuraApp.initiatePayment('${planId}')"
                     style="
                        background: ${isPopular ? 'rgba(212, 175, 55, 0.1)' : 'rgba(26, 26, 26, 0.8)'};
                        border: 2px solid ${isPopular ? 'var(--border-gold)' : 'var(--border-light)'};
                        border-radius: 16px;
                        padding: 20px;
                        margin-bottom: 16px;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        position: relative;
                     ">
                    ${isPopular ? '<div style="position: absolute; top: -8px; right: 16px; background: var(--gold-gradient); color: var(--text-dark); padding: 4px 12px; border-radius: 12px; font-size: 0.8rem; font-weight: 600;">üî• –ü–û–ü–£–õ–Ø–†–ù–´–ô</div>' : ''}
                    
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;">
                        <h3 style="color: var(--text-gold); margin: 0; font-size: 1.2rem;">${plan.name}</h3>
                        <div style="color: var(--text-light); font-size: 1.5rem; font-weight: 700;">${plan.price}‚ÇΩ</div>
                    </div>
                    
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="color: var(--text-light);">
                            <span style="font-size: 1.1rem; font-weight: 600;">${plan.stcoins}</span>
                            <span style="color: var(--text-muted); margin-left: 4px;">STcoin</span>
                        </div>
                        <div style="color: var(--text-muted); font-size: 0.9rem;">
                            ${plan.consultations} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
                        </div>
                    </div>
                </div>
            `;
        });

        modal.innerHTML = `
            <div class="modal-content" style="max-width: 500px;">
                <div class="modal-header">
                    <h2 class="modal-title">üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ STcoin</h2>
                    <button class="close-btn" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <div style="
                        background: rgba(212, 175, 55, 0.1);
                        border: 1px solid var(--border-gold);
                        border-radius: 12px;
                        padding: 16px;
                        margin-bottom: 20px;
                        text-align: center;
                    ">
                        <div style="color: var(--text-gold); font-weight: 600; margin-bottom: 8px;">
                            üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa
                        </div>
                        <div style="color: var(--text-light); font-size: 0.9rem;">
                            –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—ã Visa, MasterCard, –ú–ò–†, –°–ë–ü –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
                        </div>
                    </div>
                    
                    <div class="payment-packages">
                        ${packagesHTML}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        this.triggerHapticFeedback('light');
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π return_url –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    async initiatePayment(planId) {
        const plan = window.PRICING_PLANS[planId];
        if (!plan) {
            this.showNotification('‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        try {
            this.showNotification('üí≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...', 'info');
            
            const userId = this.getUserId();
            console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, '–ø–ª–∞–Ω:', planId);
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π return_url –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ —Å–µ–∫—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞
            const baseUrl = window.location.origin + window.location.pathname;
            const returnUrl = `${baseUrl}?payment_success=1&user_id=${userId}&return_to=balance`;
            
            const paymentData = {
                telegram_id: userId,
                plan_id: planId,
                username: 'webapp_user',
                first_name: 'WebApp',
                last_name: 'User',
                return_url: returnUrl
            };
            
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', paymentData);
            
            const response = await fetch(`${API_BASE_URL}/api/v1/payments/create`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(paymentData)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

            if (result.payment_url) {
                this.showNotification('üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...', 'success');
                console.log('üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º URL:', result.payment_url);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
                const paymentModal = document.getElementById('payment-modal');
                if (paymentModal) {
                    paymentModal.remove();
                }
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í TEST_MODE –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–Ω–µ—à–Ω–∏–π URL, –∞ —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
                if (result.debug_info && result.debug_info.test_mode) {
                    console.log('üß™ TEST MODE: –∏–º–∏—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã');
                    
                    // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ–∑–≤—Ä–∞—Ç —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                    setTimeout(() => {
                        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ URL
                        const newUrl = returnUrl;
                        window.history.pushState({}, document.title, newUrl);
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
                        this.checkForSuccessfulPayment();
                    }, 2000);
                    
                } else {
                    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                    window.location.href = result.payment_url;
                }
                
            } else {
                throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω URL –¥–ª—è –æ–ø–ª–∞—Ç—ã');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
            this.showNotification(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error', 5000);
        }
    }

    // === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===
    
    openSingleModal() {
        this.currentMode = 'single';
        const modalTitle = document.getElementById('modal-title');
        if (modalTitle) {
            modalTitle.textContent = '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞';
        }
        this.showModal('single-mode');
    }

    openCompareModal() {
        this.currentMode = 'compare';
        const modalTitle = document.getElementById('modal-title');
        if (modalTitle) {
            modalTitle.textContent = '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤';
        }
        this.showModal('compare-mode');
    }

    showModal(mode) {
        const overlay = document.getElementById('consultation-overlay');
        const modes = document.querySelectorAll('.upload-mode');
        
        modes.forEach(m => m.classList.remove('active'));
        const targetMode = document.getElementById(mode);
        if (targetMode) {
            targetMode.classList.add('active');
        }
        
        if (overlay) {
            overlay.classList.add('active');
        }
        
        this.clearForm();
        this.hideForm();
        this.hideLoading();
        this.hideResult();
    }

    closeModal() {
        const overlay = document.getElementById('consultation-overlay');
        if (overlay) {
            overlay.classList.remove('active');
        }
        this.clearForm();
        this.clearImages();
    }

    clearForm() {
        const occasion = document.getElementById('occasion');
        const preferences = document.getElementById('preferences');
        const options = document.getElementById('occasion-options');
        
        if (occasion) occasion.value = '';
        if (preferences) preferences.value = '';
        if (options) options.classList.remove('active');
        
        this.updateSubmitButton();
    }

    clearImages() {
        this.singleImage = null;
        this.compareImages = [null, null, null, null];
        
        const singlePreview = document.getElementById('single-preview');
        if (singlePreview) {
            singlePreview.innerHTML = '<div class="upload-text">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ</div>';
            singlePreview.classList.remove('has-image');
        }
        
        document.querySelectorAll('.compare-slot').forEach((slot, index) => {
            slot.innerHTML = `
                <span class="slot-number">${index + 1}</span>
                <span class="add-icon">+</span>
            `;
            slot.classList.remove('has-image');
        });
    }

    updateSubmitButton() {
        const submitBtn = document.getElementById('form-submit');
        const occasion = document.getElementById('occasion')?.value?.trim() || '';
        
        let hasImages = false;
        if (this.currentMode === 'single') {
            hasImages = this.singleImage !== null;
        } else if (this.currentMode === 'compare') {
            hasImages = this.compareImages.filter(img => img !== null).length >= 2;
        }
        
        if (submitBtn) {
            submitBtn.disabled = !hasImages || !occasion;
        }
    }

    hideForm() {
        const form = document.getElementById('consultation-form');
        if (form) form.classList.remove('active');
    }

    showForm() {
        const form = document.getElementById('consultation-form');
        if (form) form.classList.add('active');
        this.updateSubmitButton();
    }

    hideLoading() {
        const loading = document.getElementById('loading');
        if (loading) loading.classList.remove('active');
    }

    showLoading() {
        this.isLoading = true;
        
        const sections = {
            loading: true,
            'consultation-form': false,
            result: false
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
    }

    hideResult() {
        const result = document.getElementById('result');
        if (result) result.classList.remove('active');
    }

    showResult(result) {
        this.isLoading = false;
        
        const sections = {
            loading: false,
            'consultation-form': false,
            result: true
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
        
        const normalizedResult = this.normalizeAPIResponse(result);
        
        const content = document.getElementById('result-content');
        if (content) {
            content.innerHTML = this.formatAdvice(normalizedResult.advice);
        }
        
        const resultSection = document.getElementById('result');
        if (resultSection && !resultSection.querySelector('#result-back')) {
            const navButtons = document.createElement('div');
            navButtons.style.cssText = 'display: flex; gap: 12px; justify-content: center; margin-top: 20px;';
            navButtons.innerHTML = `
                <button id="result-back" style="
                    background: var(--bg-tertiary);
                    color: var(--text-primary);
                    border: 1px solid var(--accent-gold);
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-weight: 600;
                    transition: all 0.3s ease;
                ">‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É</button>
                <button id="result-new" style="
                    background: var(--accent-gold);
                    color: var(--bg-primary);
                    border: none;
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-weight: 600;
                    transition: all 0.3s ease;
                ">üÜï –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</button>
            `;
            resultSection.appendChild(navButtons);
        }
        
        const consultation = {
            id: Date.now(),
            type: this.currentMode,
            occasion: document.getElementById('occasion')?.value || '',
            preferences: document.getElementById('preferences')?.value || '',
            advice: normalizedResult.advice,
            timestamp: new Date().toISOString(),
            imagesCount: this.currentMode === 'compare' ? 
                this.compareImages.filter(img => img !== null).length : 1,
            metadata: normalizedResult.metadata || {}
        };
        
        this.deductConsultation(10);
        this.consultationsHistory.push(consultation);
        this.saveUserData();
        
        if (this.userBalance <= 50) {
            setTimeout(() => {
                const consultationsRemaining = Math.floor(this.userBalance / 10);
                this.showNotification(`‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${consultationsRemaining} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π`, 'warning', 4000);
            }, 2000);
        }
    }

    normalizeAPIResponse(response) {
        if (response && typeof response === 'object' && response.advice) {
            return {
                advice: response.advice,
                metadata: response.metadata || {
                    timestamp: new Date().toISOString(),
                    status: response.status || 'success'
                }
            };
        }
        
        if (typeof response === 'string') {
            return {
                advice: response,
                metadata: {
                    timestamp: new Date().toISOString(),
                    status: 'success',
                    source: 'string_response'
                }
            };
        }
        
        if (response && response.message) {
            return {
                advice: response.message,
                metadata: {
                    timestamp: new Date().toISOString(),
                    status: response.status || 'success',
                    source: 'message_field'
                }
            };
        }
        
        return {
            advice: '–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            metadata: {
                timestamp: new Date().toISOString(),
                status: 'warning',
                source: 'fallback'
            }
        };
    }

    showError(message) {
        this.isLoading = false;
        
        const sections = {
            loading: false,
            'consultation-form': true,
            result: false
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
        
        this.showNotification(message, 'error');
    }

    formatAdvice(advice) {
        if (!advice) return '';
        
        let processedAdvice = this.parseMarkdownStructure(advice);
        
        const colorMapping = {
            '—Å–∏–Ω–∏–π': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑', '—Å–∏–Ω–µ–º': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑', '—Å–∏–Ω—è—è': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑',
            '–∫—Ä–∞—Å–Ω—ã–π': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑', '–∫—Ä–∞—Å–Ω–æ–º': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑', '–∫—Ä–∞—Å–Ω–∞—è': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑',
            '–±–µ–ª—ã–π': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑', '–±–µ–ª–æ–º': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑', '–±–µ–ª–∞—è': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑',
            '—á–µ—Ä–Ω—ã–π': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑', '—á–µ—Ä–Ω–æ–º': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑', '—á–µ—Ä–Ω–∞—è': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑'
        };
        
        const descriptionsToRemove = [
            /–ù–∞ –ø–µ—Ä–≤–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ –≤—Ç–æ—Ä–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —Ç—Ä–µ—Ç—å–µ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —á–µ—Ç–≤–µ—Ä—Ç–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —Ñ–æ—Ç–æ.*?–≤—ã.*?–æ–¥–µ—Ç—ã.*?\./gi,
            /–Ø –≤–∏–∂—É.*?—á—Ç–æ.*?–Ω–∞.*?\./gi,
            /–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.*?\./gi
        ];
        
        descriptionsToRemove.forEach(pattern => {
            processedAdvice = processedAdvice.replace(pattern, '');
        });
        
        Object.entries(colorMapping).forEach(([color, title]) => {
            const regex = new RegExp(`(–≤|–Ω–∞)\\s+${color}[–∞-—è]*\\s+(–ø–ª–∞—Ç—å–µ|—Ä—É–±–∞—à–∫–µ|—Ñ—É—Ç–±–æ–ª–∫–µ|–±–ª—É–∑–∫–µ|–∫–æ—Å—Ç—é–º–µ|–∂–∞–∫–µ—Ç–µ|–ø–∏–¥–∂–∞–∫–µ|–±—Ä—é–∫–∞—Ö|–¥–∂–∏–Ω—Å–∞—Ö|—é–±–∫–µ|—à–æ—Ä—Ç–∞—Ö|—Ç–æ–ø–µ|–∫–∞—Ä–¥–∏–≥–∞–Ω–µ|—Å–≤–∏—Ç–µ—Ä–µ|–ø–∞–ª—å—Ç–æ|–∫—É—Ä—Ç–∫–µ)`, 'gi');
            processedAdvice = processedAdvice.replace(regex, `<span class="outfit-title">${title}</span>`);
        });
        
        return processedAdvice;
    }

    parseMarkdownStructure(text) {
        if (!text) return '';
        
        text = text.replace(/^### (.*$)/gm, '<h4>$1</h4>');
        text = text.replace(/^## (.*$)/gm, '<h3>$1</h3>');
        text = text.replace(/^# (.*$)/gm, '<h2>$1</h2>');
        text = text.replace(/\*\*(.*?):\*\*/g, '<h4>$1</h4>');
        text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
        text = text.replace(/^- (.*$)/gm, '<li>$1</li>');
        text = text.replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>');
        
        const paragraphs = text.split('\n\n').filter(p => p.trim());
        let formattedText = '';
        
        paragraphs.forEach(paragraph => {
            paragraph = paragraph.trim();
            if (paragraph) {
                if (paragraph.startsWith('<h') || paragraph.startsWith('<ul') || paragraph.startsWith('<div')) {
                    formattedText += paragraph;
                } else {
                    formattedText += `<p>${paragraph}</p>`;
                }
            }
        });
        
        return formattedText;
    }

    // === –û–¢–ü–†–ê–í–ö–ê –§–û–†–ú ===
    
    async submit() {
        if (this.isLoading) return;
        
        const occasion = document.getElementById('occasion')?.value?.trim() || '';
        const preferences = document.getElementById('preferences')?.value?.trim() || '';
        
        if (!occasion) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–≤–æ–¥', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        if (this.userBalance < 10) {
            this.showNotification('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ STcoin! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        this.analytics.analysisRequested++;
        
        if (this.currentMode === 'single') {
            await this.submitSingle(occasion, preferences);
        } else if (this.currentMode === 'compare') {
            await this.submitCompare(occasion, preferences);
        }
    }

    async submitSingle(occasion, preferences) {
        if (!this.singleImage) {
            this.showNotification('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        if (!this.api) {
            this.showNotification('‚ùå API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        this.showLoading();
        this.triggerHapticFeedback('medium');
        
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => {
                reject(new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (${this.requestTimeout / 1000} —Å–µ–∫)`));
            }, this.requestTimeout);
        });
        
        try {
            const apiPromise = this.api.analyzeSingle(this.singleImage, occasion, preferences);
            const result = await Promise.race([apiPromise, timeoutPromise]);
            
            if (!result) {
                throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
            }
            
            this.lastAnalysisResult = result;
            this.analytics.successfulAnalysis++;
            this.showResult(result);
            this.triggerHapticFeedback('success');
            
        } catch (error) {
            this.analytics.errors++;
            
            let errorMessage = '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞';
            
            if (error.message.includes('timeout') || error.message.includes('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è')) {
                errorMessage = '–ê–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
            } else if (error.message.includes('—Å–µ—Ç–∏') || error.message.includes('network')) {
                errorMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
            } else if (error.message.includes('API')) {
                errorMessage = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
            } else {
                errorMessage = `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`;
            }
            
            this.showError(errorMessage);
            this.triggerHapticFeedback('error');
        }
    }

    async submitCompare(occasion, preferences) {
        const images = this.compareImages.filter(img => img !== null);
        
        if (images.length < 2) {
            this.showNotification('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        if (!this.api) {
            this.showNotification('‚ùå API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        this.showLoading();
        this.triggerHapticFeedback('medium');
        
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => {
                reject(new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (${this.requestTimeout / 1000} —Å–µ–∫)`));
            }, this.requestTimeout);
        });
        
        try {
            const apiPromise = this.api.analyzeCompare(images, occasion, preferences);
            const result = await Promise.race([apiPromise, timeoutPromise]);
            
            if (!result) {
                throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            }
            
            this.lastAnalysisResult = result;
            this.analytics.successfulAnalysis++;
            this.showResult(result);
            this.triggerHapticFeedback('success');
            
        } catch (error) {
            this.analytics.errors++;
            
            let errorMessage = '–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è';
            
            if (error.message.includes('timeout') || error.message.includes('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è')) {
                errorMessage = '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.';
            } else if (error.message.includes('—Ä–∞–∑–º–µ—Ä') || error.message.includes('size')) {
                errorMessage = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.';
            } else {
                errorMessage = `–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${error.message}`;
            }
            
            this.showError(errorMessage);
            this.triggerHapticFeedback('error');
        }
    }

    // === –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
    
    showNotification(message, type = 'info', duration = 3000) {
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notif => notif.remove());
        
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        
        const icons = {
            'success': '‚úÖ',
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        };
        
        const colors = {
            'success': '#10B981',
            'error': '#EF4444',
            'warning': '#F59E0B',
            'info': '#3B82F6'
        };
        
        notification.innerHTML = `
            <div style="
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: ${colors[type]};
                color: white;
                padding: 12px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 10000;
                font-weight: 600;
                display: flex;
                align-items: center;
                gap: 8px;
                max-width: 90vw;
                animation: slideInDown 0.3s ease;
            ">
                <span>${icons[type]}</span>
                <span>${message}</span>
            </div>
        `;
        
        if (!document.getElementById('notification-styles')) {
            const styles = document.createElement('style');
            styles.id = 'notification-styles';
            styles.textContent = `
                @keyframes slideInDown {
                    from {
                        opacity: 0;
                        transform: translateX(-50%) translateY(-100%);
                    }
                    to {
                        opacity: 1;
                        transform: translateX(-50%) translateY(0);
                    }
                }
                
                @keyframes slideOutUp {
                    from {
                        opacity: 1;
                        transform: translateX(-50%) translateY(0);
                    }
                    to {
                        opacity: 0;
                        transform: translateX(-50%) translateY(-100%);
                    }
                }
            `;
            document.head.appendChild(styles);
        }
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            const notificationElement = notification.querySelector('div');
            if (notificationElement) {
                notificationElement.style.animation = 'slideOutUp 0.3s ease forwards';
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }
        }, duration);
    }

    // === DRAG & DROP ===
    
    setupDragAndDrop() {
        if (this.dragDropSetup) return;

        const singlePreview = document.getElementById('single-preview');
        if (singlePreview) {
            this.setupDragDropForElement(singlePreview, (file) => {
                this.handleSingleFile(file);
            });
        }
        
        document.querySelectorAll('.compare-slot').forEach((slot, index) => {
            this.setupDragDropForElement(slot, (file) => {
                this.handleCompareFile(file, index);
            });
        });
        
        this.dragDropSetup = true;
    }

    setupDragDropForElement(element, onDrop) {
        ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
            element.addEventListener(eventName, this.preventDefaults, false);
        });

        ['dragenter', 'dragover'].forEach(eventName => {
            element.addEventListener(eventName, () => {
                element.classList.add('drag-over');
            }, false);
        });

        ['dragleave', 'drop'].forEach(eventName => {
            element.addEventListener(eventName, () => {
                element.classList.remove('drag-over');
            }, false);
        });

        element.addEventListener('drop', (e) => {
            const files = e.dataTransfer.files;
            if (files.length > 0) {
                onDrop(files[0]);
            }
        }, false);
    }

    preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
    }

    setupKeyboardShortcuts() {
        if (this.keyboardSetup) return;

        document.addEventListener('keydown', (event) => {
            if (event.key === 'Escape') {
                this.closeModal();
            }
            
            if (event.key === 'Enter' && event.ctrlKey) {
                const submitBtn = document.getElementById('form-submit');
                if (submitBtn && !submitBtn.disabled) {
                    this.submit();
                }
            }
            
            if (event.key === 's' || event.key === '—ã') {
                if (this.currentSection === 'home' && !document.querySelector('.modal-overlay.active')) {
                    this.openSingleModal();
                }
            }
            
            if (event.key === 'c' || event.key === '—Å') {
                if (this.currentSection === 'home' && !document.querySelector('.modal-overlay.active')) {
                    this.openCompareModal();
                }
            }
        });
        
        this.keyboardSetup = true;
    }

    setupContextMenu() {
        if (this.contextMenuSetup) return;

        document.addEventListener('contextmenu', (event) => {
            if (event.target.closest('.upload-preview, .compare-slot img')) {
                event.preventDefault();
                this.showImageContextMenu(event);
            }
        });

        this.contextMenuSetup = true;
    }

    showImageContextMenu(event) {
        const menu = document.createElement('div');
        menu.style.cssText = `
            position: fixed;
            top: ${event.clientY}px;
            left: ${event.clientX}px;
            background: var(--secondary-black);
            border: 1px solid var(--border-gold);
            border-radius: 8px;
            padding: 8px 0;
            z-index: 10000;
            min-width: 150px;
            box-shadow: var(--shadow-black);
        `;
        
        const actions = [
            { text: 'üîÑ –ó–∞–º–µ–Ω–∏—Ç—å', action: () => this.replaceImage(event.target) },
            { text: '‚ùå –£–¥–∞–ª–∏—Ç—å', action: () => this.removeImage(event.target) }
        ];
        
        actions.forEach(({ text, action }) => {
            const item = document.createElement('div');
            item.textContent = text;
            item.style.cssText = `
                padding: 8px 16px;
                cursor: pointer;
                color: var(--text-light);
                transition: background-color 0.2s;
            `;
            
            item.addEventListener('mouseenter', () => {
                item.style.backgroundColor = 'rgba(212, 175, 55, 0.1)';
            });
            
            item.addEventListener('mouseleave', () => {
                item.style.backgroundColor = 'transparent';
            });
            
            item.addEventListener('click', () => {
                action();
                menu.remove();
            });
            
            menu.appendChild(item);
        });
        
        document.body.appendChild(menu);
        
        setTimeout(() => {
            document.addEventListener('click', () => menu.remove(), { once: true });
        }, 100);
    }

    replaceImage(imgElement) {
        const slot = imgElement.closest('.compare-slot');
        if (slot) {
            const slotIndex = parseInt(slot.dataset.slot);
            const fileInput = document.getElementById(`compare-file-input-${slotIndex}`);
            if (fileInput) fileInput.click();
        } else {
            const fileInput = document.getElementById('single-file-input');
            if (fileInput) fileInput.click();
        }
    }

    removeImage(imgElement) {
        const slot = imgElement.closest('.compare-slot');
        if (slot) {
            const slotIndex = parseInt(slot.dataset.slot);
            this.compareImages[slotIndex] = null;
            slot.innerHTML = `
                <span class="slot-number">${slotIndex + 1}</span>
                <span class="add-icon">+</span>
            `;
            slot.classList.remove('has-image');
        } else {
            this.singleImage = null;
            const preview = document.getElementById('single-preview');
            if (preview) {
                preview.innerHTML = '<div class="upload-text">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ</div>';
                preview.classList.remove('has-image');
            }
        }
        
        this.updateSubmitButton();
        this.triggerHapticFeedback('light');
    }

    // === –ó–ê–ì–†–£–ó–ß–ò–ö–ò –§–ê–ô–õ–û–í ===
    
    initUploaders() {
        this.setupSingleUploader();
        this.setupCompareUploader();
    }

    setupSingleUploader() {
        const preview = document.getElementById('single-preview');
        const fileInput = document.getElementById('single-file-input');
        
        if (preview && fileInput) {
            preview.addEventListener('click', () => {
                fileInput.click();
            });
            
            fileInput.addEventListener('change', (event) => {
                const file = event.target.files[0];
                if (file) {
                    this.handleSingleFile(file);
                }
            });
        }
    }

    setupCompareUploader() {
        const slots = document.querySelectorAll('.compare-slot');
        
        slots.forEach((slot, i) => {
            if (!slot.id) {
                slot.id = `compare-slot-${i}`;
            }
            
            const fileInput = document.getElementById(`compare-file-input-${i}`);
            
            if (slot && fileInput) {
                const newSlot = slot.cloneNode(true);
                slot.parentNode.replaceChild(newSlot, slot);
                
                newSlot.addEventListener('click', () => {
                    fileInput.click();
                });
                
                fileInput.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    if (file) {
                        this.handleCompareFile(file, i);
                    }
                    event.target.value = '';
                });
            }
        });
    }

    handleSingleFile(file) {
        if (!this.validateFile(file)) return;
        
        this.singleImage = file;
        
        const reader = new FileReader();
        reader.onload = (e) => {
            const preview = document.getElementById('single-preview');
            if (preview) {
                preview.innerHTML = `<img src="${e.target.result}" alt="Preview" style="
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    border-radius: 12px;
                ">`;
                preview.classList.add('has-image');
            }
            
            this.showForm();
            this.updateSubmitButton();
            this.triggerHapticFeedback('light');
        };
        
        reader.readAsDataURL(file);
    }

    handleCompareFile(file, slotIndex) {
        if (!this.validateFile(file)) return;
        
        this.compareImages[slotIndex] = file;
        
        const reader = new FileReader();
        reader.onload = (e) => {
            const slot = document.getElementById(`compare-slot-${slotIndex}`);
            if (slot) {
                slot.innerHTML = `<img src="${e.target.result}" alt="Compare ${slotIndex + 1}" style="
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    border-radius: 12px;
                ">`;
                slot.classList.add('has-image');
            }
            
            const loadedImages = this.compareImages.filter(img => img !== null).length;
            if (loadedImages >= 2) {
                this.showForm();
            }
            
            this.updateSubmitButton();
            this.triggerHapticFeedback('light');
        };
        
        reader.readAsDataURL(file);
    }

    validateFile(file) {
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        if (!allowedTypes.includes(file.type)) {
            this.showNotification('‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ JPEG, PNG –∏ WebP —Ñ–æ—Ä–º–∞—Ç—ã', 'error');
            this.triggerHapticFeedback('error');
            return false;
        }
        
        const maxSize = 10 * 1024 * 1024; // 10MB
        if (file.size > maxSize) {
            this.showNotification('‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB', 'error');
            this.triggerHapticFeedback('error');
            return false;
        }
        
        return true;
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò ===
    
    loadUserData() {
        try {
            const data = JSON.parse(localStorage.getItem('mishura_user_data') || '{}');
            this.userBalance = data.balance || 200;
            this.consultationsHistory = data.history || [];
            this.consultationsUsed = data.used || 0;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            this.initializeUserData();
        }
    }

    saveUserData() {
        try {
            const data = {
                balance: this.userBalance,
                history: this.consultationsHistory,
                used: this.consultationsUsed,
                lastSaved: Date.now(),
                syncState: {
                    lastSync: this.syncState.lastSyncTime,
                    deviceId: this.syncState.deviceId,
                    userId: this.syncState.userId
                }
            };
            
            localStorage.setItem('mishura_user_data', JSON.stringify(data));
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
    }

    initializeUserData() {
        this.userBalance = 200;
        this.consultationsHistory = [];
        this.consultationsUsed = 0;
        this.saveUserData();
        this.showNotification('üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –£ –≤–∞—Å 200 STcoin!', 'success', 5000);
    }

    viewConsultation(index) {
        const consultation = this.consultationsHistory[index];
        if (!consultation) return;
        
        const modal = document.createElement('div');
        modal.className = 'modal-overlay active';
        modal.innerHTML = `
            <div class="modal-content" style="max-width: 500px;">
                <div class="modal-header">
                    <h2 class="modal-title">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #${index + 1}</h2>
                    <button class="close-btn" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                
                <div style="margin-bottom: 20px;">
            <div style="
                        background: rgba(212, 175, 55, 0.1);
                        border: 1px solid var(--border-gold);
                        border-radius: 12px;
                        padding: 16px;
                        margin-bottom: 16px;
                    ">
                        <div style="color: var(--text-gold); font-weight: 600; margin-bottom: 8px;">
                            üìÖ ${new Date(consultation.timestamp).toLocaleString('ru-RU')}
            </div>
                        <div style="color: var(--text-light); margin-bottom: 4px;">
                            <strong>–ü–æ–≤–æ–¥:</strong> ${consultation.occasion}
                        </div>
                        ${consultation.preferences ? `
                            <div style="color: var(--text-light);">
                                <strong>–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:</strong> ${consultation.preferences}
                            </div>
                        ` : ''}
                    </div>
                    
                    <div class="result-content">
                        ${consultation.advice}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        this.triggerHapticFeedback('light');
    }

    // === –£–¢–ò–õ–ò–¢–´ ===
    
    getAnalytics() {
        return {
            ...this.analytics,
            uptime: Date.now() - this.analytics.appStartTime,
            userBalance: this.userBalance,
            consultationsTotal: this.consultationsHistory.length,
            currentMode: this.currentMode,
            currentSection: this.currentSection,
            apiStatus: this.api ? 'connected' : 'disconnected',
            isMockAPI: this.api && this.api.isMock || false,
            syncStatus: {
                userId: this.syncState.userId,
                deviceId: this.syncState.deviceId,
                isOnline: this.syncState.isOnline,
                lastSync: this.syncState.lastSyncTime,
                pendingChanges: this.syncState.pendingChanges.length,
                syncCount: this.analytics.syncCount,
                syncErrors: this.analytics.syncErrors
            }
        };
    }

    reset() {
        this.stopPeriodicSync();
        this.closeModal();
        this.clearImages();
        this.currentMode = null;
        this.isLoading = false;
        this.lastAnalysisResult = null;
        this.currentPayment = null;
        
        if (this.paymentCheckInterval) {
            clearInterval(this.paymentCheckInterval);
            this.paymentCheckInterval = null;
        }
        
        this.syncState.syncInProgress = false;
        this.syncState.pendingChanges = [];
        this.navigateToSection('home');
        this.startPeriodicSync();
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    diagnose() {
        console.log('üîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:');
        console.log('- API —Ç–∏–ø:', this.api ? this.api.constructor.name : '–ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù');
        console.log('- API_BASE_URL:', API_BASE_URL);
        console.log('- USER_ID:', this.getCurrentUserId());
        console.log('- –¢–µ–∫—É—â–∞—è —Å–µ–∫—Ü–∏—è:', this.currentSection);
        console.log('- PRICING_PLANS –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', Object.keys(window.PRICING_PLANS || {}).length > 0);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
        fetch(`${API_BASE_URL}/api/v1/health`)
            .then(res => res.json())
            .then(data => console.log('- API –∑–¥–æ—Ä–æ–≤—å–µ:', data))
            .catch(err => console.error('- API –æ—à–∏–±–∫–∞:', err));
            
        return {
            apiType: this.api ? this.api.constructor.name : '–ù–ï –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù',
            baseUrl: API_BASE_URL,
            userId: this.getCurrentUserId(),
            section: this.currentSection,
            plansLoaded: Object.keys(window.PRICING_PLANS || {}).length > 0
        };
    }

    generateDeviceId() {
        try {
            let deviceId = localStorage.getItem('device_id');
            if (!deviceId) {
                const components = [
                    navigator.userAgent, navigator.language,
                    screen.width + 'x' + screen.height,
                    new Date().getTimezoneOffset(),
                    Date.now(), Math.random()
                ];
                const hash = components.join('|').split('').reduce((a, b) => {
                    a = ((a << 5) - a) + b.charCodeAt(0);
                    return a & a;
                }, 0);
                deviceId = `dev_${Math.abs(hash)}_${Date.now()}`;
                localStorage.setItem('device_id', deviceId);
            }
            return deviceId;
        } catch (e) {
            return `temp_${Date.now()}_${Math.random()}`;
        }
    }

    getCurrentUserId() {
        // –ü–æ–ª—É—á–µ–Ω–∏–µ user_id –∏–∑ URL –∏–ª–∏ Telegram
        const urlParams = new URLSearchParams(window.location.search);
        const urlUserId = urlParams.get('user_id');
        if (urlUserId && !isNaN(urlUserId)) {
            return parseInt(urlUserId);
        }
        
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe?.user?.id) {
            return window.Telegram.WebApp.initDataUnsafe.user.id;
        }
        
        return 5930269100; // Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    }

    setupNetworkMonitoring() {
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
        window.addEventListener('online', () => {
            this.syncState.isOnline = true;
        });
        window.addEventListener('offline', () => {
            this.syncState.isOnline = false;
        });
    }

    startPeriodicSync() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        console.log('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤ —Ñ–æ–Ω–µ –∞–∫—Ç–∏–≤–Ω–∞');
    }

    stopPeriodicSync() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    }

    addPendingChange(type, data) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è pending changes
    }

    syncWithServer(force = false) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        return Promise.resolve();
    }

    async forceSyncBalance() {
        try {
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞...');
            
            const userId = this.getCurrentUserId();
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞
            const response = await fetch(`${API_BASE_URL}/api/v1/users/${userId}/balance`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
            
            const balanceData = await response.json();
            const newBalance = balanceData.balance || 0;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
            const oldBalance = this.userBalance;
            this.userBalance = newBalance;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            this.saveUserData();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            this.updateBalanceDisplay(newBalance);
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å –∏–∑–º–µ–Ω–∏–ª—Å—è
            if (newBalance !== oldBalance) {
                const difference = newBalance - oldBalance;
                if (difference > 0) {
                    this.showNotification(
                        `üéâ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${difference} STcoin! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`, 
                        'success', 
                        5000
                    );
                    this.triggerHapticFeedback('success');
                } else if (difference < 0) {
                    this.showNotification(
                        `üí∏ –°–ø–∏—Å–∞–Ω–æ ${Math.abs(difference)} STcoin. –û—Å—Ç–∞—Ç–æ–∫: ${newBalance}`, 
                        'info', 
                        3000
                    );
                }
            }
            
            console.log(`üí∞ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${oldBalance} ‚Üí ${newBalance} STcoin`);
            
            return {
                oldBalance,
                newBalance,
                difference: newBalance - oldBalance,
                success: true
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', 'error');
            
            return {
                success: false,
                error: error.message
            };
        }
    }

    async refreshBalance() {
        try {
            console.log('üîÑ === –û–¢–õ–ê–î–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê ===');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showNotification('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å...', 'info', 2000);
            
            const currentUserId = this.getCurrentUserId();
            console.log('üë§ User ID:', currentUserId);
            
            // –û–¢–õ–ê–î–ö–ê: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é
            const directBalanceURL = `${API_BASE_URL}/api/v1/users/${currentUserId}/balance?_t=${Date.now()}`;
            console.log('üåê –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞:', directBalanceURL);
            
            const directResponse = await fetch(directBalanceURL, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json',
                    'Cache-Control': 'no-cache'
                }
            });
            
            if (!directResponse.ok) {
                throw new Error(`HTTP ${directResponse.status}: ${directResponse.statusText}`);
            }
            
            const directData = await directResponse.json();
            console.log('üí∞ –ë–∞–ª–∞–Ω—Å —Å —Å–µ—Ä–≤–µ—Ä–∞:', directData);
            
            // –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ pending –ø–ª–∞—Ç–µ–∂–∏
            const paymentsURL = `${API_BASE_URL}/api/v1/payments/history?user_id=${currentUserId}`;
            console.log('üìã –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', paymentsURL);
            
            try {
                const paymentsResponse = await fetch(paymentsURL);
                if (paymentsResponse.ok) {
                    const paymentsData = await paymentsResponse.json();
                    const pendingPayments = paymentsData.filter(p => p.status === 'pending');
                    const completedPayments = paymentsData.filter(p => p.status === 'completed');
                    
                    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π:');
                    console.log('  - –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π:', paymentsData.length);
                    console.log('  - Pending:', pendingPayments.length);
                    console.log('  - Completed:', completedPayments.length);
                    
                    if (pendingPayments.length > 0) {
                        console.log('‚ö†Ô∏è –ï—Å—Ç—å pending –ø–ª–∞—Ç–µ–∂–∏! –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å...');
                        
                        // –ü—ã—Ç–∞–µ–º—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                        const syncURL = `${API_BASE_URL}/api/v1/payments/sync_all`;
                        const syncResponse = await fetch(syncURL, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({ user_id: currentUserId })
                        });
                        
                        if (syncResponse.ok) {
                            const syncResult = await syncResponse.json();
                            console.log('üîÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', syncResult);
                            
                            if (syncResult.synchronized > 0) {
                                this.showNotification(`üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${syncResult.synchronized} –ø–ª–∞—Ç–µ–∂–µ–π!`, 'success', 3000);
                                
                                // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                                const updatedResponse = await fetch(directBalanceURL);
                                if (updatedResponse.ok) {
                                    const updatedData = await updatedResponse.json();
                                    console.log('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å:', updatedData);
                                    
                                    // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
                                    const oldBalance = this.userBalance;
                                    this.userBalance = updatedData.balance;
                                    this.saveUserData();
                                    
                                    const difference = updatedData.balance - oldBalance;
                                    this.showNotification(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω! +${difference} STcoin`, 'success', 4000);
                                    this.updateBalanceDisplay(updatedData.balance);
                                    
                                    return { success: true, balance: updatedData.balance, difference: difference };
                                }
                            } else {
                                this.showNotification('‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è', 'info', 2000);
                            }
                        } else {
                            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', await syncResponse.text());
                        }
                    }
                }
            } catch (paymentsError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π:', paymentsError);
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            const oldBalance = this.userBalance;
            this.userBalance = directData.balance;
            this.saveUserData();
            
            console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${oldBalance} ‚Üí ${directData.balance} STcoin`);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const difference = directData.balance - oldBalance;
            if (difference !== 0) {
                this.showNotification(`‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω: ${directData.balance} STcoin`, 'success', 3000);
            }
            
            // –í–ê–ñ–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            this.updateBalanceDisplay(directData.balance);
            
            console.log('üîÑ === –û–¢–õ–ê–î–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
            return { success: true, balance: directData.balance, difference: difference };
            
        } catch (error) {
            console.error('‚ùå –ü–û–õ–ù–ê–Ø –û–®–ò–ë–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ë–ê–õ–ê–ù–°–ê:', error);
            this.showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞', 'error', 3000);
            return { success: false, error: error.message };
        }
    }

    updateBalanceDisplay(newBalance) {
        console.log('üìä –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:', newBalance);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        const balanceElements = document.querySelectorAll('[data-balance-display]');
        balanceElements.forEach(element => {
            element.textContent = newBalance;
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –±–∞–ª–∞–Ω—Å–∞:', element);
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        const consultationsRemaining = Math.floor(newBalance / 10);
        const consultationsElements = document.querySelectorAll('[data-consultations-display]');
        consultationsElements.forEach(element => {
            element.textContent = consultationsRemaining;
            console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —ç–ª–µ–º–µ–Ω—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:', element);
        });
        
        // –ù–ï –ü–ï–†–ï–†–ò–°–û–í–´–í–ê–ï–ú —Å–µ–∫—Ü–∏—é –ø–æ–ª–Ω–æ—Å—Ç—å—é - —ç—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é!
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω –±–µ–∑ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∏ —Å–µ–∫—Ü–∏–∏');
    }

    deductConsultation(cost = 10) {
        this.userBalance -= cost;
        this.consultationsUsed += cost;
        this.saveUserData();
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    initModularNavigation() {
        if (window.MishuraApp && 
            window.MishuraApp.components && 
            window.MishuraApp.components.navigation) {
            
            console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
            window.MishuraApp.components.navigation.init();
        }
    }

    fixModeButtons() {
        const singleBtn = document.getElementById('single-mode-btn');
        const compareBtn = document.getElementById('compare-mode-btn');
        
        if (singleBtn) {
            const newSingleBtn = singleBtn.cloneNode(true);
            singleBtn.parentNode.replaceChild(newSingleBtn, singleBtn);
            newSingleBtn.addEventListener('click', () => {
                console.log('üì∑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞');
                if (window.mishuraApp) {
                    window.mishuraApp.openSingleModal();
                }
            });
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–∑–∞ –ø–æ—á–∏–Ω–µ–Ω–∞');
        }

        if (compareBtn) {
            const newCompareBtn = compareBtn.cloneNode(true);
            compareBtn.parentNode.replaceChild(newCompareBtn, compareBtn);
            newCompareBtn.addEventListener('click', () => {
                console.log('üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤');
                if (window.mishuraApp) {
                    window.mishuraApp.openCompareModal();
                }
            });
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –ø–æ—á–∏–Ω–µ–Ω–∞');
        }
    }

    // 1. –ó–ê–ú–ï–ù–ê getUserId
    getUserId() {
        try {
            console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ User ID...');
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp
            if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.initDataUnsafe?.user?.id) {
                const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω Telegram ID –∏–∑ WebApp:', telegramId);
                return telegramId;
            }
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.has('user_id')) {
                const userId = parseInt(urlParams.get('user_id'));
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω user_id –∏–∑ URL:', userId);
                return userId;
            }
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage
            const storedId = localStorage.getItem('telegram_user_id');
            if (storedId && !isNaN(storedId)) {
                const userId = parseInt(storedId);
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω user_id –∏–∑ localStorage:', userId);
                return userId;
            }
            // 4. –¢–µ—Å—Ç–æ–≤—ã–π ID –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            const testId = 5930269100;
            console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π telegram_id:', testId);
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ID –≤ localStorage –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            localStorage.setItem('telegram_user_id', testId.toString());
            return testId;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user ID:', error);
            // Fallback: —Ç–µ—Å—Ç–æ–≤—ã–π ID
            const fallbackId = 5930269100;
            console.warn('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback telegram_id:', fallbackId);
            return fallbackId;
        }
    }

    // 2. –ó–ê–ú–ï–ù–ê createPayment
    async createPayment(planId) {
        try {
            const telegramId = this.getUserId();
            if (!telegramId) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
            }
            console.log('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', { telegramId, planId });
            const paymentData = {
                telegram_id: telegramId,  // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á
                plan_id: planId,
                username: 'webapp_user',
                first_name: 'WebApp',
                last_name: 'User'
            };
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', paymentData);
            const response = await fetch(`${API_BASE_URL}/api/v1/payments/create`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(paymentData)
            });
            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }
            const result = await response.json();
            console.log('‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', result);
            return result;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
            throw error;
        }
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–ë–†–ê–¢–ù–û–ô –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –ø–ª–∞–Ω–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ HTML onclick)
window.buyPlan = function(planId) {
    if (window.mishuraApp) {
        window.mishuraApp.initiatePayment(planId);
    } else {
        console.error('‚ùå MishuraApp –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if (!window.mishuraApp) {
    console.log('üé≠ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ú–ò–®–£–†–ê App v2.6.0...');
    window.mishuraApp = new MishuraApp();
}