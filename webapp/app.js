// üé≠ –ú–ò–®–£–†–ê - –¢–≤–æ–π –°—Ç–∏–ª–∏—Å—Ç
// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è - app.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
// –í–µ—Ä—Å–∏—è: 2.6.1 - –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–õ–ê–¢–ï–ñ–ï–ô –ò –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò

class MishuraApp {
    constructor() {
        this.initializeState();
        this.initializeAPI();
    }

    initializeState() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MishuraApp...');
        
        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        this.currentMode = null;
        this.currentSection = 'home';
        this.compareImages = [null, null, null, null];
        this.singleImage = null;
        this.isLoading = false;
        this.lastAnalysisResult = null;
        this.requestTimeout = 90000; // 90 —Å–µ–∫—É–Ω–¥
        this.eventListenersAttached = false;
        this.initializationComplete = false;
        
        // üÜï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ë–ê–õ–ê–ù–°–ê
        this.balanceSync = {
            interval: null,
            lastUpdate: 0,
            isUpdating: false,
            forceUpdate: false
        };
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        this.userBalance = 200;
        this.consultationsHistory = [];
        this.consultationsUsed = 0;
        
        // –ü–ª–∞—Ç–µ–∂–∏ –ÆKassa
        this.paymentPackages = null;
        this.currentPayment = null;
        this.paymentCheckInterval = null;
        
        this.api = null;
        
        // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–≤–æ–¥–æ–≤
        this.occasionOptions = [
            'üíº –î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞', '‚ù§Ô∏è –°–≤–∏–¥–∞–Ω–∏–µ', 'üö∂ –ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≥—É–ª–∫–∞',
            'üéâ –í–µ—á–µ—Ä–∏–Ω–∫–∞', 'üëî –°–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ', 'üçΩÔ∏è –£–∂–∏–Ω –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ',
            'üé≠ –¢–µ–∞—Ç—Ä/–∫–æ–Ω—Ü–µ—Ä—Ç', 'üèãÔ∏è –°–ø–æ—Ä—Ç–∑–∞–ª/—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞', 'üõçÔ∏è –®–æ–ø–ø–∏–Ω–≥',
            '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', 'üéì –£—á–µ–±–∞/—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', 'üè† –î–æ–º–∞/–æ—Ç–¥—ã—Ö',
            'üåû –ü–ª—è–∂/–æ—Ç–ø—É—Å–∫', '‚ùÑÔ∏è –ó–∏–º–Ω—è—è –ø—Ä–æ–≥—É–ª–∫–∞', 'üåßÔ∏è –î–æ–∂–¥–ª–∏–≤–∞—è –ø–æ–≥–æ–¥–∞',
            'üé™ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ', 'üè¢ –û—Ñ–∏—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
            'üé® –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', 'üë∂ –í—Å—Ç—Ä–µ—á–∞ —Å –¥–µ—Ç—å–º–∏', 'üë• –î–µ–ª–æ–≤—ã–µ –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã'
        ];
        
        // –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        this.analytics = {
            appStartTime: Date.now(),
            analysisRequested: 0,
            successfulAnalysis: 0,
            errors: 0
        };
        
        this.init = this.init.bind(this);
        setTimeout(() => this.init(), 100);
    }

    async initializeAPI() {
        try {
            const healthData = await fetch(`${API_BASE_URL}/api/v1/health`).then(res => res.json());
                    console.log('üè• –°—Ç–∞—Ç—É—Å API:', healthData);
                    
                this.api = new window.MishuraAPIService();
            console.log('üöÄ API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', this.api.constructor.name);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API:', error);
            this.showNotification('üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...', 'info', 3000);
            this.api = new window.MishuraAPIService();
        }
        
        this.updateAPIStatus();
    }

    updateAPIStatus() {
        const isRealAPI = this.api && !this.api.isMock;
        const statusElement = document.querySelector('.api-status');
        
        if (statusElement) {
            statusElement.textContent = isRealAPI ? 'üåê –†–µ–∞–ª—å–Ω—ã–π API' : 'üé≠ –î–µ–º–æ-—Ä–µ–∂–∏–º';
            statusElement.className = `api-status ${isRealAPI ? 'real' : 'demo'}`;
        }
        
        console.log('üîß API —Å—Ç–∞—Ç—É—Å:', isRealAPI ? '–†–µ–∞–ª—å–Ω—ã–π API' : '–î–µ–º–æ-—Ä–µ–∂–∏–º');
    }

    // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===
    
    async init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        
        if (this.initializationComplete) return;

        try {
            // üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –ü–ï–†–í–´–ú –î–ï–õ–û–ú
            await this.checkForSuccessfulPayment();
            
            this.setupNavigation();
            this.fixModeButtons();
            this.setupBasicEventHandlers();
            this.loadUserData();
            
            // üÜï –ó–ê–ü–£–°–ö –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ë–ê–õ–ê–ù–°–ê
            this.startBalanceSync();
            
            this.setupTelegramIntegration();
            this.initModularNavigation();
            this.initializationComplete = true;
            
            console.log('‚úÖ MishuraApp –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    // üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
    async checkForSuccessfulPayment() {
        const urlParams = new URLSearchParams(window.location.search);
        const paymentSuccess = urlParams.get('payment_success'); // 'true', –Ω–µ '1'
        const section = urlParams.get('section');
        
        console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã:', { 
            paymentSuccess, 
            section,
            fullUrl: window.location.href 
        });

        if (paymentSuccess === 'true') {
            console.log('üéâ –£–°–ü–ï–®–ù–ê–Ø –û–ü–õ–ê–¢–ê –û–ë–ù–ê–†–£–ñ–ï–ù–ê!');
            
            // üîî –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            this.showPaymentSuccessNotification();
            
            // üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
            setTimeout(async () => {
                await this.forceBalanceUpdate();
            }, 1000);
            
            // üß≠ –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–µ–∫—Ü–∏—é –±–∞–ª–∞–Ω—Å–∞
            setTimeout(() => {
                this.navigateToSection('balance');
            }, 1500);
            
            // üßπ –û—á–∏—Å—Ç–∫–∞ URL
            setTimeout(() => {
                const newUrl = window.location.origin + window.location.pathname;
                window.history.replaceState({}, document.title, newUrl);
                console.log('üßπ URL –æ—á–∏—â–µ–Ω –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–ª–∞—Ç—ã');
            }, 3000);
        }
    }

    // üÜï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    showPaymentSuccessNotification() {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        document.querySelectorAll('.payment-success-notification').forEach(el => el.remove());
        
        const notification = document.createElement('div');
        notification.className = 'payment-success-notification';
        notification.innerHTML = `
            <div style="
                position: fixed;
                top: 20px;
                right: 20px;
                background: linear-gradient(135deg, #4CAF50, #45a049);
                color: white;
                padding: 20px;
                border-radius: 16px;
                box-shadow: 0 8px 32px rgba(76, 175, 80, 0.4);
                z-index: 10000;
                animation: slideInRight 0.5s ease-out;
                max-width: 300px;
            ">
                <div style="display: flex; align-items: center; gap: 12px;">
                    <div style="font-size: 28px;">‚úÖ</div>
                    <div>
                        <div style="font-weight: 700; font-size: 18px; margin-bottom: 4px;">
                            –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!
                        </div>
                        <div style="font-size: 14px; opacity: 0.9;">
                            –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(notification);
        
        // –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 6 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            notification.style.animation = 'slideOutRight 0.5s ease-in';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 500);
        }, 6000);
    }

    // üÜï –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–Ø –ë–ê–õ–ê–ù–°–ê
    startBalanceSync() {
        console.log('üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞...');
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        this.balanceSync.interval = setInterval(async () => {
            if (!this.balanceSync.isUpdating) {
                await this.syncBalance();
            }
        }, 30000);
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –≤–∫–ª–∞–¥–∫–∏
        document.addEventListener('visibilitychange', async () => {
            if (!document.hidden && !this.balanceSync.isUpdating) {
                await this.syncBalance();
            }
        });
        
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –æ–∫–Ω–∞
        window.addEventListener('focus', async () => {
            if (!this.balanceSync.isUpdating) {
                await this.syncBalance();
            }
        });
        
        console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
    }

    async syncBalance() {
        const now = Date.now();
        
        // –ù–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ (–º–∏–Ω–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
        if (now - this.balanceSync.lastUpdate < 10000 && !this.balanceSync.forceUpdate) {
            return;
        }
        
        console.log('üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞...');
        
        try {
            this.balanceSync.isUpdating = true;
            
            const userId = this.getUserId();
            const response = await fetch(`${API_BASE_URL}/api/v1/users/${userId}/balance?_t=${now}`);
            
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            
            const balanceData = await response.json();
            const newBalance = balanceData.balance;
            
            if (newBalance !== this.userBalance) {
                const oldBalance = this.userBalance;
                this.userBalance = newBalance;
                this.saveUserData();
                
                console.log(`üí∞ –ë–∞–ª–∞–Ω—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω: ${oldBalance} ‚Üí ${newBalance}`);
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                this.updateBalanceDisplay();
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏–ª—Å—è
                if (newBalance > oldBalance) {
                    const difference = newBalance - oldBalance;
                    this.showNotification(
                        `üéâ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${difference} STcoin!`, 
                        'success', 
                        4000
                    );
                    this.animateBalanceChange();
                }
            }
            
            this.balanceSync.lastUpdate = now;
            this.balanceSync.forceUpdate = false;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        } finally {
            this.balanceSync.isUpdating = false;
        }
    }

    async forceBalanceUpdate() {
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞...');
        this.balanceSync.forceUpdate = true;
        await this.syncBalance();
    }

    // üÜï –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
    animateBalanceChange() {
        const balanceElements = document.querySelectorAll('.balance-amount, .balance-value, [data-balance-display]');
        
        balanceElements.forEach(element => {
            element.style.animation = 'balanceUpdate 1s ease-out';
            
            setTimeout(() => {
                element.style.animation = '';
            }, 1000);
        });
    }

    updateBalanceDisplay() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º
        const balanceElements = document.querySelectorAll('.balance-amount, .balance-value, [data-balance-display]');
        balanceElements.forEach(element => {
            element.textContent = this.userBalance;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        const consultationsRemaining = Math.floor(this.userBalance / 10);
        const consultationsElements = document.querySelectorAll('[data-consultations-display]');
        consultationsElements.forEach(element => {
            element.textContent = consultationsRemaining;
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞
        const balanceTitle = document.querySelector('#balance-section .section-title');
        if (balanceTitle) {
            balanceTitle.innerHTML = `üí∞ –ë–∞–ª–∞–Ω—Å: <span class="balance-highlight">${this.userBalance}</span> STCoins`;
        }
        
        console.log('üìä –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:', this.userBalance);
    }

    setupBasicEventHandlers() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π');
        this.setupCloseButtons();
        this.setupSubmitButton();
        this.initUploaders();
        this.setupOccasionDropdown();
        this.setupResultNavigation();
        console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    setupNavigation() {
        if (this.navigationSetup) return;
        console.log('üß≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
        
        const navButtons = document.querySelectorAll('.nav-btn');
        navButtons.forEach(btn => {
            const newBtn = btn.cloneNode(true);
            btn.parentNode.replaceChild(newBtn, btn);
            
            newBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                const section = newBtn.id.replace('nav-', '');
                console.log('üîÑ –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Å–µ–∫—Ü–∏—é:', section);
                
                document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
                newBtn.classList.add('active');
                
                this.navigateToSection(section);
                this.triggerHapticFeedback('light');
            });
        });
        
        this.navigationSetup = true;
        console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞');
    }

    fixModeButtons() {
        const singleBtn = document.getElementById('single-mode-btn');
        const compareBtn = document.getElementById('compare-mode-btn');
        
        if (singleBtn) {
            const newSingleBtn = singleBtn.cloneNode(true);
            singleBtn.parentNode.replaceChild(newSingleBtn, singleBtn);
            newSingleBtn.addEventListener('click', () => {
                console.log('üì∑ –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞');
                this.openSingleModal();
            });
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—Ä–∞–∑–∞ –ø–æ—á–∏–Ω–µ–Ω–∞');
        }

        if (compareBtn) {
            const newCompareBtn = compareBtn.cloneNode(true);
            compareBtn.parentNode.replaceChild(newCompareBtn, compareBtn);
            newCompareBtn.addEventListener('click', () => {
                console.log('üîÑ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤');
                this.openCompareModal();
            });
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –ø–æ—á–∏–Ω–µ–Ω–∞');
        }
    }

    navigateToSection(section) {
        console.log('üß≠ app.js: –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ —Å–µ–∫—Ü–∏—é:', section);
        
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('active');
            });
            const targetBtn = document.getElementById(`nav-${section}`);
            if (targetBtn) {
                targetBtn.classList.add('active');
            }
        
            this.currentSection = section;
            this.closeModal();
        
        if (window.MishuraApp?.components?.navigation) {
            window.MishuraApp.components.navigation.navigateTo(section);
        } else {
            this.showSection(section);
        }
    }

    showSection(section) {
        console.log('üìÑ –ü–æ–∫–∞–∑ —Å–µ–∫—Ü–∏–∏:', section);
        switch (section) {
            case 'home':
                this.showHomeSection();
                break;
            case 'history':
                this.showHistorySection();
                break;
            case 'balance':
                this.showBalanceSection();
                break;
            default:
                console.warn('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ–∫—Ü–∏—è:', section);
        }
    }

    showHomeSection() {
        console.log('üè† –ü–æ–∫–∞–∑ –¥–æ–º–∞—à–Ω–µ–π —Å–µ–∫—Ü–∏–∏');
        
        const container = document.querySelector('.container');
        if (!container) return;
        
        container.innerHTML = `
            <header class="header">
                <h1>‚ú® –ú–ò–®–£–†–ê</h1>
                <p>–¢–≤–æ–π –ª–∏—á–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç –≤ –∫–∞—Ä–º–∞–Ω–µ</p>
            </header>

            <div class="action-buttons">
                <button id="single-mode-btn" class="action-btn">
                    <span class="icon">üì∑</span>
                    –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞
                </button>
                <button id="compare-mode-btn" class="action-btn">
                    <span class="icon">üîÑ</span>
                    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤
                </button>
            </div>
        `;
        
        setTimeout(() => {
            this.fixModeButtons();
        }, 100);
    }

    async showBalanceSection() {
        console.log('üí∞ –ü–û–ö–ê–ó –°–ï–ö–¶–ò–ò –ë–ê–õ–ê–ù–°–ê');
        
        const container = document.querySelector('.container');
        if (!container) return;
        
        // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–µ–∫—Ü–∏—é
        await this.forceBalanceUpdate();
        
        const consultationsRemaining = Math.floor(this.userBalance / 10);
        
        container.innerHTML = `
            <div class="balance-card" style="
                background: var(--gold-gradient);
                color: var(--text-dark);
                border-radius: 20px;
                padding: 24px;
                margin-bottom: 24px;
                text-align: center;
                box-shadow: var(--shadow-gold);
            ">
                <div style="font-size: 2.5rem; font-weight: 900; margin-bottom: 8px;" data-balance-display>
                    ${this.userBalance}
                </div>
                <div style="font-size: 1.1rem; font-weight: 600; text-transform: uppercase;">
                    STcoin
                </div>
                <div style="font-size: 0.9rem; margin-top: 8px; opacity: 0.8;">
                    –î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: <span data-consultations-display>${consultationsRemaining}</span>
                </div>
            </div>
            
            <div class="usage-stats" style="
                background: rgba(26, 26, 26, 0.8);
                border: 1px solid var(--border-light);
                border-radius: 16px;
                padding: 20px;
                margin-bottom: 24px;
            ">
                <h3 style="
                    color: var(--text-gold);
                    margin-bottom: 16px;
                    text-transform: uppercase;
                    letter-spacing: 1px;
                    font-size: 1rem;
                ">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è</h3>
                
                <div style="display: flex; justify-content: space-between; margin-bottom: 12px;">
                    <span style="color: var(--text-muted);">–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ:</span>
                    <span style="color: var(--text-light); font-weight: 600;">${this.consultationsHistory.length}</span>
                </div>
                
                <div style="display: flex; justify-content: space-between; margin-bottom: 12px;">
                    <span style="color: var(--text-muted);">–ü–æ—Ç—Ä–∞—á–µ–Ω–æ STcoin:</span>
                    <span style="color: var(--text-light); font-weight: 600;">${this.consultationsUsed}</span>
                </div>
                
                <div style="display: flex; justify-content: space-between;">
                    <span style="color: var(--text-muted);">–û—Å—Ç–∞—Ç–æ–∫ STcoin:</span>
                    <span style="color: var(--text-gold); font-weight: 600;" data-balance-display>${this.userBalance}</span>
                </div>
            </div>
            
            <div class="balance-actions">
                <button class="action-btn" onclick="window.mishuraApp.showPaymentModal()" style="
                    width: 100%;
                    margin-bottom: 16px;
                    background: rgba(26, 26, 26, 0.8);
                    border: 2px solid var(--border-gold);
                    color: var(--text-gold);
                    padding: 20px;
                    font-size: 1.1rem;
                ">
                    <span style="margin-right: 8px;">üí≥</span>
                    –ü–æ–ø–æ–ª–Ω–∏—Ç—å STcoin
                </button>
                
                <button class="action-btn" onclick="window.open('https://t.me/marketolog_online', '_blank')" style="
                    width: 100%;
                    margin-bottom: 16px;
                    background: rgba(26, 26, 26, 0.8);
                    border: 2px solid rgba(0, 123, 255, 0.5);
                    color: #007bff;
                        padding: 20px;
                    font-size: 1.1rem;
                ">
                    <span style="margin-right: 8px;">üí¨</span>
                    –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                </button>
            </div>
        `;
    }

    showHistorySection() {
        console.log('üìö –ü–æ–∫–∞–∑ —Å–µ–∫—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏');
        
        const container = document.querySelector('.container');
        if (!container) return;
        
        const history = this.consultationsHistory.slice(-10).reverse();
        const consultationsRemaining = Math.floor(this.userBalance / 10);
        
        let historyHTML = `
            <header class="header">
                <h1>üìö –ò—Å—Ç–æ—Ä–∏—è</h1>
                <p>–í–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å—Ç–∏–ª–∏—Å—Ç–∞</p>
            </header>
            
            <div class="stats-card" style="
                background: rgba(212, 175, 55, 0.1);
                border: 1px solid var(--border-gold);
                border-radius: 16px;
                padding: 20px;
                margin-bottom: 20px;
                text-align: center;
            ">
                <div style="color: var(--text-gold); font-size: 1.2rem; font-weight: 700; margin-bottom: 6px;">
                    –û—Å—Ç–∞–ª–æ—Å—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: ${consultationsRemaining}
                </div>
                <div style="color: var(--text-muted); font-size: 0.9rem;">
                    ${this.userBalance} STcoin
                </div>
            </div>
        `;

        if (history.length === 0) {
            historyHTML += `
                <div style="text-align: center; padding: 40px 20px; color: var(--text-muted);">
                    <div style="font-size: 3rem; margin-bottom: 16px;">üìù</div>
                    <div style="font-size: 1.1rem;">–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞</div>
                    <div style="font-size: 0.9rem; margin-top: 8px;">
                        –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!
                    </div>
                </div>
            `;
        } else {
            historyHTML += '<div class="history-list">';
            
            history.forEach((consultation, index) => {
                const date = new Date(consultation.timestamp).toLocaleDateString('ru-RU');
                const time = new Date(consultation.timestamp).toLocaleTimeString('ru-RU', {
                    hour: '2-digit',
                    minute: '2-digit'
                });
                
                historyHTML += `
                    <div class="history-item" style="
                        background: rgba(26, 26, 26, 0.8);
                        border: 1px solid var(--border-light);
                        border-radius: 12px;
                        padding: 16px;
                        margin-bottom: 12px;
                        cursor: pointer;
                        transition: var(--transition);
                    " onclick="window.mishuraApp.viewConsultation(${this.consultationsHistory.length - 1 - index})">
                        <div style="
                            display: flex;
                            justify-content: space-between;
                            align-items: center;
                            margin-bottom: 8px;
                        ">
                            <span style="
                                color: var(--text-gold);
                                font-weight: 600;
                                text-transform: uppercase;
                                font-size: 0.9rem;
                            ">${consultation.occasion}</span>
                            <span style="
                                color: var(--text-muted);
                                font-size: 0.8rem;
                            ">${date} ${time}</span>
                        </div>
                        <div style="
                            color: var(--text-light);
                            font-size: 0.9rem;
                            line-height: 1.4;
                            display: -webkit-box;
                            -webkit-line-clamp: 2;
                            -webkit-box-orient: vertical;
                            overflow: hidden;
                        ">
                            ${consultation.advice.replace(/<[^>]*>/g, '').substring(0, 100)}...
                        </div>
                    </div>
                `;
            });
            
            historyHTML += '</div>';
        }

        container.innerHTML = historyHTML;
    }

    // === –ü–õ–ê–¢–ï–ñ–ò ===
    
    showPaymentModal() {
        if (!window.PRICING_PLANS) {
            this.showNotification('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã...', 'info');
            return;
        }

        const modal = document.createElement('div');
        modal.className = 'modal-overlay active';
        modal.id = 'payment-modal';
        
        let packagesHTML = '';
        Object.entries(window.PRICING_PLANS).forEach(([planId, plan]) => {
            const isPopular = plan.popular;
            packagesHTML += `
                <div class="pricing-card ${isPopular ? 'popular' : ''}" 
                     onclick="window.mishuraApp.initiatePayment('${planId}')"
                     style="
                        background: ${isPopular ? 'rgba(212, 175, 55, 0.1)' : 'rgba(26, 26, 26, 0.8)'};
                        border: 2px solid ${isPopular ? 'var(--border-gold)' : 'var(--border-light)'};
                        border-radius: 16px;
                        padding: 20px;
                        margin-bottom: 16px;
                        cursor: pointer;
                        transition: all 0.3s ease;
                        position: relative;
                     ">
                    ${isPopular ? '<div style="position: absolute; top: -8px; right: 16px; background: var(--gold-gradient); color: var(--text-dark); padding: 4px 12px; border-radius: 12px; font-size: 0.8rem; font-weight: 600;">üî• –ü–û–ü–£–õ–Ø–†–ù–´–ô</div>' : ''}
                    
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;">
                        <h3 style="color: var(--text-gold); margin: 0; font-size: 1.2rem;">${plan.name}</h3>
                        <div style="color: var(--text-light); font-size: 1.5rem; font-weight: 700;">${plan.price}‚ÇΩ</div>
                    </div>
                    
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div style="color: var(--text-light);">
                            <span style="font-size: 1.1rem; font-weight: 600;">${plan.stcoins}</span>
                            <span style="color: var(--text-muted); margin-left: 4px;">STcoin</span>
                        </div>
                        <div style="color: var(--text-muted); font-size: 0.9rem;">
                            ${plan.consultations} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
                        </div>
                    </div>
                </div>
            `;
        });

        modal.innerHTML = `
            <div class="modal-content" style="max-width: 500px;">
                <div class="modal-header">
                    <h2 class="modal-title">üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ STcoin</h2>
                    <button class="close-btn" onclick="this.closest('.modal-overlay').remove()">&times;</button>
                </div>
                
                <div style="margin-bottom: 20px;">
                    <div style="
                        background: rgba(212, 175, 55, 0.1);
                        border: 1px solid var(--border-gold);
                        border-radius: 12px;
                        padding: 16px;
                        margin-bottom: 20px;
                        text-align: center;
                    ">
                        <div style="color: var(--text-gold); font-weight: 600; margin-bottom: 8px;">
                            üîí –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa
                        </div>
                        <div style="color: var(--text-light); font-size: 0.9rem;">
                            –ü—Ä–∏–Ω–∏–º–∞–µ–º –∫–∞—Ä—Ç—ã Visa, MasterCard, –ú–ò–†, –°–ë–ü –∏ –¥—Ä—É–≥–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
                        </div>
                    </div>
                    
                    <div class="payment-packages">
                        ${packagesHTML}
                    </div>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        this.triggerHapticFeedback('light');
    }

    // üö® –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π return_url —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    async initiatePayment(planId) {
        const plan = window.PRICING_PLANS[planId];
        if (!plan) {
            this.showNotification('‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        try {
            this.showNotification('üí≥ –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂...', 'info');
            
            const userId = this.getUserId();
            console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, '–ø–ª–∞–Ω:', planId);
            
            const paymentData = {
                telegram_id: userId,
                plan_id: planId
            };
            
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞:', paymentData);
            
            const response = await fetch(`${API_BASE_URL}/api/v1/payments/create`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(paymentData)
            });

            if (!response.ok) {
                const errorText = await response.text();
                throw new Error(`HTTP ${response.status}: ${errorText}`);
            }

            const result = await response.json();
            console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', result);

            if (result.payment_url) {
                this.showNotification('üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–ø–ª–∞—Ç–µ...', 'success');
                console.log('üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –ÆKassa:', result.payment_url);
                
                // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª –ø–ª–∞—Ç–µ–∂–µ–π
                const paymentModal = document.getElementById('payment-modal');
                if (paymentModal) {
                    paymentModal.remove();
                }
                
                // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã –ÆKassa
                window.location.href = result.payment_url;
                
        } else {
                throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω URL –¥–ª—è –æ–ø–ª–∞—Ç—ã');
            }

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', error);
            this.showNotification(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`, 'error', 5000);
        }
    }

    // === –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê ===
    
    openSingleModal() {
        this.currentMode = 'single';
        const modalTitle = document.getElementById('modal-title');
        if (modalTitle) {
            modalTitle.textContent = '–ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞';
        }
        this.showModal('single-mode');
    }

    openCompareModal() {
        this.currentMode = 'compare';
        const modalTitle = document.getElementById('modal-title');
        if (modalTitle) {
            modalTitle.textContent = '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤';
        }
        this.showModal('compare-mode');
    }

    showModal(mode) {
        const overlay = document.getElementById('consultation-overlay');
        const modes = document.querySelectorAll('.upload-mode');
        
        modes.forEach(m => m.classList.remove('active'));
        const targetMode = document.getElementById(mode);
        if (targetMode) {
            targetMode.classList.add('active');
        }
        
        if (overlay) {
            overlay.classList.add('active');
        }
        
        this.clearForm();
        this.hideForm();
        this.hideLoading();
        this.hideResult();
    }

    closeModal() {
        const overlay = document.getElementById('consultation-overlay');
        if (overlay) {
            overlay.classList.remove('active');
        }
        this.clearForm();
        this.clearImages();
    }

    clearForm() {
        const occasion = document.getElementById('occasion');
        const preferences = document.getElementById('preferences');
        const options = document.getElementById('occasion-options');
        
        if (occasion) occasion.value = '';
        if (preferences) preferences.value = '';
        if (options) options.classList.remove('active');
        
        this.updateSubmitButton();
    }

    clearImages() {
        this.singleImage = null;
        this.compareImages = [null, null, null, null];
        
        const singlePreview = document.getElementById('single-preview');
        if (singlePreview) {
            singlePreview.innerHTML = '<div class="upload-text">–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ç–æ</div>';
            singlePreview.classList.remove('has-image');
        }
        
        document.querySelectorAll('.compare-slot').forEach((slot, index) => {
            slot.innerHTML = `
                <span class="slot-number">${index + 1}</span>
                <span class="add-icon">+</span>
            `;
            slot.classList.remove('has-image');
        });
    }

    updateSubmitButton() {
        const submitBtn = document.getElementById('form-submit');
        const occasion = document.getElementById('occasion')?.value?.trim() || '';
        
        let hasImages = false;
        if (this.currentMode === 'single') {
            hasImages = this.singleImage !== null;
        } else if (this.currentMode === 'compare') {
            hasImages = this.compareImages.filter(img => img !== null).length >= 2;
        }
        
        if (submitBtn) {
            submitBtn.disabled = !hasImages || !occasion;
        }
    }

    hideForm() {
        const form = document.getElementById('consultation-form');
        if (form) form.classList.remove('active');
    }

    showForm() {
        const form = document.getElementById('consultation-form');
        if (form) form.classList.add('active');
        this.updateSubmitButton();
    }

    hideLoading() {
        const loading = document.getElementById('loading');
        if (loading) loading.classList.remove('active');
    }

    showLoading() {
        this.isLoading = true;
        
        const sections = {
            loading: true,
            'consultation-form': false,
            result: false
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
    }

    hideResult() {
        const result = document.getElementById('result');
        if (result) result.classList.remove('active');
    }

    showResult(result) {
        this.isLoading = false;
        
        const sections = {
            loading: false,
            'consultation-form': false,
            result: true
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
        
        const normalizedResult = this.normalizeAPIResponse(result);
        
        const content = document.getElementById('result-content');
        if (content) {
            content.innerHTML = this.formatAdvice(normalizedResult.advice);
        }
        
        const resultSection = document.getElementById('result');
        if (resultSection && !resultSection.querySelector('#result-back')) {
            const navButtons = document.createElement('div');
            navButtons.style.cssText = 'display: flex; gap: 12px; justify-content: center; margin-top: 20px;';
            navButtons.innerHTML = `
                <button id="result-back" style="
                    background: var(--bg-tertiary);
                    color: var(--text-primary);
                    border: 1px solid var(--accent-gold);
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-weight: 600;
                    transition: all 0.3s ease;
                ">‚Üê –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É</button>
                <button id="result-new" style="
                    background: var(--accent-gold);
                    color: var(--bg-primary);
                    border: none;
                    padding: 12px 20px;
                    border-radius: 8px;
                    cursor: pointer;
                    font-weight: 600;
                    transition: all 0.3s ease;
                ">üÜï –ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑</button>
            `;
            resultSection.appendChild(navButtons);
        }
        
        const consultation = {
            id: Date.now(),
            type: this.currentMode,
            occasion: document.getElementById('occasion')?.value || '',
            preferences: document.getElementById('preferences')?.value || '',
            advice: normalizedResult.advice,
            timestamp: new Date().toISOString(),
            imagesCount: this.currentMode === 'compare' ? 
                this.compareImages.filter(img => img !== null).length : 1,
            metadata: normalizedResult.metadata || {}
        };
        
        this.deductConsultation(10);
        this.consultationsHistory.push(consultation);
        this.saveUserData();
        
        if (this.userBalance <= 50) {
            setTimeout(() => {
                const consultationsRemaining = Math.floor(this.userBalance / 10);
                this.showNotification(`‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ${consultationsRemaining} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π`, 'warning', 4000);
            }, 2000);
        }
    }

    normalizeAPIResponse(response) {
        if (response && typeof response === 'object' && response.advice) {
            return {
                advice: response.advice,
                metadata: response.metadata || {
                    timestamp: new Date().toISOString(),
                    status: response.status || 'success'
                }
            };
        }
        
        if (typeof response === 'string') {
            return {
                advice: response,
                metadata: {
                    timestamp: new Date().toISOString(),
                    status: 'success',
                    source: 'string_response'
                }
            };
        }
        
        if (response && response.message) {
            return {
                advice: response.message,
                metadata: {
                    timestamp: new Date().toISOString(),
                    status: response.status || 'success',
                    source: 'message_field'
                }
            };
        }
        
        return {
            advice: '–ê–Ω–∞–ª–∏–∑ –ø–æ–ª—É—á–µ–Ω, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
            metadata: {
                timestamp: new Date().toISOString(),
                status: 'warning',
                source: 'fallback'
            }
        };
    }

    showError(message) {
        this.isLoading = false;
        
        const sections = {
            loading: false,
            'consultation-form': true,
            result: false
        };
        
        Object.entries(sections).forEach(([id, show]) => {
            const element = document.getElementById(id);
            if (element) {
                element.classList.toggle('active', show);
            }
        });
        
        this.showNotification(message, 'error');
    }

    formatAdvice(advice) {
        if (!advice) return '';
        
        let processedAdvice = this.parseMarkdownStructure(advice);
        
        const colorMapping = {
            '—Å–∏–Ω–∏–π': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑', '—Å–∏–Ω–µ–º': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑', '—Å–∏–Ω—è—è': '–°–∏–Ω–∏–π –æ–±—Ä–∞–∑',
            '–∫—Ä–∞—Å–Ω—ã–π': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑', '–∫—Ä–∞—Å–Ω–æ–º': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑', '–∫—Ä–∞—Å–Ω–∞—è': '–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑',
            '–±–µ–ª—ã–π': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑', '–±–µ–ª–æ–º': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑', '–±–µ–ª–∞—è': '–ë–µ–ª—ã–π –æ–±—Ä–∞–∑',
            '—á–µ—Ä–Ω—ã–π': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑', '—á–µ—Ä–Ω–æ–º': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑', '—á–µ—Ä–Ω–∞—è': '–ß–µ—Ä–Ω—ã–π –æ–±—Ä–∞–∑'
        };
        
        const descriptionsToRemove = [
            /–ù–∞ –ø–µ—Ä–≤–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ –≤—Ç–æ—Ä–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —Ç—Ä–µ—Ç—å–µ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —á–µ—Ç–≤–µ—Ä—Ç–æ–º.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.*?\./gi,
            /–ù–∞ —Ñ–æ—Ç–æ.*?–≤—ã.*?–æ–¥–µ—Ç—ã.*?\./gi,
            /–Ø –≤–∏–∂—É.*?—á—Ç–æ.*?–Ω–∞.*?\./gi,
            /–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—è.*?–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.*?\./gi
        ];
        
        descriptionsToRemove.forEach(pattern => {
            processedAdvice = processedAdvice.replace(pattern, '');
        });
        
        Object.entries(colorMapping).forEach(([color, title]) => {
            const regex = new RegExp(`(–≤|–Ω–∞)\\s+${color}[–∞-—è]*\\s+(–ø–ª–∞—Ç—å–µ|—Ä—É–±–∞—à–∫–µ|—Ñ—É—Ç–±–æ–ª–∫–µ|–±–ª—É–∑–∫–µ|–∫–æ—Å—Ç—é–º–µ|–∂–∞–∫–µ—Ç–µ|–ø–∏–¥–∂–∞–∫–µ|–±—Ä—é–∫–∞—Ö|–¥–∂–∏–Ω—Å–∞—Ö|—é–±–∫–µ|—à–æ—Ä—Ç–∞—Ö|—Ç–æ–ø–µ|–∫–∞—Ä–¥–∏–≥–∞–Ω–µ|—Å–≤–∏—Ç–µ—Ä–µ|–ø–∞–ª—å—Ç–æ|–∫—É—Ä—Ç–∫–µ)`, 'gi');
            processedAdvice = processedAdvice.replace(regex, `<span class="outfit-title">${title}</span>`);
        });
        
        return processedAdvice;
    }

    parseMarkdownStructure(text) {
        if (!text) return '';
        
        text = text.replace(/^### (.*$)/gm, '<h4>$1</h4>');
        text = text.replace(/^## (.*$)/gm, '<h3>$1</h3>');
        text = text.replace(/^# (.*$)/gm, '<h2>$1</h2>');
        text = text.replace(/\*\*(.*?):\*\*/g, '<h4>$1</h4>');
        text = text.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        text = text.replace(/\*(.*?)\*/g, '<em>$1</em>');
        text = text.replace(/^- (.*$)/gm, '<li>$1</li>');
        text = text.replace(/(<li>.*<\/li>)/gs, '<ul>$1</ul>');
        
        const paragraphs = text.split('\n\n').filter(p => p.trim());
        let formattedText = '';
        
        paragraphs.forEach(paragraph => {
            paragraph = paragraph.trim();
            if (paragraph) {
                if (paragraph.startsWith('<h') || paragraph.startsWith('<ul') || paragraph.startsWith('<div')) {
                    formattedText += paragraph;
                } else {
                    formattedText += `<p>${paragraph}</p>`;
                }
            }
        });
        
        return formattedText;
    }

    // === –û–¢–ü–†–ê–í–ö–ê –§–û–†–ú ===
    
    async submit() {
        if (this.isLoading) return;
        
        const occasion = document.getElementById('occasion')?.value?.trim() || '';
        const preferences = document.getElementById('preferences')?.value?.trim() || '';
        
        if (!occasion) {
            this.showNotification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–≤–æ–¥', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        if (this.userBalance < 10) {
            this.showNotification('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ STcoin! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        this.analytics.analysisRequested++;
        
        if (this.currentMode === 'single') {
            await this.submitSingle(occasion, preferences);
        } else if (this.currentMode === 'compare') {
            await this.submitCompare(occasion, preferences);
        }
    }

    async submitSingle(occasion, preferences) {
        if (!this.singleImage) {
            this.showNotification('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        if (!this.api) {
            this.showNotification('‚ùå API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        this.showLoading();
        this.triggerHapticFeedback('medium');
        
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => {
                reject(new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (${this.requestTimeout / 1000} —Å–µ–∫)`));
            }, this.requestTimeout);
        });
        
        try {
            const apiPromise = this.api.analyzeSingle(this.singleImage, occasion, preferences);
            const result = await Promise.race([apiPromise, timeoutPromise]);
            
            if (!result) {
                throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
            }
            
            this.lastAnalysisResult = result;
            this.analytics.successfulAnalysis++;
            this.showResult(result);
            this.triggerHapticFeedback('success');
            
        } catch (error) {
            this.analytics.errors++;
            
            let errorMessage = '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞';
            
            if (error.message.includes('timeout') || error.message.includes('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è')) {
                errorMessage = '–ê–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
            } else if (error.message.includes('—Å–µ—Ç–∏') || error.message.includes('network')) {
                errorMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
            } else if (error.message.includes('API')) {
                errorMessage = '–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
            } else {
                errorMessage = `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`;
            }
            
            this.showError(errorMessage);
            this.triggerHapticFeedback('error');
        }
    }

    async submitCompare(occasion, preferences) {
        const images = this.compareImages.filter(img => img !== null);
        
        if (images.length < 2) {
            this.showNotification('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        if (!this.api) {
            this.showNotification('‚ùå API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'error');
            this.triggerHapticFeedback('error');
            return;
        }
        
        this.showLoading();
        this.triggerHapticFeedback('medium');
        
        const timeoutPromise = new Promise((_, reject) => {
            setTimeout(() => {
                reject(new Error(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (${this.requestTimeout / 1000} —Å–µ–∫)`));
            }, this.requestTimeout);
        });
        
        try {
            const apiPromise = this.api.analyzeCompare(images, occasion, preferences);
            const result = await Promise.race([apiPromise, timeoutPromise]);
            
            if (!result) {
                throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            }
            
            this.lastAnalysisResult = result;
            this.analytics.successfulAnalysis++;
            this.showResult(result);
            this.triggerHapticFeedback('success');
            
        } catch (error) {
            this.analytics.errors++;
            
            let errorMessage = '–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è';
            
            if (error.message.includes('timeout') || error.message.includes('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è')) {
                errorMessage = '–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —á–µ–º –æ–±—ã—á–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å –º–µ–Ω—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.';
            } else if (error.message.includes('—Ä–∞–∑–º–µ—Ä') || error.message.includes('size')) {
                errorMessage = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å –∏—Ö –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π.';
            } else {
                errorMessage = `–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: ${error.message}`;
            }
            
            this.showError(errorMessage);
            this.triggerHapticFeedback('error');
        }
    }

    // === –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===
    
    showNotification(message, type = 'info', duration = 3000) {
        const existingNotifications = document.querySelectorAll('.notification');
        existingNotifications.forEach(notif => notif.remove());
        
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        
        const icons = {
            'success': '‚úÖ',
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è',
            'info': '‚ÑπÔ∏è'
        };
        
        const colors = {
            'success': '#10B981',
            'error': '#EF4444',
            'warning': '#F59E0B',
            'info': '#3B82F6'
        };
        
        notification.innerHTML = `
            <div style="
                position: fixed;
                top: 20px;
                left: 50%;
                transform: translateX(-50%);
                background: ${colors[type]};
                color: white;
                padding: 12px 20px;
                border-radius: 8px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                z-index: 10000;
                font-weight: 600;
                display: flex;
                align-items: center;
                gap: 8px;
                max-width: 90vw;
                animation: slideInDown 0.3s ease;
            ">
                <span>${icons[type]}</span>
                <span>${message}</span>
            </div>
        `;
        
        if (!document.getElementById('notification-styles')) {
            const styles = document.createElement('style');
            styles.id = 'notification-styles';
            styles.textContent = `
                @keyframes slideInDown {
                    from {
                        opacity: 0;
                        transform: translateX(-50%) translateY(-100%);
                    }
                    to {
                        opacity: 1;
                        transform: translateX(-50%) translateY(0);
                    }
                }
                
                @keyframes slideOutUp {
                    from {
                        opacity: 1;
                        transform: translateX(-50%) translateY(0);
                    }
                    to {
                        opacity: 0;
                        transform: translateX(-50%) translateY(-100%);
                    }
                }

                @keyframes balanceUpdate {
                    0% { transform: scale(1); }
                    50% { transform: scale(1.1); color: #4CAF50; }
                    100% { transform: scale(1); }
                }

                @keyframes slideInRight {
                    from { transform: translateX(100%); opacity: 0; }
                    to { transform: translateX(0); opacity: 1; }
                }

                @keyframes slideOutRight {
                    from { transform: translateX(0); opacity: 1; }
                    to { transform: translateX(100%); opacity: 0; }
                }

                .balance-highlight {
                    color: #4CAF50;
                    font-weight: bold;
                    text-shadow: 0 0 10px rgba(76, 175, 80, 0.3);
                }
            `;
            document.head.appendChild(styles);
        }
        
        document.body.appendChild(notification);
        
        setTimeout(() => {
            const notificationElement = notification.querySelector('div');
            if (notificationElement) {
                notificationElement.style.animation = 'slideOutUp 0.3s ease forwards';
                setTimeout(() => {
                    notification.remove();
                }, 300);
            }
        }, duration);
    }

    // === –ó–ê–ì–†–£–ó–ß–ò–ö–ò –§–ê–ô–õ–û–í ===
    
    initUploaders() {
        this.setupSingleUploader();
        this.setupCompareUploader();
    }

    setupSingleUploader() {
        const preview = document.getElementById('single-preview');
        const fileInput = document.getElementById('single-file-input');
        
        if (preview && fileInput) {
            preview.addEventListener('click', () => {
                fileInput.click();
            });
            
            fileInput.addEventListener('change', (event) => {
                const file = event.target.files[0];
                if (file) {
                    this.handleSingleFile(file);
                }
            });
        }
    }

    setupCompareUploader() {
        const slots = document.querySelectorAll('.compare-slot');
        
        slots.forEach((slot, i) => {
            if (!slot.id) {
                slot.id = `compare-slot-${i}`;
            }
            
            const fileInput = document.getElementById(`compare-file-input-${i}`);
            
            if (slot && fileInput) {
                const newSlot = slot.cloneNode(true);
                slot.parentNode.replaceChild(newSlot, slot);
                
                newSlot.addEventListener('click', () => {
                    fileInput.click();
                });
                
                fileInput.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    if (file) {
                        this.handleCompareFile(file, i);
                    }
                    event.target.value = '';
                });
            }
        });
    }

    handleSingleFile(file) {
        if (!this.validateFile(file)) return;
        
        this.singleImage = file;
        
        const reader = new FileReader();
        reader.onload = (e) => {
            const preview = document.getElementById('single-preview');
            if (preview) {
                preview.innerHTML = `<img src="${e.target.result}" alt="Preview" style="
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    border-radius: 12px;
                ">`;
                preview.classList.add('has-image');
            }
            
            this.showForm();
            this.updateSubmitButton();
            this.triggerHapticFeedback('light');
        };
        
        reader.readAsDataURL(file);
    }

    handleCompareFile(file, slotIndex) {
        if (!this.validateFile(file)) return;
        
        this.compareImages[slotIndex] = file;
        
        const reader = new FileReader();
        reader.onload = (e) => {
            const slot = document.getElementById(`compare-slot-${slotIndex}`);
            if (slot) {
                slot.innerHTML = `<img src="${e.target.result}" alt="Compare ${slotIndex + 1}" style="
                    width: 100%;
                    height: 100%;
                    object-fit: cover;
                    border-radius: 12px;
                ">`;
                slot.classList.add('has-image');
            }
            
            const loadedImages = this.compareImages.filter(img => img !== null).length;
            if (loadedImages >= 2) {
                this.showForm();
            }
            
            this.updateSubmitButton();
            this.triggerHapticFeedback('light');
        };
        
        reader.readAsDataURL(file);
    }

    validateFile(file) {
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        if (!allowedTypes.includes(file.type)) {
            this.showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã JPG, PNG, WEBP.', 'error');
            return false;
        }
        
        const maxSize = 5 * 1024 * 1024; // 5MB
        if (file.size > maxSize) {
            this.showNotification('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä 5–ú–ë.', 'error');
            return false;
        }
        
        return true;
    }

    // === –£–ü–†–ê–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
    
    loadUserData() {
        console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        const balance = localStorage.getItem('user_balance');
        const history = localStorage.getItem('consultations_history');
        
        if (balance !== null) {
            this.userBalance = parseInt(balance, 10);
        } else {
            this.userBalance = 200; // –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        }
        
        if (history) {
            this.consultationsHistory = JSON.parse(history);
        }
        
        this.consultationsUsed = this.consultationsHistory.reduce((acc, curr) => acc + (curr.cost || 10), 0);
        
        this.updateBalanceDisplay();
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', { balance: this.userBalance, history: this.consultationsHistory.length });
    }

    saveUserData() {
        localStorage.setItem('user_balance', this.userBalance.toString());
        localStorage.setItem('consultations_history', JSON.stringify(this.consultationsHistory));
        console.log('üíæ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    }

    initializeUserData() {
        this.userBalance = 200;
        this.consultationsHistory = [];
        this.consultationsUsed = 0;
        this.saveUserData();
        this.updateBalanceDisplay();
        console.log('üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    viewConsultation(index) {
        const consultation = this.consultationsHistory[index];
        if (!consultation) return;

        console.log('üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', index);
        
        this.currentMode = consultation.type;
        this.lastAnalysisResult = consultation;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        this.showModal(consultation.type + '-mode');
        this.showResult(consultation);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        const modalTitle = document.getElementById('modal-title');
        if (modalTitle) {
            modalTitle.textContent = `–ò—Å—Ç–æ—Ä–∏—è: ${consultation.occasion}`;
        }
    }

    getUserId() {
        try {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram WebApp (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
            if (window.Telegram?.WebApp?.initDataUnsafe?.user?.id) {
                const telegramId = window.Telegram.WebApp.initDataUnsafe.user.id;
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω Telegram ID –∏–∑ WebApp:', telegramId);
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –±—É–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                localStorage.setItem('user_id', telegramId.toString());
                localStorage.setItem('telegram_user_id', telegramId.toString());
                return parseInt(telegramId);
            }
            
            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            const urlParams = new URLSearchParams(window.location.search);
            if (urlParams.has('user_id')) {
                const userId = parseInt(urlParams.get('user_id'));
                if (!isNaN(userId)) {
                    console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω user_id –∏–∑ URL:', userId);
                    localStorage.setItem('user_id', userId.toString());
                    localStorage.setItem('telegram_user_id', userId.toString());
                    return userId;
                }
            }
            
            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage —Å –∫–ª—é—á–æ–º 'user_id'
            const storedId = localStorage.getItem('user_id');
            if (storedId && !isNaN(storedId)) {
                const userId = parseInt(storedId);
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω user_id –∏–∑ localStorage:', userId);
                return userId;
            }
            
            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º localStorage —Å –∫–ª—é—á–æ–º 'telegram_user_id'
            const telegramUserId = localStorage.getItem('telegram_user_id');
            if (telegramUserId && !isNaN(telegramUserId)) {
                const userId = parseInt(telegramUserId);
                console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω telegram_user_id –∏–∑ localStorage:', userId);
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–∏
                localStorage.setItem('user_id', userId.toString());
                return userId;
            }
            
            // 5. –¢–µ—Å—Ç–æ–≤—ã–π ID –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–∫–∞–∫ –≤ –ª–æ–≥–∞—Ö - —ç—Ç–æ—Ç ID —Ä–∞–±–æ—Ç–∞–µ—Ç!)
            const testId = 5930269100;
            console.warn('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤—ã–π telegram_id:', testId);
            localStorage.setItem('user_id', testId.toString());
            localStorage.setItem('telegram_user_id', testId.toString());
            return testId;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è user ID:', error);
            const fallbackId = 5930269100;
            console.warn('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback telegram_id:', fallbackId);
            localStorage.setItem('user_id', fallbackId.toString());
            localStorage.setItem('telegram_user_id', fallbackId.toString());
            return fallbackId;
        }
    }

    deductConsultation(cost = 10) {
        this.userBalance -= cost;
        this.consultationsUsed += cost;
        this.updateBalanceDisplay();
        this.saveUserData();
    }

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò UI ===
    
    setupCloseButtons() {
        const closeButtons = document.querySelectorAll('.close-btn');
        closeButtons.forEach(btn => {
            btn.addEventListener('click', () => {
                const modal = btn.closest('.modal-overlay');
                if (modal) {
                    modal.classList.remove('active');
                }
            });
        });
    }

    setupSubmitButton() {
        const submitBtn = document.getElementById('form-submit');
        
        if (submitBtn && !submitBtn.dataset.listener) {
            submitBtn.dataset.listener = 'true';
            
            submitBtn.addEventListener('click', (e) => {
                e.preventDefault();
                e.stopPropagation();
                
                if (!submitBtn.disabled) {
                    this.submit();
                }
            });
        }
    }

    setupOccasionDropdown() {
        const occasionInput = document.getElementById('occasion');
        const optionsContainer = document.getElementById('occasion-options');
        
        if (!occasionInput || !optionsContainer) return;
        
        let optionsHTML = '';
        this.occasionOptions.forEach(option => {
            optionsHTML += `<div class="occasion-option">${option}</div>`;
        });
        
        optionsContainer.innerHTML = optionsHTML;
        
        occasionInput.addEventListener('focus', () => {
            optionsContainer.classList.add('active');
        });
        
        document.addEventListener('click', (e) => {
            if (!occasionInput.contains(e.target) && !optionsContainer.contains(e.target)) {
                optionsContainer.classList.remove('active');
            }
        });
        
        optionsContainer.querySelectorAll('.occasion-option').forEach(option => {
            option.addEventListener('click', () => {
                occasionInput.value = option.textContent;
                optionsContainer.classList.remove('active');
                this.updateSubmitButton();
            });
        });
    }

    setupResultNavigation() {
        document.body.addEventListener('click', e => {
            if (e.target.id === 'result-back') {
                this.backToSelection();
            } else if (e.target.id === 'result-new') {
                this.startNewAnalysis();
            }
        });
    }

    backToSelection() {
        this.hideResult();
        
        if (this.currentMode === 'single') {
            this.showForm();
        } else if (this.currentMode === 'compare') {
            this.showForm();
        }
    }

    startNewAnalysis() {
        this.closeModal();
    }

    // === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° TELEGRAM ===
    
    setupTelegramIntegration() {
        if (window.Telegram && window.Telegram.WebApp) {
            console.log('üì± Telegram WebApp –æ–±–Ω–∞—Ä—É–∂–µ–Ω');
            
            const tg = window.Telegram.WebApp;
            
            tg.ready();
            tg.expand();
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–º—ã
            const theme = tg.colorScheme;
            document.body.className = theme === 'dark' ? 'dark-theme' : 'light-theme';
            
            tg.onEvent('themeChanged', () => {
                document.body.className = tg.colorScheme === 'dark' ? 'dark-theme' : 'light-theme';
            });
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
            tg.MainButton.text = '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è';
            tg.MainButton.onClick(() => {
                if (this.lastAnalysisResult) {
                    tg.sendData(JSON.stringify(this.lastAnalysisResult));
                }
            });
        }
    }

    triggerHapticFeedback(type = 'light') {
        if (window.Telegram && window.Telegram.WebApp && window.Telegram.WebApp.HapticFeedback) {
            const haptic = window.Telegram.WebApp.HapticFeedback;
            
            switch (type) {
                case 'light': haptic.impactOccurred('light'); break;
                case 'medium': haptic.impactOccurred('medium'); break;
                case 'heavy': haptic.impactOccurred('heavy'); break;
                case 'rigid': haptic.impactOccurred('rigid'); break;
                case 'soft': haptic.impactOccurred('soft'); break;
                case 'error': haptic.notificationOccurred('error'); break;
                case 'success': haptic.notificationOccurred('success'); break;
                case 'warning': haptic.notificationOccurred('warning'); break;
                default: haptic.impactOccurred('light');
            }
        }
    }

    // === üö® –î–û–ë–ê–í–õ–ï–ù–û –î–õ–Ø –ù–û–í–û–ô –ù–ê–í–ò–ì–ê–¶–ò–ò ===
    initModularNavigation() {
        console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');
        
        if (!window.MishuraApp) window.MishuraApp = {};
        if (!window.MishuraApp.components) window.MishuraApp.components = {};
        
        const navigation = new window.MishuraNavigation(this);
        window.MishuraApp.components.navigation = navigation;
        
        navigation.init();
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        this.navigateToSection('home');
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    if (!window.mishuraApp) {
        window.mishuraApp = new MishuraApp();
    }
});