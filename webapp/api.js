// üöÄ –ü–†–ï–ú–ò–£–ú API –ö–õ–ò–ï–ù–¢ - webapp/api.js
// –í–µ—Ä—Å–∏—è: 2.0.0 - –õ—É—á—à–∏–π TMA –≤ –º–∏—Ä–µ
console.log('üîó –ü—Ä–µ–º–∏—É–º API –∫–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

class MishuraAPIService {
    constructor() {
        this.baseURL = '/api/v1';
        this.timeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
        this.retryCount = 3;
        this.retryDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞
        
        console.log('‚úÖ MishuraAPIService —Å–æ–∑–¥–∞–Ω:', this.baseURL);
        this.logSystemInfo();
    }

    logSystemInfo() {
        console.log('üì± –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', {
            userAgent: navigator.userAgent,
            platform: navigator.platform,
            language: navigator.language,
            online: navigator.onLine,
            cookieEnabled: navigator.cookieEnabled,
            viewport: `${window.innerWidth}x${window.innerHeight}`,
            pixelRatio: window.devicePixelRatio || 1
        });
    }

    // üîß –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
    async makeRequest(url, options = {}) {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.timeout);

        try {
            const response = await fetch(url, {
                ...options,
                signal: controller.signal
            });

            clearTimeout(timeoutId);
            return response;
        } catch (error) {
            clearTimeout(timeoutId);
            if (error.name === 'AbortError') {
                throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞');
            }
            throw error;
        }
    }

    async retryRequest(requestFn, retries = this.retryCount) {
        try {
            return await requestFn();
        } catch (error) {
            if (retries > 0 && this.isRetryableError(error)) {
                console.warn(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${this.retryCount - retries + 1}/${this.retryCount} –Ω–µ—É–¥–∞—á–Ω–∞, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ ${this.retryDelay}–º—Å...`);
                await this.delay(this.retryDelay);
                return this.retryRequest(requestFn, retries - 1);
            }
            throw error;
        }
    }

    isRetryableError(error) {
        // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫, –Ω–µ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        return error.message.includes('NetworkError') || 
               error.message.includes('Failed to fetch') ||
               error.message.includes('timeout');
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // üìä –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    validateImage(file) {
        const errors = [];
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
        if (!allowedTypes.includes(file.type)) {
            errors.push(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${file.type}. –†–∞–∑—Ä–µ—à–µ–Ω—ã: JPEG, PNG, WebP`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ (–º–∞–∫—Å–∏–º—É–º 10MB)
        const maxSize = 10 * 1024 * 1024;
        if (file.size > maxSize) {
            errors.push(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${(file.size / 1024 / 1024).toFixed(1)}MB. –ú–∞–∫—Å–∏–º—É–º: 10MB`);
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        const minSize = 1024; // 1KB
        if (file.size < minSize) {
            errors.push('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
        }
        
        return {
            isValid: errors.length === 0,
            errors
        };
    }

    // üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    async optimizeImage(file, maxWidth = 1024, quality = 0.8) {
        return new Promise((resolve) => {
            const canvas = document.createElement('canvas');
            const ctx = canvas.getContext('2d');
            const img = new Image();
            
            img.onload = () => {
                // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                let { width, height } = img;
                if (width > maxWidth) {
                    height = (height * maxWidth) / width;
                    width = maxWidth;
                }
                
                canvas.width = width;
                canvas.height = height;
                
                // –†–∏—Å—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                ctx.drawImage(img, 0, 0, width, height);
                
                // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
                canvas.toBlob(resolve, 'image/jpeg', quality);
            };
            
            img.src = URL.createObjectURL(file);
        });
    }

    // üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –º–µ—Ç–æ–¥)
    async analyzeCompare(imageFiles, occasion, preferences = '') {
        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ`);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!Array.isArray(imageFiles) || imageFiles.length < 2) {
            throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
        }
        
        if (imageFiles.length > 4) {
            throw new Error('–ú–∞–∫—Å–∏–º—É–º 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
        }
        
        if (!occasion.trim()) {
            throw new Error('–£–∫–∞–∂–∏—Ç–µ –ø–æ–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        for (let i = 0; i < imageFiles.length; i++) {
            const validation = this.validateImage(imageFiles[i]);
            if (!validation.isValid) {
                throw new Error(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}: ${validation.errors.join(', ')}`);
            }
        }
        
        const requestFn = async () => {
            const formData = new FormData();
            
            // –ü–†–ê–í–ò–õ–¨–ù–´–ô —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
            formData.append('image_0', imageFiles[0]);
            formData.append('image_1', imageFiles[1]);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
            if (imageFiles[2]) formData.append('image_2', imageFiles[2]);
            if (imageFiles[3]) formData.append('image_3', imageFiles[3]);
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã –ø—É—Å—Ç—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            for (let i = imageFiles.length; i < 5; i++) {
                const emptyFile = new File([''], '', { type: 'image/jpeg' });
                formData.append(`image_${i}`, emptyFile);
            }
            
            formData.append('occasion', occasion.trim());
            formData.append('preferences', `${preferences.trim()}. –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤ –ø–æ —Ü–≤–µ—Ç–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä "–°–∏–Ω–∏–π –æ–±—Ä–∞–∑", "–ö—Ä–∞—Å–Ω—ã–π –æ–±—Ä–∞–∑") –≤–º–µ—Å—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ–¥–µ–∂–¥—ã. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ä–∞–∑–¥–µ–ª–æ–≤.`);
            formData.append('metadata', JSON.stringify({
                count: imageFiles.length,
                timestamp: new Date().toISOString(),
                userAgent: navigator.userAgent,
                viewport: `${window.innerWidth}x${window.innerHeight}`,
                formatRequest: 'structured_with_short_titles'
            }));

            console.log('üì§ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:');
            for (let [key, value] of formData.entries()) {
                if (value instanceof File) {
                    console.log(`  ${key}: File(${value.name}, ${value.size} bytes, ${value.type})`);
                } else {
                    console.log(`  ${key}: ${value}`);
                }
            }

            const response = await this.makeRequest(`${this.baseURL}/analyze/compare`, {
                method: 'POST',
                body: formData,
                // –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç —Å boundary
            });

            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

            if (!response.ok) {
                let errorText;
                try {
                    const errorJson = await response.json();
                    errorText = errorJson.message || errorJson.detail || response.statusText;
                } catch {
                    errorText = await response.text() || response.statusText;
                }
                
                console.error('‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', {
                    status: response.status,
                    statusText: response.statusText,
                    errorText,
                    headers: Object.fromEntries(response.headers.entries())
                });
                
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status}): ${errorText}`);
            }

            const result = await response.json();
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
            return result;
        };

        return this.retryRequest(requestFn);
    }

    // üì∑ –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    async analyzeSingle(imageFile, occasion, preferences = '') {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∞–Ω–∞–ª–∏–∑');
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!imageFile) {
            throw new Error('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ');
        }
        
        if (!occasion.trim()) {
            throw new Error('–£–∫–∞–∂–∏—Ç–µ –ø–æ–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏');
        }
        
        const validation = this.validateImage(imageFile);
        if (!validation.isValid) {
            throw new Error(validation.errors.join(', '));
        }
        
        const requestFn = async () => {
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            const optimizedImage = await this.optimizeImage(imageFile);
            
            const formData = new FormData();
            formData.append('image', optimizedImage || imageFile);
            formData.append('occasion', occasion.trim());
            formData.append('preferences', `${preferences.trim()}. –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–∞ –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Ü–≤–µ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä "–°–∏–Ω–∏–π –æ–±—Ä–∞–∑") –≤–º–µ—Å—Ç–æ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ–¥–µ–∂–¥—ã. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å —á–µ—Ç–∫–∏–º–∏ —Ä–∞–∑–¥–µ–ª–∞–º–∏ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏.`);
            formData.append('metadata', JSON.stringify({
                originalSize: imageFile.size,
                optimizedSize: optimizedImage ? optimizedImage.size : imageFile.size,
                timestamp: new Date().toISOString(),
                userAgent: navigator.userAgent,
                viewport: `${window.innerWidth}x${window.innerHeight}`,
                formatRequest: 'structured_with_short_title'
            }));

            console.log('üì§ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ FormData:');
            for (let [key, value] of formData.entries()) {
                if (value instanceof File || value instanceof Blob) {
                    console.log(`  ${key}: ${value.constructor.name}(${value.size} bytes, ${value.type})`);
                } else {
                    console.log(`  ${key}: ${value}`);
                }
            }

            const response = await this.makeRequest(`${this.baseURL}/analyze/single`, {
                method: 'POST',
                body: formData,
            });

            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status, response.statusText);

            if (!response.ok) {
                let errorText;
                try {
                    const errorJson = await response.json();
                    errorText = errorJson.message || errorJson.detail || response.statusText;
                } catch {
                    errorText = await response.text() || response.statusText;
                }
                
                console.error('‚ùå –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', {
                    status: response.status,
                    statusText: response.statusText,
                    errorText,
                    headers: Object.fromEntries(response.headers.entries())
                });
                
                throw new Error(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (${response.status}): ${errorText}`);
            }

            const result = await response.json();
            console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω');
            return result;
        };

        return this.retryRequest(requestFn);
    }

    // üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    async healthCheck() {
        try {
            const response = await this.makeRequest('/health', {
                method: 'GET',
            });
            
            if (response.ok) {
                const health = await response.json();
                console.log('üè• –°—Ç–∞—Ç—É—Å API:', health);
                return {
                    isHealthy: true,
                    data: health
                };
            } else {
                console.warn('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –Ω–µ OK —Å—Ç–∞—Ç—É—Å:', response.status);
                return {
                    isHealthy: false,
                    error: `HTTP ${response.status}`
                };
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API:', error);
            return {
                isHealthy: false,
                error: error.message
            };
        }
    }

    // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫
    async getStats() {
        try {
            const response = await this.makeRequest(`${this.baseURL}/stats`, {
                method: 'GET',
            });
            
            if (response.ok) {
                return await response.json();
            }
            return null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return null;
        }
    }

    // üîß Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    async getDebugInfo() {
        try {
            const response = await this.makeRequest('/debug/info', {
                method: 'GET',
            });
            
            if (response.ok) {
                const debug = await response.json();
                console.log('üîß Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', debug);
                return debug;
            }
            return null;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', error);
            return null;
        }
    }

    // üì± –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Telegram Mini App
    checkTelegramCompatibility() {
        const isTelegram = window.Telegram && window.Telegram.WebApp;
        const compatibility = {
            isTelegramWebApp: isTelegram,
            version: isTelegram ? window.Telegram.WebApp.version : null,
            platform: isTelegram ? window.Telegram.WebApp.platform : navigator.platform,
            colorScheme: isTelegram ? window.Telegram.WebApp.colorScheme : 'light',
            isExpanded: isTelegram ? window.Telegram.WebApp.isExpanded : false,
            viewportHeight: isTelegram ? window.Telegram.WebApp.viewportHeight : window.innerHeight,
            features: {
                hapticFeedback: isTelegram && window.Telegram.WebApp.HapticFeedback,
                mainButton: isTelegram && window.Telegram.WebApp.MainButton,
                backButton: isTelegram && window.Telegram.WebApp.BackButton,
                cloudStorage: isTelegram && window.Telegram.WebApp.CloudStorage
            }
        };
        
        console.log('üì± –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Telegram:', compatibility);
        return compatibility;
    }
}

// üöÄ –≠–∫—Å–ø–æ—Ä—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å
window.MishuraAPIService = MishuraAPIService;
console.log('‚úÖ –ü—Ä–µ–º–∏—É–º MishuraAPIService –¥–æ—Å—Ç—É–ø–µ–Ω –≤ window');

// üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    if (window.MishuraAPIService) {
        const api = new window.MishuraAPIService();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Telegram
        api.checkTelegramCompatibility();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
        const health = await api.healthCheck();
        if (!health.isHealthy) {
            console.warn('‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', health.error);
        }
        
        console.log('üéâ API –∫–ª–∏–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
});