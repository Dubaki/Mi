import os
import uuid
import asyncio
import logging
import json
from datetime import datetime, timezone
from typing import Dict, Any, Optional

import requests
from yookassa import Configuration, Payment, Settings
from yookassa.domain.models import Currency
from yookassa.domain.exceptions import ApiError, ResponseProcessingError

from database import MishuraDB

logger = logging.getLogger(__name__)

class PaymentService:
    def __init__(self, shop_id: str, secret_key: str, db: MishuraDB, test_mode: bool = False):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
        self.shop_id = shop_id
        self.secret_key = secret_key
        self.db = db
        self.test_mode = test_mode
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Æ–ö–∞—Å—Å—ã
        try:
            Configuration.configure(
                account_id=shop_id,
                secret_key=secret_key
            )
            logger.info(f"‚úÖ –ÆKassa –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: shop_id={shop_id}, test_mode={test_mode}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ÆKassa: {e}")
            raise

    def create_payment(self, payment_id: str, amount: float, description: str, 
                      return_url: str, user_id: int, telegram_id: int, 
                      plan_id: str, stcoins_amount: int) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫"""
        
        try:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            conn = self.db.get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO payments (
                    payment_id, user_id, telegram_id, plan_id, 
                    amount, stcoins_amount, status
                ) VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                payment_id, user_id, telegram_id, plan_id,
                amount, stcoins_amount, 'pending'
            ))
            conn.commit()
            conn.close()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ÆKassa
            payment_data = {
                "amount": {
                    "value": f"{amount:.1f}",
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": return_url
                },
                "capture": True,
                "description": description,
                "test": self.test_mode,
                "metadata": {
                    "payment_id": payment_id,
                    "telegram_id": str(telegram_id),
                    "plan_id": plan_id,
                    "stcoins": str(stcoins_amount)
                },
                "receipt": {
                    "customer": {
                        "email": f"user{telegram_id}@mishura.style"
                    },
                    "items": [
                        {
                            "description": f"{description} ({stcoins_amount} STCoins)",
                            "quantity": "1.00",
                            "amount": {
                                "value": f"{amount:.2f}",
                                "currency": "RUB"
                            },
                            "vat_code": 1,
                            "payment_mode": "full_payment",
                            "payment_subject": "service"
                        }
                    ]
                }
            }
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ÆKassa: {payment_data}")
            
            # –ö–†–ò–¢–ò–ß–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–µ—Ä–µ—Ö–≤–∞—Ç–æ–º –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
            try:
                payment = Payment.create(payment_data)
                
            except Exception as e:
                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
                error_details = self._extract_error_details(e)
                logger.error(f"‚ùå –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–®–ò–ë–ö–ê –Æ–ö–ê–°–°–´: {error_details}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                self._update_payment_status(payment_id, 'failed', str(e))
                
                # –ü–æ–¥–Ω–∏–º–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                raise Exception(f"–ÆKassa –æ—à–∏–±–∫–∞: {error_details}")
            
            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –≤ –ÆKassa: {payment.id}")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å ID –æ—Ç –ÆKassa
            conn = self.db.get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE payments 
                SET yookassa_payment_id = ?, updated_at = CURRENT_TIMESTAMP
                WHERE payment_id = ?
            """, (payment.id, payment_id))
            conn.commit()
            conn.close()
            
            return {
                "status": "success",
                "payment_id": payment_id,
                "yookassa_payment_id": payment.id,
                "payment_url": payment.confirmation.confirmation_url,
                "amount": amount,
                "currency": "RUB"
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            raise

    def _extract_error_details(self, error: Exception) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ"""
        
        try:
            # –î–ª—è HTTP –æ—à–∏–±–æ–∫ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            if hasattr(error, 'response'):
                response = error.response
                
                error_info = {
                    "http_status": getattr(response, 'status_code', 'unknown'),
                    "url": getattr(response, 'url', 'unknown'),
                    "headers": dict(getattr(response, 'headers', {})),
                }
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å JSON —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
                try:
                    if hasattr(response, 'text'):
                        response_text = response.text
                        error_info["response_body"] = response_text
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
                        try:
                            response_json = json.loads(response_text)
                            error_info["response_json"] = response_json
                        except:
                            pass
                            
                except Exception as e:
                    error_info["response_extraction_error"] = str(e)
                
                return json.dumps(error_info, indent=2, ensure_ascii=False)
                
            # –î–ª—è API –æ—à–∏–±–æ–∫ –Æ–ö–∞—Å—Å—ã
            elif isinstance(error, (ApiError, ResponseProcessingError)):
                api_error_info = {
                    "error_type": type(error).__name__,
                    "error_message": str(error),
                    "http_code": getattr(error, 'http_code', 'unknown'),
                    "error_code": getattr(error, 'error_code', 'unknown'),
                    "description": getattr(error, 'description', 'unknown'),
                    "parameter": getattr(error, 'parameter', 'unknown'),
                    "retry_after": getattr(error, 'retry_after', 'unknown'),
                }
                
                return json.dumps(api_error_info, indent=2, ensure_ascii=False)
            
            # –û–±—â–∏–µ –æ—à–∏–±–∫–∏
            else:
                return f"–û–±—â–∞—è –æ—à–∏–±–∫–∞: {type(error).__name__}: {str(error)}"
                
        except Exception as extraction_error:
            return f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π: {extraction_error}. –ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞: {error}"

    def _update_payment_status(self, payment_id: str, status: str, error_message: str = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            if error_message:
                logger.error(f"üí≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {status} - {error_message}")
            else:
                logger.info(f"üí≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {status}")
                
            conn = self.db.get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE payments 
                SET status = ?, updated_at = CURRENT_TIMESTAMP
                WHERE payment_id = ?
            """, (status, payment_id))
            conn.commit()
            conn.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")

    def process_successful_payment(self, yookassa_payment_id: str) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            # –ü–æ–∏—Å–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î
            conn = self.db.get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT payment_id, user_id, telegram_id, stcoins_amount, status
                FROM payments 
                WHERE yookassa_payment_id = ?
            """, (yookassa_payment_id,))
            
            payment_record = cursor.fetchone()
            if not payment_record:
                logger.error(f"‚ùå –ü–ª–∞—Ç–µ–∂ {yookassa_payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –ë–î")
                conn.close()
                return False

            local_payment_id, user_id, telegram_id, stcoins_amount, current_status = payment_record

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if current_status == "succeeded":
                logger.info(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {yookassa_payment_id} —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                conn.close()
                return True

            logger.info(f"üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {yookassa_payment_id}, –Ω–∞—á–∏—Å–ª—è–µ–º {stcoins_amount} STCoins")
            
            # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ STCoins
            new_balance = self.db.update_user_balance(telegram_id, stcoins_amount, "payment")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
            cursor.execute("""
                UPDATE payments 
                SET status = 'succeeded', processed_at = CURRENT_TIMESTAMP
                WHERE payment_id = ?
            """, (local_payment_id,))
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ {yookassa_payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {yookassa_payment_id}: {e}")
            return False

    def get_payment_status(self, payment_id: str, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT payment_id, yookassa_payment_id, status, amount, 
                       stcoins_amount, created_at, processed_at
                FROM payments 
                WHERE payment_id = ? AND telegram_id = ?
            """, (payment_id, telegram_id))
            
            payment = cursor.fetchone()
            conn.close()
            if not payment:
                return None

            return {
                "payment_id": payment[0],
                "yookassa_payment_id": payment[1],
                "status": payment[2],
                "amount": payment[3],
                "stcoins_amount": payment[4],
                "created_at": payment[5],
                "processed_at": payment[6]
            }
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return None 