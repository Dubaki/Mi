#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé≠ –ú–ò–®–£–†–ê - Payment Service
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ÆKassa
"""

import os
import uuid
import logging
from yookassa import Configuration, Payment

# –ó–∞–º–µ–Ω—è–µ–º structlog –Ω–∞ –æ–±—ã—á–Ω—ã–π logging
logger = logging.getLogger(__name__)

class PaymentService:
    def __init__(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.shop_id = os.getenv('YOOKASSA_SHOP_ID')
        self.secret_key = os.getenv('YOOKASSA_SECRET_KEY')
        
        if not self.shop_id or not self.secret_key:
            raise ValueError("–ÆKassa credentials –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ÆKassa
        Configuration.account_id = self.shop_id
        Configuration.secret_key = self.secret_key
        
        logger.info(f"–ÆKassa –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: shop_id={self.shop_id}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
        self._init_payments_db()
    
    def _init_payments_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            from database import get_connection
            
            conn = get_connection()
            cursor = conn.cursor()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø —Å—Ö–µ–º–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS payments (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    payment_id TEXT UNIQUE NOT NULL,
                    telegram_id INTEGER NOT NULL,
                    plan_id TEXT NOT NULL,
                    amount DECIMAL(10,2) NOT NULL,
                    status TEXT DEFAULT 'pending',
                    yookassa_payment_id TEXT,
                    stcoins_amount INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """)
            
            # –ú–ò–ì–†–ê–¶–ò–Ø: –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É payments
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã payments
                cursor.execute("PRAGMA table_info(payments)")
                columns = cursor.fetchall()
                column_names = [col[1] for col in columns]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                migrations_needed = []
                
                if 'stcoins_amount' not in column_names:
                    migrations_needed.append("ALTER TABLE payments ADD COLUMN stcoins_amount INTEGER DEFAULT 0")
                    logger.info("–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ stcoins_amount –≤ —Ç–∞–±–ª–∏—Ü—É payments")
                
                if 'plan_id' not in column_names:
                    migrations_needed.append("ALTER TABLE payments ADD COLUMN plan_id TEXT")
                    logger.info("–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ plan_id –≤ —Ç–∞–±–ª–∏—Ü—É payments")
                    
                if 'telegram_id' not in column_names:
                    migrations_needed.append("ALTER TABLE payments ADD COLUMN telegram_id INTEGER")
                    logger.info("–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ telegram_id –≤ —Ç–∞–±–ª–∏—Ü—É payments")
                    
                if 'payment_id' not in column_names:
                    migrations_needed.append("ALTER TABLE payments ADD COLUMN payment_id TEXT UNIQUE")
                    logger.info("–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ payment_id –≤ —Ç–∞–±–ª–∏—Ü—É payments")
                    
                if 'yookassa_payment_id' not in column_names:
                    migrations_needed.append("ALTER TABLE payments ADD COLUMN yookassa_payment_id TEXT")
                    logger.info("–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ yookassa_payment_id –≤ —Ç–∞–±–ª–∏—Ü—É payments")
                    
                if 'updated_at' not in column_names:
                    migrations_needed.append("ALTER TABLE payments ADD COLUMN updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP")
                    logger.info("–ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ updated_at –≤ —Ç–∞–±–ª–∏—Ü—É payments")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
                for migration in migrations_needed:
                    cursor.execute(migration)
                    logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è: {migration}")
                
                if migrations_needed:
                    conn.commit()
                    logger.info(f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ {len(migrations_needed)} –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã payments")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
                    try:
                        # –ö–∞—Ä—Ç–∞ –ø–ª–∞–Ω_id -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ STcoin
                        plan_stcoins_map = {
                            'test': 10,
                            'basic': 100, 
                            'standard': 300,
                            'premium': 1000
                        }
                        
                        for plan_id, stcoins in plan_stcoins_map.items():
                            cursor.execute("""
                                UPDATE payments 
                                SET stcoins_amount = ? 
                                WHERE plan_id = ? AND (stcoins_amount = 0 OR stcoins_amount IS NULL)
                            """, (stcoins, plan_id))
                            
                            updated_rows = cursor.rowcount
                            if updated_rows > 0:
                                logger.info(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_rows} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–ª–∞–Ω–∞ {plan_id}")
                        
                        conn.commit()
                        logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è stcoins_amount –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                        
                    except Exception as migration_error:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è stcoins_amount: {migration_error}")
                else:
                    logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ payments —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è")
                    
            except Exception as migration_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ payments: {migration_error}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–∞—è —Å—Ö–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞
            
            conn.commit()
            conn.close()
            logger.info("Payment schema migration completed")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –ø–ª–∞—Ç–µ–∂–µ–π: {str(e)}")
            raise

    def get_payment(self, payment_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –ø–æ ID"""
        try:
            from database import get_connection
            
            conn = get_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT payment_id, telegram_id, plan_id, amount, status, 
                       yookassa_payment_id, stcoins_amount, created_at, updated_at
                FROM payments 
                WHERE payment_id = ?
            """, (payment_id,))
            
            payment = cursor.fetchone()
            conn.close()
            
            if payment:
                return {
                    'payment_id': payment[0],
                    'user_id': payment[1],  # –ò–°–ü–†–ê–í–õ–ï–ù–û: telegram_id –∫–∞–∫ user_id
                    'telegram_id': payment[1],
                    'plan_id': payment[2],
                    'amount': payment[3],
                    'status': payment[4],
                    'yookassa_payment_id': payment[5],
                    'stcoins_amount': payment[6],
                    'created_at': payment[7],
                    'updated_at': payment[8]
                }
            return None
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {str(e)}")
            return None

    def save_payment(self, payment_id, telegram_id, plan_id, amount, yookassa_payment_id=None, stcoins_amount=0):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from database import get_connection
            
            conn = get_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                INSERT INTO payments (payment_id, telegram_id, plan_id, amount, yookassa_payment_id, stcoins_amount)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (payment_id, telegram_id, plan_id, amount, yookassa_payment_id, stcoins_amount))
            
            conn.commit()
            conn.close()
            
            logger.info(f"Payment saved: {payment_id} for user {telegram_id}, plan {plan_id}, amount {amount}, stcoins {stcoins_amount}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            raise

    def update_payment_status(self, payment_id, status):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            from database import get_connection
            
            conn = get_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                UPDATE payments 
                SET status = ?, updated_at = datetime('now')
                WHERE payment_id = ?
            """, (status, payment_id))
            
            conn.commit()
            conn.close()
            
            logger.info(f"Payment {payment_id} status updated to {status}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            raise

    async def create_payment(self, amount, description, telegram_id, plan_id, return_url=None):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
            payment_id = str(uuid.uuid4())
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–ª—É—á–∞–µ–º stcoins_amount –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞
            from pricing_config import PRICING_PLANS
            plan_config = PRICING_PLANS.get(plan_id)
            stcoins_amount = plan_config.get('stcoins', 0) if plan_config else 0
            
            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ÆKassa
            payment_request = {
                "amount": {
                    "value": str(amount),
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": return_url or "https://style-ai-bot.onrender.com/webapp"
                },
                "capture": True,
                "description": description,
                "metadata": {
                    "telegram_id": str(telegram_id),
                    "plan_id": plan_id,
                    "internal_payment_id": payment_id,
                    "stcoins_amount": str(stcoins_amount)
                }
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
            yookassa_payment = Payment.create(payment_request, payment_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.save_payment(
                payment_id=payment_id,
                telegram_id=telegram_id,
                plan_id=plan_id,
                amount=amount,
                yookassa_payment_id=yookassa_payment.id,
                stcoins_amount=stcoins_amount
            )
            
            return {
                "payment_id": payment_id,
                "yookassa_payment_id": yookassa_payment.id,
                "payment_url": yookassa_payment.confirmation.confirmation_url,
                "amount": amount,
                "currency": "RUB",
                "status": yookassa_payment.status,
                "stcoins_amount": stcoins_amount
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
            raise

    def get_user_payments(self, telegram_id, limit=10):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            from database import get_connection
            
            conn = get_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT payment_id, plan_id, amount, status, stcoins_amount, created_at, updated_at
                FROM payments 
                WHERE telegram_id = ?
                ORDER BY created_at DESC
                LIMIT ?
            """, (telegram_id, limit))
            
            payments = cursor.fetchall()
            conn.close()
            
            result = []
            for payment in payments:
                result.append({
                    'payment_id': payment[0],
                    'plan_id': payment[1],
                    'amount': payment[2],
                    'status': payment[3],
                    'stcoins_amount': payment[4],
                    'created_at': payment[5],
                    'updated_at': payment[6]
                })
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {str(e)}")
            return []