#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé≠ –ú–ò–®–£–†–ê - Payment Service
–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ÆKassa
–í–µ—Ä—Å–∏—è 3.0.0 - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PostgreSQL
"""

import os
import uuid
import logging
from datetime import datetime
import asyncio
try:
    import builtins
except ImportError:
    import __builtin__ as builtins
from yookassa import Configuration, Payment

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class PaymentService:
    def __init__(self, shop_id: str, secret_key: str, db, test_mode: bool = False):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        self.db = db
        self.test_mode = test_mode
        
        # üîê –ù–û–í–û–ï: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        self.financial_service = None
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π financial_service
            if hasattr(builtins, 'GLOBAL_FINANCIAL_SERVICE'):
                self.financial_service = builtins.GLOBAL_FINANCIAL_SERVICE
                logger.info("‚úÖ FinancialService –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö")
            else:
                # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π
                try:
                    from financial_service import FinancialService
                    self.financial_service = FinancialService(db)
                    logger.info("‚úÖ FinancialService —Å–æ–∑–¥–∞–Ω –≤ PaymentService")
                except ImportError:
                    logger.warning("‚ö†Ô∏è FinancialService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ FinancialService: {e}")
            self.financial_service = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
        Configuration.account_id = shop_id
        Configuration.secret_key = secret_key
        
        logger.info(f"–ÆKassa –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: shop_id={shop_id}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π
        self._init_payments_db()
    
    def _init_payments_db(self):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è SQLite –∏ PostgreSQL"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
            db_config = getattr(self.db, 'DB_CONFIG', {'type': 'sqlite'})
            db_type = db_config.get('type', 'sqlite')
            
            if db_type == 'postgresql':
                # PostgreSQL: –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ information_schema
                cursor.execute("""
                    SELECT EXISTS (
                        SELECT FROM information_schema.tables 
                        WHERE table_name = 'payments'
                    );
                """)
                table_exists = cursor.fetchone()[0]
                
                if table_exists:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è PostgreSQL
                    cursor.execute("""
                        SELECT column_name FROM information_schema.columns 
                        WHERE table_name = 'payments'
                        ORDER BY ordinal_position
                    """)
                    columns = [row[0] for row in cursor.fetchall()]
                    logger.info(f"PostgreSQL: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ payments: {columns}")
                else:
                    logger.info("PostgreSQL: –¢–∞–±–ª–∏—Ü–∞ payments –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ schema")
                    
            else:
                # SQLite: –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
                cursor.execute("""
                    SELECT name FROM sqlite_master 
                    WHERE type='table' AND name='payments'
                """)
                table_exists = cursor.fetchone() is not None
                
                if table_exists:
                    cursor.execute("PRAGMA table_info(payments)")
                    columns = [row[1] for row in cursor.fetchall()]
                    logger.info(f"SQLite: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ payments: {columns}")
                else:
                    logger.info("SQLite: –¢–∞–±–ª–∏—Ü–∞ payments –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ schema")
            
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü–∞ payments –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã payments: {e}")
            if conn:
                conn.rollback()
        finally:
            if conn:
                conn.close()
    
    def _execute_payment_query(self, query: str, params=None, fetch_one=False, fetch_all=False):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π"""
        try:
            conn = self.db.get_connection()
            cursor = conn.cursor()
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è PostgreSQL
            db_config = getattr(self.db, 'DB_CONFIG', {'type': 'sqlite'})
            if db_config.get('type') == 'postgresql' and params:
                # PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç %s –≤–º–µ—Å—Ç–æ ?
                query = query.replace('?', '%s')
            
            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)
            
            result = None
            if fetch_one:
                result = cursor.fetchone()
            elif fetch_all:
                result = cursor.fetchall()
            
            if query.strip().upper().startswith(('INSERT', 'UPDATE', 'DELETE')):
                conn.commit()
                if query.strip().upper().startswith('INSERT'):
                    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    if db_config.get('type') == 'postgresql':
                        cursor.execute("SELECT LASTVAL()")
                        result = cursor.fetchone()[0]
                    else:
                        result = cursor.lastrowid
            
            conn.close()
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            if 'conn' in locals():
                conn.rollback()
                conn.close()
            raise
    
    def create_payment(self, payment_id: str, amount: float, description: str, 
                      return_url: str, user_id: int, telegram_id: int, 
                      plan_id: str, stcoins_amount: int) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa"""
        
        try:
            logger.info(f"üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa:")
            logger.info(f"   payment_id: {payment_id}")
            logger.info(f"   amount: {amount}")
            logger.info(f"   return_url: {return_url}")
            logger.info(f"   test_mode: {self.test_mode}")
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
            payment_data = {
                "amount": {
                    "value": str(amount),
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": return_url
                },
                "capture": True,
                "description": description,
                "test": self.test_mode,
                "metadata": {
                    "payment_id": payment_id,
                    "telegram_id": str(telegram_id),
                    "plan_id": plan_id,
                    "stcoins": str(stcoins_amount)
                }
            }
            
            logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ÆKassa: {payment_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ÆKassa
            payment = Payment.create(payment_data)
            
            logger.info(f"üì• –û—Ç–≤–µ—Ç –æ—Ç –ÆKassa: {payment}")
            
            if not payment or not payment.id:
                raise Exception("–ÆKassa –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ ID –ø–ª–∞—Ç–µ–∂–∞")
            
            yookassa_payment_id = payment.id
            payment_url = payment.confirmation.confirmation_url
            
            logger.info(f"‚úÖ –ÆKassa –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {yookassa_payment_id}")
            logger.info(f"üîó URL –æ–ø–ª–∞—Ç—ã: {payment_url}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ —Å yookassa_payment_id
            self.save_payment(
                payment_id=payment_id,
                yookassa_payment_id=yookassa_payment_id,
                user_id=user_id,
                telegram_id=telegram_id,
                plan_id=plan_id,
                amount=amount,
                stcoins_amount=stcoins_amount
            )
            
            return {
                "payment_id": payment_id,
                "yookassa_payment_id": yookassa_payment_id,
                "payment_url": payment_url,
                "status": payment.status
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ÆKassa: {e}", exc_info=True)
            raise
    
    def save_payment(self, payment_id: str, yookassa_payment_id: str, user_id: int, 
                    telegram_id: int, plan_id: str, amount: float, stcoins_amount: int):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            db_config = getattr(self.db, 'DB_CONFIG', {'type': 'sqlite'})
            
            if db_config.get('type') == 'postgresql':
                query = """
                    INSERT INTO payments (
                        payment_id, yookassa_payment_id, user_id, telegram_id, 
                        plan_id, amount, stcoins_amount, status, created_at
                    ) VALUES (%s, %s, %s, %s, %s, %s, %s, 'pending', %s)
                    RETURNING id
                """
                conn = self.db.get_connection()
                cursor = conn.cursor()
                cursor.execute(query, (
                    payment_id, yookassa_payment_id, user_id, telegram_id,
                    plan_id, amount, stcoins_amount, datetime.now()
                ))
                payment_db_id = cursor.fetchone()[0]
                conn.commit()
                conn.close()
            else:
                query = """
                    INSERT INTO payments (
                        payment_id, yookassa_payment_id, user_id, telegram_id, 
                        plan_id, amount, stcoins_amount, status, created_at
                    ) VALUES (?, ?, ?, ?, ?, ?, ?, 'pending', ?)
                """
                payment_db_id = self._execute_payment_query(query, (
                    payment_id, yookassa_payment_id, user_id, telegram_id,
                    plan_id, amount, stcoins_amount, datetime.now()
                ))
            
            logger.info(f"Payment saved: {payment_id} for user {telegram_id}, plan {plan_id}, amount {amount}, stcoins {stcoins_amount}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            raise
    
    def process_successful_payment(self, yookassa_payment_id: str) -> bool:
        """üîê IDEMPOTENT –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —Å –ø–æ–ª–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é"""
        
        correlation_id = f"webhook_{yookassa_payment_id}"
        
        try:
            logger.info(f"üí∞ [{correlation_id}] –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {yookassa_payment_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment_data = self._get_payment_by_yookassa_id(yookassa_payment_id)
            if not payment_data:
                logger.error(f"[{correlation_id}] Payment {yookassa_payment_id} not found")
                return False
            
            logger.info(f"[{correlation_id}] Payment data: user={payment_data['telegram_id']}, amount={payment_data['stcoins_amount']} STcoins")
            
            # üîê –ë–ï–ó–û–ü–ê–°–ù–û–ï –ü–û–ü–û–õ–ù–ï–ù–ò–ï —á–µ—Ä–µ–∑ FinancialService –∏–ª–∏ fallback
            if self.financial_service:
                operation_result = self._safe_credit_balance(payment_data, correlation_id)
            else:
                logger.warning(f"[{correlation_id}] Using legacy payment processing")
                operation_result = self._legacy_credit_balance(payment_data)
            
            if operation_result:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                self._update_payment_status(yookassa_payment_id, 'succeeded')
                logger.info(f"‚úÖ [{correlation_id}] Payment {yookassa_payment_id} processed successfully")
                return True
            else:
                logger.error(f"‚ùå [{correlation_id}] Failed to process payment {yookassa_payment_id}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå [{correlation_id}] Payment processing error: {e}", exc_info=True)
            return False
    
    def get_payment_status(self, payment_id: str, telegram_id: int) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞"""
        
        try:
            query = """
                SELECT payment_id, yookassa_payment_id, plan_id, amount, 
                       stcoins_amount, status, created_at, processed_at
                FROM payments 
                WHERE payment_id = ? AND telegram_id = ?
            """
            
            payment = self._execute_payment_query(query, (payment_id, telegram_id), fetch_one=True)
            
            if not payment:
                return None
            
            payment_id, yookassa_payment_id, plan_id, amount, stcoins_amount, status, created_at, processed_at = payment
            
            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –≤ —Å—Ç–∞—Ç—É—Å–µ pending, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤ –ÆKassa
            if status == 'pending' and yookassa_payment_id:
                try:
                    yookassa_payment = Payment.find_one(yookassa_payment_id)
                    if yookassa_payment and yookassa_payment.status == 'succeeded':
                        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                        self.process_successful_payment(yookassa_payment_id)
                        status = 'succeeded'
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤ –ÆKassa: {e}")
            
            return {
                "payment_id": payment_id,
                "yookassa_payment_id": yookassa_payment_id,
                "plan_id": plan_id,
                "amount": amount,
                "stcoins_amount": stcoins_amount,
                "status": status,
                "created_at": created_at,
                "processed_at": processed_at
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {e}")
            return None
    
    def get_user_payments(self, telegram_id: int, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        try:
            query = """
                SELECT payment_id, plan_id, amount, stcoins_amount, 
                       status, created_at, processed_at
                FROM payments 
                WHERE telegram_id = ?
                ORDER BY created_at DESC
                LIMIT ?
            """
            
            payments_data = self._execute_payment_query(query, (telegram_id, limit), fetch_all=True)
            
            payments = []
            for row in payments_data:
                payment_id, plan_id, amount, stcoins_amount, status, created_at, processed_at = row
                payments.append({
                    "payment_id": payment_id,
                    "plan_id": plan_id,
                    "amount": amount,
                    "stcoins_amount": stcoins_amount,
                    "status": status,
                    "created_at": created_at,
                    "processed_at": processed_at
                })
            
            return payments
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return []

    def _safe_credit_balance(self, payment_data: dict, correlation_id: str) -> bool:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ FinancialService"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π operation_id
            operation_id = f"payment_{payment_data['yookassa_payment_id']}"
            
            result = self.financial_service.safe_balance_operation(
                telegram_id=payment_data['telegram_id'],
                amount_change=payment_data['stcoins_amount'],
                operation_type="payment_processing",
                operation_id=operation_id,
                correlation_id=correlation_id,
                metadata={
                    "yookassa_payment_id": payment_data['yookassa_payment_id'],
                    "plan_id": payment_data['plan_id'],
                    "amount_rub": payment_data['amount'],
                    "payment_id": payment_data['payment_id']
                }
            )
            
            if result['success']:
                logger.info(f"‚úÖ Safe balance credit: {payment_data['telegram_id']} +{payment_data['stcoins_amount']} = {result['new_balance']}")
                return True
            else:
                if result.get('idempotent'):
                    logger.info(f"‚úÖ Payment already processed (idempotent): {payment_data['yookassa_payment_id']}")
                    return True
                else:
                    logger.error(f"‚ùå Safe balance credit failed: {result}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error in safe balance credit: {e}")
            return False

    def _legacy_credit_balance(self, payment_data: dict) -> bool:
        """Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            find_query = """
                SELECT payment_id, status
                FROM payments 
                WHERE yookassa_payment_id = ?
            """
            
            payment = self._execute_payment_query(find_query, (payment_data['yookassa_payment_id'],), fetch_one=True)
            
            if payment and payment[1] == 'succeeded':
                logger.info(f"Payment {payment_data['yookassa_payment_id']} already processed (legacy check)")
                return True
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥
            current_balance = self.db.get_user_balance(payment_data['telegram_id'])
            new_balance = self.db.update_user_balance(
                payment_data['telegram_id'], 
                payment_data['stcoins_amount'], 
                "payment_processed"
            )
            
            logger.info(f"Legacy balance update: {payment_data['telegram_id']} {current_balance} + {payment_data['stcoins_amount']} = {new_balance}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Legacy balance credit failed: {e}")
            return False

    def _get_payment_by_yookassa_id(self, yookassa_payment_id: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ –ø–æ yookassa_payment_id"""
        
        try:
            find_query = """
                SELECT payment_id, user_id, telegram_id, plan_id, amount, stcoins_amount, status, yookassa_payment_id
                FROM payments 
                WHERE yookassa_payment_id = ?
            """
            
            payment = self._execute_payment_query(find_query, (yookassa_payment_id,), fetch_one=True)
            
            if payment:
                return {
                    'payment_id': payment[0],
                    'user_id': payment[1],
                    'telegram_id': payment[2],
                    'plan_id': payment[3],
                    'amount': payment[4],
                    'stcoins_amount': payment[5],
                    'status': payment[6],
                    'yookassa_payment_id': payment[7]
                }
            
            return None
            
        except Exception as e:
            logger.error(f"Error getting payment by yookassa_id {yookassa_payment_id}: {e}")
            return None

    def _update_payment_status(self, yookassa_payment_id: str, status: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        
        try:
            update_query = """
                UPDATE payments 
                SET status = ?, processed_at = ?, updated_at = ?
                WHERE yookassa_payment_id = ?
            """
            
            now = datetime.now()
            self._execute_payment_query(update_query, (status, now, now, yookassa_payment_id))
            
            logger.info(f"Payment status updated: {yookassa_payment_id} -> {status}")
            
        except Exception as e:
            logger.error(f"Error updating payment status: {e}")

    def get_payment_diagnostics(self, yookassa_payment_id: str) -> dict:
        """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ"""
        
        try:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
            payment_data = self._get_payment_by_yookassa_id(yookassa_payment_id)
            
            diagnostics = {
                'yookassa_payment_id': yookassa_payment_id,
                'timestamp': datetime.now().isoformat(),
                'payment_found': payment_data is not None,
                'payment_data': payment_data,
                'financial_service_available': self.financial_service is not None
            }
            
            if payment_data:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                current_balance = self.db.get_user_balance(payment_data['telegram_id'])
                diagnostics['current_user_balance'] = current_balance
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω financial_service
                if self.financial_service:
                    try:
                        transactions = self.financial_service.get_transaction_history(
                            payment_data['telegram_id'], 10
                        )
                        
                        # –ò—â–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –ø–ª–∞—Ç–µ–∂–æ–º
                        related_transactions = [
                            t for t in transactions 
                            if yookassa_payment_id in str(t.get('correlation_id', ''))
                        ]
                        
                        diagnostics['related_transactions'] = related_transactions
                        diagnostics['total_user_transactions'] = len(transactions)
                        
                    except Exception as e:
                        diagnostics['transaction_history_error'] = str(e)
            
            return diagnostics
            
        except Exception as e:
            return {
                'yookassa_payment_id': yookassa_payment_id,
                'error': str(e),
                'timestamp': datetime.now().isoformat()
            }