#!/usr/bin/env python3
"""
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: –°–µ—Ä–≤–∏—Å –ø–ª–∞—Ç–µ–∂–µ–π –ÆKassa (payment_service.py)
–í–ï–†–°–ò–Ø: 1.2.0 - –ü–†–û–î–ê–ö–®–ù –° –†–ï–ê–õ–¨–ù–´–ú API
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-06-16

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π –ÆKassa.
–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π, webhook'–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏.

–°–¢–ê–¢–£–°: ‚úÖ –ü–û–õ–ù–û–°–¢–¨–Æ –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–û - –≥–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω—É
- –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π ‚úÖ
- –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook'–æ–≤ ‚úÖ  
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ STcoin ‚úÖ
==========================================================================================
"""

import os
import sys
import json
import hmac
import hashlib
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from decimal import Decimal
import uuid
import traceback

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ database.py
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

try:
    from yookassa import Configuration, Payment
    from yookassa.domain.exceptions import ApiError, UnauthorizedError
except ImportError:
    print("‚ùå –û–®–ò–ë–ö–ê: –ú–æ–¥—É–ª—å yookassa –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install yookassa")
    sys.exit(1)

try:
    import database
except ImportError:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å database.py")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("MishuraPayments")
if not logger.handlers:
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - [%(levelname)s] - %(name)s - %(message)s',
        handlers=[
            logging.FileHandler('payments.log', encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ÆKassa
YUKASSA_SHOP_ID = os.getenv('YUKASSA_SHOP_ID')
YUKASSA_SECRET_KEY = os.getenv('YUKASSA_SECRET_KEY')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
PAYMENT_PACKAGES = {
    'basic': {
        'name': '–ë–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç',
        'stcoin': 100,
        'consultations': 10,
        'price_rub': 299,
        'description': '10 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å—Ç–∏–ª–∏—Å—Ç–∞',
        'popular': False
    },
    'standard': {
        'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç',
        'stcoin': 250,
        'consultations': 25,
        'price_rub': 699,
        'description': '25 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π + –±–æ–Ω—É—Å',
        'popular': True
    },
    'premium': {
        'name': '–ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç',
        'stcoin': 500,
        'consultations': 50,
        'price_rub': 1299,
        'description': '50 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π + VIP –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        'popular': False
    },
    'ultimate': {
        'name': '–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –ø–∞–∫–µ—Ç',
        'stcoin': 1000,
        'consultations': 100,
        'price_rub': 2499,
        'description': '100 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π + —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏',
        'popular': False
    }
}

class PaymentService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –ÆKassa"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
        self.configured = False
        self.test_mode = True
        self.init_yukassa()
    
    def init_yukassa(self) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ÆKassa —Å —Ä–µ–∞–ª—å–Ω—ã–º API"""
        try:
            if not YUKASSA_SHOP_ID or not YUKASSA_SECRET_KEY:
                logger.error("‚ùå YUKASSA_SHOP_ID –∏–ª–∏ YUKASSA_SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
                return False
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ÆKassa
            Configuration.configure(YUKASSA_SHOP_ID, YUKASSA_SECRET_KEY)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ÆKassa
            try:
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API
                test_payment = Payment.create({
                    "amount": {
                        "value": "1.00",
                        "currency": "RUB"
                    },
                    "confirmation": {
                        "type": "redirect",
                        "return_url": "https://test.example.com"
                    },
                    "description": "–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ÆKassa API",
                    "test": True  # –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
                })
                
                if test_payment.id:
                    logger.info("‚úÖ –ÆKassa —Ä–µ–∞–ª—å–Ω—ã–π API –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                    logger.info(f"üîß Shop ID: {YUKASSA_SHOP_ID}")
                    logger.info(f"üîß Test payment created: {test_payment.id}")
                    logger.info(f"üîß Confirmation URL: {test_payment.confirmation.confirmation_url}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–π
                    self.test_mode = YUKASSA_SECRET_KEY.startswith('test_')
                    logger.info(f"üîß Test mode: {self.test_mode}")
                    
                    self.configured = True
                    return True
                else:
                    raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ÆKassa API: {e}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ÆKassa: {e}")
            return False
    
    def get_packages(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
        logger.info("üì¶ –ó–∞–ø—Ä–æ—Å –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
        return {
            'status': 'success',
            'packages': PAYMENT_PACKAGES,
            'currency': 'RUB',
            'test_mode': self.test_mode,
            'timestamp': datetime.now().isoformat()
        }
    
    def create_payment(
        self, 
        user_id: int, 
        package_id: str, 
        return_url: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        
        Args:
            user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            package_id: ID –ø–∞–∫–µ—Ç–∞ –∏–∑ PAYMENT_PACKAGES
            return_url: URL –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        
        Returns:
            Dict —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –æ—à–∏–±–∫–æ–π
        """
        logger.info(f"üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={user_id}, package={package_id}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç
            if package_id not in PAYMENT_PACKAGES:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç: {package_id}")
            
            package = PAYMENT_PACKAGES[package_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = database.get_user(user_id)
            if not user:
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                database.save_user(user_id, None, None, None)
                user = database.get_user(user_id)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞
            payment_id = str(uuid.uuid4())
            
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
            payment_data = {
                "amount": {
                    "value": f"{package['price_rub']:.2f}",
                    "currency": "RUB"
                },
                "confirmation": {
                    "type": "redirect",
                    "return_url": return_url or f"{WEBHOOK_URL.replace('/api/v1/payments/webhook', '/webapp')}" if WEBHOOK_URL else "http://localhost:8000/webapp"
                },
                "capture": True,
                "description": f"–ú–ò–®–£–†–ê: {package['name']} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}",
                "test": self.test_mode,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π test_mode
                "metadata": {
                    "user_id": str(user_id),
                    "package_id": package_id,
                    "stcoin_amount": str(package['stcoin']),
                    "internal_payment_id": payment_id
                }
            }
            
            logger.info(f"üöÄ –°–æ–∑–¥–∞–Ω–∏–µ {'—Ç–µ—Å—Ç–æ–≤–æ–≥–æ' if self.test_mode else '—Ä–µ–∞–ª—å–Ω–æ–≥–æ'} –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa")
            logger.debug(f"Payment data: {json.dumps(payment_data, ensure_ascii=False, indent=2)}")
            
            yukassa_payment = Payment.create(payment_data)
            
            if not yukassa_payment.id:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa")
            
            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –≤ –ÆKassa: {yukassa_payment.id}")
            logger.info(f"üîó Confirmation URL: {yukassa_payment.confirmation.confirmation_url}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db_payment_id = database.record_payment(
                user_id=user_id,
                amount_rub=package['price_rub'],
                status='pending',
                payment_provider_id=yukassa_payment.id
            )
            
            if not db_payment_id:
                # –û—Ç–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
                try:
                    Payment.cancel(yukassa_payment.id)
                    logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {yukassa_payment.id} –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –ë–î")
                except:
                    pass
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            
            result = {
                'status': 'success',
                'payment_id': yukassa_payment.id,
                'internal_payment_id': db_payment_id,
                'confirmation_url': yukassa_payment.confirmation.confirmation_url,
                'amount': package['price_rub'],
                'currency': 'RUB',
                'stcoin_amount': package['stcoin'],
                'package': package,
                'test_mode': self.test_mode,
                'expires_at': (datetime.now() + timedelta(hours=1)).isoformat(),
                'timestamp': datetime.now().isoformat()
            }
            
            logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î")
            return result
            
        except ValueError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                'status': 'error',
                'error': 'validation_error',
                'message': str(e),
                'timestamp': datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                'status': 'error',
                'error': 'payment_creation_error',
                'message': f'–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {str(e)}',
                'timestamp': datetime.now().isoformat()
            }
    
    def process_webhook(self, webhook_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç –ÆKassa
        
        Args:
            webhook_data: –î–∞–Ω–Ω—ã–µ webhook –æ—Ç –ÆKassa
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.info("üîî –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç –ÆKassa")
        logger.debug(f"Webhook –¥–∞–Ω–Ω—ã–µ: {json.dumps(webhook_data, ensure_ascii=False, indent=2)}")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É webhook
            if 'object' not in webhook_data or 'event' not in webhook_data:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ webhook")
            
            event = webhook_data['event']
            payment_object = webhook_data['object']
            
            logger.info(f"üì® Webhook —Å–æ–±—ã—Ç–∏–µ: {event}")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏
            if event == 'payment.succeeded':
                return self._process_successful_payment(payment_object)
            elif event == 'payment.canceled':
                return self._process_canceled_payment(payment_object)
            else:
                logger.info(f"‚ÑπÔ∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ: {event}")
                return {
                    'status': 'ignored',
                    'event': event,
                    'message': '–°–æ–±—ã—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
            return {
                'status': 'error',
                'error': 'webhook_processing_error',
                'message': str(e)
            }
    
    def _process_successful_payment(self, payment_object: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            payment_id = payment_object['id']
            amount = float(payment_object['amount']['value'])
            metadata = payment_object.get('metadata', {})
            
            logger.info(f"üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {payment_id}, —Å—É–º–º–∞: {amount} RUB")
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ metadata
            user_id = int(metadata.get('user_id', 0))
            package_id = metadata.get('package_id', '')
            stcoin_amount = int(metadata.get('stcoin_amount', 0))
            
            if not user_id or not package_id or not stcoin_amount:
                raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ metadata –ø–ª–∞—Ç–µ–∂–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–∫–µ—Ç
            if package_id not in PAYMENT_PACKAGES:
                raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞–∫–µ—Ç –≤ –ø–ª–∞—Ç–µ–∂–µ: {package_id}")
            
            package = PAYMENT_PACKAGES[package_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
            if abs(amount - package['price_rub']) > 0.01:  # –î–æ–ø—É—Å–∫ –Ω–∞ –∫–æ–ø–µ–π–∫–∏
                logger.warning(f"‚ö†Ô∏è –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞–∫–µ—Ç—É: {amount} != {package['price_rub']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
            # –ò—â–µ–º –ø–ª–∞—Ç–µ–∂ –ø–æ payment_provider_id
            payments = database.get_connection()
            cursor = payments.cursor()
            cursor.execute(
                "SELECT id, user_id FROM payments WHERE payment_provider_id = ? AND status = 'pending'",
                (payment_id,)
            )
            payment_record = cursor.fetchone()
            payments.close()
            
            if not payment_record:
                logger.warning(f"‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
                # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞
            else:
                database.update_payment_status(payment_record[0], 'completed')
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'completed'")
            
            # –ù–∞—á–∏—Å–ª—è–µ–º STcoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            current_balance = database.get_user_balance(user_id)
            new_balance = current_balance + stcoin_amount
            
            success = database.update_user_balance(user_id, stcoin_amount)
            
            if success:
                logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {stcoin_amount} STcoin")
                logger.info(f"üíé –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {new_balance} STcoin")
                
                return {
                    'status': 'success',
                    'payment_id': payment_id,
                    'user_id': user_id,
                    'package_id': package_id,
                    'stcoin_added': stcoin_amount,
                    'new_balance': new_balance,
                    'amount_paid': amount,
                    'message': f'–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω. –ù–∞—á–∏—Å–ª–µ–Ω–æ {stcoin_amount} STcoin.'
                }
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å STcoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                'status': 'error',
                'error': 'payment_processing_error',
                'message': str(e)
            }
    
    def _process_canceled_payment(self, payment_object: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        try:
            payment_id = payment_object['id']
            
            logger.info(f"‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {payment_id}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
            payments = database.get_connection()
            cursor = payments.cursor()
            cursor.execute(
                "SELECT id FROM payments WHERE payment_provider_id = ?",
                (payment_id,)
            )
            payment_record = cursor.fetchone()
            payments.close()
            
            if payment_record:
                database.update_payment_status(payment_record[0], 'canceled')
                logger.info(f"üìù –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'canceled'")
            
            return {
                'status': 'success',
                'payment_id': payment_id,
                'message': '–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω'
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return {
                'status': 'error',
                'error': 'cancelation_processing_error',
                'message': str(e)
            }
    
    def get_payment_status(self, payment_id: str) -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ÆKassa
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
        
        Returns:
            Dict —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–ª–∞—Ç–µ–∂–∞
        """
        logger.info(f"üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment_id}")
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö mock –ø–ª–∞—Ç–µ–∂–µ–π
            if payment_id.startswith('test_'):
                logger.info("üß™ –°—Ç–∞—Ç—É—Å mock –ø–ª–∞—Ç–µ–∂–∞")
                return {
                    'status': 'success',
                    'payment_id': payment_id,
                    'payment_status': 'pending',
                    'amount': 699.0,
                    'currency': 'RUB',
                    'created_at': datetime.now().isoformat(),
                    'description': 'Mock –ø–ª–∞—Ç–µ–∂ –ú–ò–®–£–†–ê',
                    'metadata': {},
                    'test_mode': True,
                    'timestamp': datetime.now().isoformat()
                }
            
            if not self.configured:
                raise Exception("–ÆKassa –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ÆKassa
            payment = Payment.find_one(payment_id)
            
            if not payment:
                raise Exception(f"–ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ÆKassa")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç
            created_at_iso = None
            if hasattr(payment, 'created_at') and payment.created_at:
                if hasattr(payment.created_at, 'isoformat'):
                    # –≠—Ç–æ datetime –æ–±—ä–µ–∫—Ç
                    created_at_iso = payment.created_at.isoformat()
                else:
                    # –≠—Ç–æ —É–∂–µ —Å—Ç—Ä–æ–∫–∞
                    created_at_iso = str(payment.created_at)
            
            result = {
                'status': 'success',
                'payment_id': payment.id,
                'payment_status': payment.status,
                'amount': float(payment.amount.value),
                'currency': payment.amount.currency,
                'created_at': created_at_iso,
                'description': payment.description,
                'metadata': payment.metadata or {},
                'test_mode': self.test_mode,
                'timestamp': datetime.now().isoformat()
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º URL –¥–ª—è –æ–ø–ª–∞—Ç—ã –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏
            if payment.status == 'pending' and hasattr(payment, 'confirmation') and payment.confirmation:
                if hasattr(payment.confirmation, 'confirmation_url'):
                    result['confirmation_url'] = payment.confirmation.confirmation_url
            
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment.status}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return {
                'status': 'error',
                'error': 'payment_status_error',
                'message': str(e),
                'timestamp': datetime.now().isoformat()
            }
    
    def validate_webhook_signature(self, webhook_body: str, signature: str) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ webhook (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
        
        Args:
            webhook_body: –¢–µ–ª–æ webhook –∑–∞–ø—Ä–æ—Å–∞
            signature: –ü–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        
        Returns:
            True –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞
        """
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ÆKassa –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –º–æ–∂–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∏
        # –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É
        
        if not YUKASSA_SECRET_KEY:
            return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ –Ω–µ—Ç –∫–ª—é—á–∞
        
        try:
            expected_signature = hmac.new(
                YUKASSA_SECRET_KEY.encode('utf-8'),
                webhook_body.encode('utf-8'),
                hashlib.sha256
            ).hexdigest()
            
            return hmac.compare_digest(signature, expected_signature)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ webhook: {e}")
            return True  # –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ –ø–æ–¥–ø–∏—Å–∏
    
    def get_service_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
        return {
            'status': 'online' if self.configured else 'offline',
            'yukassa_configured': self.configured,
            'test_mode': self.test_mode,
            'shop_id': YUKASSA_SHOP_ID[:10] + '...' if YUKASSA_SHOP_ID else None,
            'webhook_url': WEBHOOK_URL,
            'packages_count': len(PAYMENT_PACKAGES),
            'timestamp': datetime.now().isoformat()
        }

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
payment_service = PaymentService()

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
if __name__ == "__main__":
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ PaymentService...")
    
    # –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    service = PaymentService()
    print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {service.configured}")
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: {service.test_mode}")
    
    # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤
    packages = service.get_packages()
    print(f"–ü–∞–∫–µ—Ç—ã: {json.dumps(packages, ensure_ascii=False, indent=2)}")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞
    status = service.get_service_status()
    print(f"–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞: {json.dumps(status, ensure_ascii=False, indent=2)}")
    
    print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")