"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π API —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ú–ò–®–£–†–ê –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
–¢–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""
import os
import json
import time
from http.server import HTTPServer, BaseHTTPRequestHandler
from urllib.parse import urlparse, parse_qs
import threading

class MishuraAPIHandler(BaseHTTPRequestHandler):
    def do_OPTIONS(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ CORS preflight –∑–∞–ø—Ä–æ—Å–æ–≤
        self.send_response(200)
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()

    def do_GET(self):
        if self.path == '/api':
            self.send_json_response({
                "project": "–ú–ò–®–£–†–ê - –ò–ò –°—Ç–∏–ª–∏—Å—Ç",
                "message": "–î–µ–º–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!",
                "version": "1.0.0-demo"
            })
        elif self.path == '/health':
            self.send_json_response({
                "status": "healthy",
                "timestamp": time.strftime("%Y-%m-%dT%H:%M:%S.000Z")
            })
        else:
            self.send_response(404)
            self.end_headers()

    def do_POST(self):
        try:
            # –ü—Ä–æ—Å—Ç–æ —á–∏—Ç–∞–µ–º –∏ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            content_length = int(self.headers.get('Content-Length', 0))
            if content_length > 0:
                self.rfile.read(content_length)
            
            if self.path == '/api/analyze':
                self.handle_analyze()
            elif self.path == '/api/compare':
                self.handle_compare()
            else:
                self.send_response(404)
                self.end_headers()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ do_POST: {e}")
            self.send_error_response(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}")

    def handle_analyze(self):
        print("üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–Ω–∞–ª–∏–∑–∞...")
        time.sleep(1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ò–ò
        
        response = {
            "status": "success",
            "advice": """# üé® –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞ (–î–ï–ú–û)

**–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:** –í–∞—à –æ–±—Ä–∞–∑ –≤—ã–≥–ª—è–¥–∏—Ç —Å—Ç–∏–ª—å–Ω–æ –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!

## üìã –û—Ü–µ–Ω–∫–∞ —Å—Ç–∏–ª—è:
‚úÖ **–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞:** –ì–∞—Ä–º–æ–Ω–∏—á–Ω–∞—è
‚úÖ **–ö—Ä–æ–π:** –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π  
‚úÖ **–û–±—â–∏–π –≤–∏–¥:** –û—Ç–ª–∏—á–Ω—ã–π

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. **–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã:** –î–æ–±–∞–≤—å—Ç–µ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è
2. **–û–±—É–≤—å:** –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Ç—É—Ñ–ª–∏ –æ—Ç–ª–∏—á–Ω–æ –¥–æ–ø–æ–ª–Ω—è—Ç –æ–±—Ä–∞–∑
3. **–¶–≤–µ—Ç:** –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —è—Ä–∫–∏–π –∞–∫—Ü–µ–Ω—Ç

## üéØ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–≤–æ–¥–∞
–≠—Ç–æ—Ç –æ–±—Ä–∞–∑ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –≤–∞—à–∏—Ö –ø–ª–∞–Ω–æ–≤!

---
*–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini AI.*"""
        }
        self.send_json_response(response)

    def handle_compare(self):
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è...")
        time.sleep(2)  # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –ò–ò
        
        response = {
            "status": "success", 
            "advice": """# üé® –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ (–î–ï–ú–û)

## üì∏ –ê–Ω–∞–ª–∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
**–û–±—Ä–∞–∑ 1:** –°—Ç–∏–ª—å–Ω—ã–π –∏ —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π
**–û–±—Ä–∞–∑ 2:** –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π

## üèÜ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. **–õ—É—á—à–∏–π –≤—ã–±–æ—Ä:** –û–±—Ä–∞–∑ 1 –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–≤–æ–¥–∞
2. **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:** –û–±—Ä–∞–∑ 2 –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥–æ–π–¥–µ—Ç –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Å–∫–∏
3. **–°–æ–≤–µ—Ç:** –ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ —Ä–∞–∑–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤

## ‚ú® –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç:
–û–±–∞ –æ–±—Ä–∞–∑–∞ –∏–º–µ—é—Ç —Å–≤–æ–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞. –í—ã–±–∏—Ä–∞–π—Ç–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!

## üéØ –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å–ª—É—á–∞–∏:
- –î–µ–ª–æ–≤—ã–µ –≤—Å—Ç—Ä–µ—á–∏
- –ü—Ä–æ–≥—É–ª–∫–∏ —Å –¥—Ä—É–∑—å—è–º–∏
- –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–∏–¥–∞–Ω–∏—è

---
*–≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–±—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini AI.*"""
        }
        self.send_json_response(response)

    def send_json_response(self, data):
        self.send_response(200)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        self.end_headers()
        self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))

    def send_error_response(self, message):
        self.send_response(500)
        self.send_header('Content-type', 'application/json')
        self.send_header('Access-Control-Allow-Origin', '*')
        self.end_headers()
        error_data = {"status": "error", "message": message}
        self.wfile.write(json.dumps(error_data, ensure_ascii=False).encode('utf-8'))

    def log_message(self, format, *args):
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –ª–æ–≥–æ–≤
        print(f"üîß API [{time.strftime('%H:%M:%S')}] {format % args}")

def run_server():
    server_address = ('', 8001)
    httpd = HTTPServer(server_address, MishuraAPIHandler)
    print("üöÄ –ú–ò–®–£–†–ê Demo API Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8001")
    print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("   ‚Ä¢ GET  /api - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ")
    print("   ‚Ä¢ GET  /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
    print("   ‚Ä¢ POST /api/analyze - –∞–Ω–∞–ª–∏–∑ –æ–¥–µ–∂–¥—ã")
    print("   ‚Ä¢ POST /api/compare - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤")
    print("   ‚Ä¢ –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    print("-" * 50)
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        httpd.server_close()

if __name__ == "__main__":
    run_server() 