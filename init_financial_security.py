#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üîê –ú–ò–®–£–†–ê - Financial Security Initialization
–ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –Ω—É–ª—è
(–î–ª—è —Å–∏—Å—Ç–µ–º –ë–ï–ó —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)
"""

import os
import sys
import time
import logging
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - %(name)s: %(message)s'
)
logger = logging.getLogger("FinancialInit")

def init_fresh_financial_system():
    """üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –Ω—É–ª—è"""
    
    logger.info("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –§–ò–ù–ê–ù–°–û–í–û–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –ú–ò–®–£–†–ê –° –ù–£–õ–Ø")
    logger.info("=" * 70)
    
    try:
        # –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        logger.info("üìã –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")
        check_components()
        
        # –®–ê–ì 2: –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        logger.info("üìã –®–ê–ì 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü...")
        create_financial_tables()
        
        # –®–ê–ì 3: –ü–∞—Ç—á–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã  
        logger.info("üìã –®–ê–ì 3: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        install_financial_security()
        
        # –®–ê–ì 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        logger.info("üìã –®–ê–ì 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
        test_financial_system()
        
        logger.info("üéâ –§–ò–ù–ê–ù–°–û–í–ê–Ø –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨ –£–°–¢–ê–ù–û–í–õ–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False

def check_components():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º database.py
    try:
        from database import MishuraDB
        db = MishuraDB()
        logger.info("‚úÖ database.py - –¥–æ—Å—Ç—É–ø–µ–Ω")
    except Exception as e:
        raise Exception(f"database.py –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    try:
        conn = db.get_connection()
        cursor = conn.cursor()
        
        if db.DB_CONFIG['type'] == 'postgresql':
            cursor.execute("SELECT 1")
        else:
            cursor.execute("SELECT 1")
        
        result = cursor.fetchone()
        conn.close()
        
        if result[0] == 1:
            logger.info(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ({db.DB_CONFIG['type']}) - –¥–æ—Å—Ç—É–ø–Ω–∞")
        else:
            raise Exception("–ë–î –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            
    except Exception as e:
        raise Exception(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = db.get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        user_count = cursor.fetchone()[0]
        conn.close()
        
        logger.info(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
        
        if user_count > 10:  # –ï—Å–ª–∏ –±–æ–ª—å—à–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - —ç—Ç–æ –Ω–µ —Ç–µ—Å—Ç–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
            logger.warning(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞?")
            response = input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
            if response.lower() != 'y':
                raise Exception("–û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                
    except Exception as e:
        if "–û—Ç–º–µ–Ω–µ–Ω–æ" in str(e):
            raise
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def create_financial_tables():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    
    try:
        from database import MishuraDB
        db = MishuraDB()
        
        conn = db.get_connection()
        cursor = conn.cursor()
        
        db_type = db.DB_CONFIG.get('type', 'sqlite')
        
        if db_type == 'postgresql':
            # PostgreSQL —Å—Ö–µ–º–∞
            schema_sql = """
            -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞—É–¥–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            CREATE TABLE IF NOT EXISTS transaction_log (
                id BIGSERIAL PRIMARY KEY,
                telegram_id BIGINT NOT NULL,
                operation_type VARCHAR(50) NOT NULL,
                transaction_type VARCHAR(20) NOT NULL,
                amount INTEGER NOT NULL,
                balance_before INTEGER NOT NULL,
                balance_after INTEGER NOT NULL,
                operation_id VARCHAR(255) UNIQUE NOT NULL,
                correlation_id VARCHAR(255),
                metadata JSONB DEFAULT '{}',
                status VARCHAR(20) DEFAULT 'completed',
                error_message TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_by VARCHAR(100) DEFAULT 'system'
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è optimistic locking
            CREATE TABLE IF NOT EXISTS balance_locks (
                telegram_id BIGINT PRIMARY KEY,
                version_number INTEGER DEFAULT 1,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                locked_by VARCHAR(255),
                lock_expires_at TIMESTAMP
            );

            -- –ò–Ω–¥–µ–∫—Å—ã
            CREATE INDEX IF NOT EXISTS idx_tlog_user_time 
                ON transaction_log (telegram_id, created_at DESC);
            CREATE INDEX IF NOT EXISTS idx_tlog_operation_id 
                ON transaction_log (operation_id);
            CREATE INDEX IF NOT EXISTS idx_tlog_correlation 
                ON transaction_log (correlation_id);
            """
        else:
            # SQLite —Å—Ö–µ–º–∞
            schema_sql = """
            -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞—É–¥–∏—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            CREATE TABLE IF NOT EXISTS transaction_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER NOT NULL,
                operation_type TEXT NOT NULL,
                transaction_type TEXT NOT NULL,
                amount INTEGER NOT NULL,
                balance_before INTEGER NOT NULL,
                balance_after INTEGER NOT NULL,
                operation_id TEXT UNIQUE NOT NULL,
                correlation_id TEXT,
                metadata TEXT DEFAULT '{}',
                status TEXT DEFAULT 'completed',
                error_message TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                created_by TEXT DEFAULT 'system'
            );

            -- –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è optimistic locking
            CREATE TABLE IF NOT EXISTS balance_locks (
                telegram_id INTEGER PRIMARY KEY,
                version_number INTEGER DEFAULT 1,
                last_updated TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                locked_by TEXT,
                lock_expires_at TIMESTAMP
            );

            -- –ò–Ω–¥–µ–∫—Å—ã
            CREATE INDEX IF NOT EXISTS idx_tlog_user_time 
                ON transaction_log (telegram_id, created_at DESC);
            CREATE INDEX IF NOT EXISTS idx_tlog_operation_id 
                ON transaction_log (operation_id);
            CREATE INDEX IF NOT EXISTS idx_tlog_correlation 
                ON transaction_log (correlation_id);
            """
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        for statement in schema_sql.split(';'):
            statement = statement.strip()
            if statement:
                cursor.execute(statement)
        
        conn.commit()
        conn.close()
        
        logger.info("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º balance_locks –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        init_balance_locks_for_existing_users(db)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü: {e}")
        if 'conn' in locals():
            conn.rollback()
            conn.close()
        raise

def init_balance_locks_for_existing_users(db):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è balance_locks –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    try:
        conn = db.get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT telegram_id FROM users")
        users = cursor.fetchall()
        
        initialized_count = 0
        
        for user in users:
            telegram_id = user[0]
            try:
                if db.DB_CONFIG['type'] == 'postgresql':
                    cursor.execute("""
                        INSERT INTO balance_locks (telegram_id, version_number, last_updated)
                        VALUES (%s, 1, CURRENT_TIMESTAMP)
                        ON CONFLICT (telegram_id) DO NOTHING
                    """, (telegram_id,))
                else:
                    cursor.execute("""
                        INSERT OR IGNORE INTO balance_locks (telegram_id, version_number)
                        VALUES (?, 1)
                    """, (telegram_id,))
                
                if cursor.rowcount > 0:
                    initialized_count += 1
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å balance_lock –¥–ª—è {telegram_id}: {e}")
        
        conn.commit()
        conn.close()
        
        logger.info(f"‚úÖ Balance locks –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è {initialized_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {len(users)}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ balance_locks: {e}")
        raise

def install_financial_security():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ monkey patching"""
    
    try:
        from database import MishuraDB
        from financial_service import FinancialService
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
        db = MishuraDB()
        financial_service = FinancialService(db)
        
        # Monkey patch –¥–ª—è database.py
        original_update_balance = db.update_user_balance
        db.update_user_balance = financial_service.update_user_balance
        
        logger.info("‚úÖ Database.py –ø—Ä–æ–ø–∞—Ç—á–µ–Ω–∞ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–∫–∞—Ç–∞
        db._original_update_user_balance = original_update_balance
        
        # –ì–ª–æ–±–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º financial_service –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ api.py
        import builtins
        builtins.GLOBAL_FINANCIAL_SERVICE = financial_service
        
        logger.info("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
        raise

def test_financial_system():
    """–ë–∞–∑–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    test_user_id = 5930269100
    
    try:
        from database import MishuraDB
        
        db = MishuraDB()
        
        # –ü–æ–ª—É—á–∞–µ–º financial_service
        if hasattr(__builtins__, 'GLOBAL_FINANCIAL_SERVICE'):
            financial_service = __builtins__['GLOBAL_FINANCIAL_SERVICE']
        else:
            import builtins
            financial_service = builtins.GLOBAL_FINANCIAL_SERVICE
        
        # –¢–ï–°–¢ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        initial_balance = db.get_user_balance(test_user_id)
        logger.info(f"üß™ –¢–ï–°–¢ 1: –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å {test_user_id}: {initial_balance}")
        
        # –¢–ï–°–¢ 2: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
        result = financial_service.safe_balance_operation(
            telegram_id=test_user_id,
            amount_change=100,
            operation_type="init_test",
            metadata={"test": "initialization", "timestamp": datetime.now().isoformat()}
        )
        
        if not result['success']:
            raise Exception(f"–¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: {result}")
        
        new_balance = result['new_balance']
        expected_balance = initial_balance + 100
        
        if new_balance != expected_balance:
            raise Exception(f"–ù–µ–≤–µ—Ä–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {new_balance} != {expected_balance}")
        
        logger.info(f"‚úÖ –¢–ï–°–¢ 2: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ({initial_balance} + 100 = {new_balance})")
        
        # –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ transaction log
        history = financial_service.get_transaction_history(test_user_id, 5)
        
        if len(history) < 1:
            raise Exception("Transaction log –ø—É—Å—Ç")
        
        logger.info(f"‚úÖ –¢–ï–°–¢ 3: Transaction log —Ä–∞–±–æ—Ç–∞–µ—Ç ({len(history)} –∑–∞–ø–∏—Å–µ–π)")
        
        # –¢–ï–°–¢ 4: –¢–µ—Å—Ç backward compatibility
        old_balance = db.get_user_balance(test_user_id)
        new_balance_via_old = db.update_user_balance(test_user_id, 25, "backward_test")
        
        if new_balance_via_old != old_balance + 25:
            raise Exception(f"Backward compatibility –Ω–∞—Ä—É—à–µ–Ω–∞: {new_balance_via_old} != {old_balance + 25}")
        
        logger.info(f"‚úÖ –¢–ï–°–¢ 4: Backward compatibility —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–ï–°–¢ 5: –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        current_balance = db.get_user_balance(test_user_id)
        
        result = financial_service.safe_balance_operation(
            telegram_id=test_user_id,
            amount_change=-(current_balance + 1000),
            operation_type="negative_test"
        )
        
        if result['success']:
            raise Exception("–°–∏—Å—Ç–µ–º–∞ –ø–æ–∑–≤–æ–ª–∏–ª–∞ —Å–æ–∑–¥–∞—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å!")
        
        if result.get('error') != 'insufficient_balance':
            raise Exception(f"–ù–µ–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: {result.get('error')}")
        
        logger.info(f"‚úÖ –¢–ï–°–¢ 5: –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        logger.info("üéâ –í–°–ï –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ò–õ–°–Ø: {e}")
        return False

if __name__ == "__main__":
    print("üîê –ú–ò–®–£–†–ê - Financial Security Initialization")
    print("=" * 60)
    
    success = init_fresh_financial_system()
    
    if success:
        print("\nüéâ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("\n–î–∞–ª–µ–µ:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä: python api.py")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ health endpoint: /api/v1/health/financial")
    else:
        print("\n‚ùå –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–û–í–ê–õ–ò–õ–ê–°–¨!")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ")
        sys.exit(1)