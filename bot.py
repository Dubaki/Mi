"""
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: Telegram –ë–æ—Ç (bot.py)
–í–ï–†–°–ò–Ø: 0.3.2 (–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, –æ–±—Ä–∞–±–æ—Ç–∫–∞ URL, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-05-20

–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø –†–ê–ë–û–¢–´ –ò –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ö–û–î–ê:
1.  –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –û–±–Ω–æ–≤–ª–µ–Ω–∏–π: –õ—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è —Ü–µ–ª–∏–∫–æ–º.
    –ß–∞—Å—Ç–∏—á–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
2.  –Ø–∑—ã–∫ –ö–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –≤–µ–¥—É—Ç—Å—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
3.  –°—Ç–∞–Ω–¥–∞—Ä—Ç –ö–∞—á–µ—Å—Ç–≤–∞: –î–∞–Ω–Ω—ã–π –∫–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –ø—Ä–æ–µ–∫—Ç–∞ "–ú–ò–®–£–†–ê", —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
    —Å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ–º –≤—ã—Å–æ—á–∞–π—à–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –¥–∏–∑–∞–π–Ω–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—è
    —É—Ä–æ–≤–Ω—é –ª—É—á—à–∏—Ö –º–∏—Ä–æ–≤—ã—Ö –ø—Ä–∞–∫—Ç–∏–∫.

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –§–ê–ô–õ–ê:
–õ–æ–≥–∏–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–∞–º–∏,
–ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é (Mini App) –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
==========================================================================================
"""
import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import random
from datetime import datetime

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
try:
    import database as db
    from gemini_ai import analyze_clothing_file
except ImportError as e:
    logging.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ database –∏–ª–∏ gemini_ai –¥–ª—è –±–æ—Ç–∞. {e}")
    # –î–ª—è —Ü–µ–ª–µ–π –æ—Ç–ª–∞–¥–∫–∏, –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è, –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.
    # –í production –ª—É—á—à–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É.
    db = None # type: ignore
    async def analyze_clothing_file(*args, **kwargs):
        logging.error("–§—É–Ω–∫—Ü–∏—è analyze_clothing_file –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞ gemini_ai.")
        return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: –ò–ò-–º–æ–¥—É–ª—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger("MishuraBot") # –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –ë–æ—Ç–∞
if not logger.handlers: # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    logging.basicConfig( # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        format="%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d): %(message)s",
        level=logging.INFO
    )
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª–æ–≥–≥–µ—Ä–∞ –±–æ—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    # handler = logging.StreamHandler()
    # formatter = logging.Formatter('%(asctime)s - [%(levelname)s] - %(name)s - %(message)s')
    # handler.setFormatter(formatter)
    # logger.addHandler(handler)
    # logger.setLevel(logging.INFO)
    # logger.propagate = False # –ß—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –≤ root logger, –µ—Å–ª–∏ –æ–Ω —Ç–æ–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ –ú–ò–®–£–†–ê...")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if load_dotenv():
    logger.info("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –±–æ—Ç–∞.")
else:
    logger.warning("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç –¥–ª—è –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

TOKEN = os.getenv("TELEGRAM_TOKEN")
DEFAULT_WEBAPP_URL = "https://style-ai-bot.onrender.com/webapp" # URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ .env
WEBAPP_URL_BASE = os.getenv("WEBAPP_URL", DEFAULT_WEBAPP_URL).rstrip('/')

if not TOKEN:
    logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è.")
    # –í production –∑–¥–µ—Å—å —Å—Ç–æ–∏–ª–æ –±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞:
    # import sys
    # sys.exit("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –î–æ–±–∞–≤–ª—è–µ–º –∫—ç—à-–±–∞—Å—Ç–∏–Ω–≥ –ø–∞—Ä–∞–º–µ—Ç—Ä –∫ URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
WEBAPP_URL_WITH_CACHEBUST = f"{WEBAPP_URL_BASE}?v={random.randint(10000, 99999)}"
logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π URL –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å cache-bust): {WEBAPP_URL_WITH_CACHEBUST}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –º–æ–¥—É–ª—å db –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω)
if db:
    try:
        if db.init_db(): # init_db –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–æ—Ç–∞.")
        else:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–æ—Ç–∞ (init_db –≤–µ—Ä–Ω—É–ª False).")
    except Exception as e_db_init:
        logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –≤—ã–∑–æ–≤–µ db.init_db(): {e_db_init}", exc_info=True)
else:
    logger.error("–ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (db) –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –ë–î, –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user.id}, Username: {user.username}")
    
    if db:
        try:
            db.save_user(user.id, user.username, user.first_name, user.last_name)
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î.")
            balance = db.get_user_balance(user.id)
            balance_text = f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π\n\n"
        except Exception as e_db_start:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e_db_start}", exc_info=True)
            balance_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ.\n\n"
    else:
        balance_text = "–§—É–Ω–∫—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n\n"
        
    inline_keyboard = [
        [InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å—Ç–∏–ª–∏—Å—Ç–∞ (–ú–ò–®–£–†–ê)", web_app=WebAppInfo(url=WEBAPP_URL_WITH_CACHEBUST))]
    ]
    reply_markup_inline = InlineKeyboardMarkup(inline_keyboard)
    
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç <b>–ú–ò–®–£–†–ê</b>.\n\n"
        "–ì–æ—Ç–æ–≤–∞ –ø–æ–º–æ—á—å –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–π –æ–±—Ä–∞–∑! "
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –æ–¥–µ–∂–¥—ã —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∏ —è –¥–∞–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é.\n\n"
        f"{balance_text}"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
        reply_markup=reply_markup_inline
    )
    
    await update.message.reply_text(
        "–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard()
    )

def get_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = [
        [KeyboardButton("–ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"), KeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å")],
        [KeyboardButton("–û —Å–µ—Ä–≤–∏—Å–µ –ú–ò–®–£–†–ê"), KeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

async def webapp_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /webapp –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {update.effective_user.id}")
    inline_keyboard = [
        [InlineKeyboardButton("üöÄ –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ú–ò–®–£–†–ê", web_app=WebAppInfo(url=WEBAPP_URL_WITH_CACHEBUST))]
    ]
    await update.message.reply_text(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ç–∏–ª–∏—Å—Ç–∞ –ú–ò–®–£–†–ê:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard)
    )

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user_id = update.effective_user.id
    logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{text}' –ø–æ–ª—É—á–µ–Ω–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    
    if text == "–û —Å–µ—Ä–≤–∏—Å–µ –ú–ò–®–£–†–ê":
        if db:
            try:
                stats = db.get_stats()
                stats_text = (
                    f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ú–ò–®–£–†–ê:</b>\n"
                    f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats.get('total_users', 'N/A')}\n"
                    f"‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {stats.get('total_consultations', 'N/A')}\n"
                    f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('daily_consultations', 'N/A')}"
                )
            except Exception as e_db_stats:
                logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e_db_stats}", exc_info=True)
                stats_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É."
        else:
            stats_text = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

        await update.message.reply_html(
            "üåü <b>–ú–ò–®–£–†–ê</b> - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª–∏—Å—Ç –Ω–∞ –±–∞–∑–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n\n"
            "<b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
            "‚úì –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –æ–¥–µ–∂–¥—ã –ø–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
            "‚úì –î–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ—á–µ—Ç–∞–Ω–∏—é —Å –¥—Ä—É–≥–∏–º–∏ –≤–µ—â–∞–º–∏\n"
            "‚úì –ü–æ–¥–±–∏—Ä–∞—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫ –æ–±—Ä–∞–∑—É\n"
            "‚úì –°–æ–≤–µ—Ç–æ–≤–∞—Ç—å, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –≤–µ—â—å –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è\n"
            "‚úì –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—â–µ–π –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –≤—ã–±–æ—Ä–æ–º\n\n"
            f"{stats_text}"
        )
    elif text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        await update.message.reply_text(
            "–í–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–∞–±–æ—Ç–µ –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç–∞ –ú–ò–®–£–†–ê?\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: support@mishura-ai.style (–≤—ã–º—ã—à–ª–µ–Ω–Ω—ã–π email)\n\n"
            "–ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –ª—É—á—à–µ –¥–ª—è –≤–∞—Å!"
        )
    elif text == "–ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏":
        if not db:
            await update.message.reply_text("–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            return
        try:
            consultations = db.get_user_consultations(user_id)
            if not consultations:
                await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –æ—Ç –ú–ò–®–£–†–´.")
                return
            
            message = "<b>–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç –ú–ò–®–£–†–´:</b>\n\n"
            for c in consultations:
                try:
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ created_at —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO, –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑ –ë–î –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
                    created_at_dt = datetime.fromisoformat(str(c['created_at']))
                    date_str = created_at_dt.strftime("%d.%m.%Y %H:%M")
                except ValueError:
                    date_str = str(c['created_at']) # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
                message += f"üîπ {date_str} - {c.get('occasion', '–ù–µ —É–∫–∞–∑–∞–Ω')} (ID: {c['id']})\n"
            
            message += "\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/consultation ID` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `/consultation 123`)."
            await update.message.reply_html(message)
        except Exception as e_db_consult:
            logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e_db_consult}", exc_info=True)
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å":
        keyboard = [
            [InlineKeyboardButton("1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - 299‚ÇΩ", callback_data="buy_1"), InlineKeyboardButton("3 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ - 799‚ÇΩ (–≤—ã–≥–æ–¥–∞!)", callback_data="buy_3")],
            [InlineKeyboardButton("5 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π - 1299‚ÇΩ (—Ö–∏—Ç!)", callback_data="buy_5"), InlineKeyboardButton("10 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π - 2499‚ÇΩ (–º–∞–∫—Å–∏–º—É–º –≤—ã–≥–æ–¥—ã!)", callback_data="buy_10")]
        ]
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –æ—Ç –ú–ò–®–£–†–´:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ –º–µ–Ω—é, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å WebApp
        inline_keyboard = [[InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –æ—Ç –ú–ò–®–£–†–´", web_app=WebAppInfo(url=WEBAPP_URL_WITH_CACHEBUST))]]
        await update.message.reply_text(
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç–∞ –ú–ò–®–£–†–ê, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –æ–¥–µ–∂–¥—ã —á–µ—Ä–µ–∑ –Ω–∞—à–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ "
            "–∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–∑ –º–µ–Ω—é.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard)
        )

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    user_id = user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, Username: {user.username}")

    if not db:
        await update.message.reply_text("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        return
        
    try:
        balance = db.get_user_balance(user_id)
        if balance <= 0:
            keyboard = [[InlineKeyboardButton("–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="add_balance")]]
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç –ú–ò–®–£–†–´.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return
    except Exception as e_db_balance:
        logger.error(f"–û—à–∏–±–∫–∞ –ë–î –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ photo_handler: {e_db_balance}", exc_info=True)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        photo_file = await update.message.photo[-1].get_file()
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        # –í–∞–∂–Ω–æ: –≤ production —Å—Ä–µ–¥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Render) —Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —ç—Ñ–µ–º–µ—Ä–Ω–æ–π.
        # –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –¥–ª—è —Ñ–æ—Ç–æ.
        user_photos_dir = "user_photos"
        os.makedirs(user_photos_dir, exist_ok=True)
        
        file_name = f"{user_id}_{datetime.now().strftime('%Y%m%d%H%M%S%f')}.jpg" # –î–æ–±–∞–≤–∏–ª –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–æ–ª—å—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        file_path = os.path.join(user_photos_dir, file_name)
        
        await photo_file.download_to_drive(file_path)
        logger.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–æ –ø—É—Ç–∏: {file_path}")
        
        db.update_user_balance(user_id, -1) # –°–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–Ω—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        
        processing_message = await update.message.reply_text("–ú–ò–®–£–†–ê –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—à—É –æ–¥–µ–∂–¥—É... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–≥–Ω–æ–≤–µ–Ω–∏–π. ‚ú®")
        
        # –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ (–ø–æ–≤–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —á–µ—Ä–µ–∑ WebApp)
        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∑–¥–µ—Å—å –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è, —Ç.–∫. —ç—Ç–æ –ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –±–æ—Ç—É
        advice = await analyze_clothing_file(file_path, "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±—Ä–∞–∑") # –ò—Å–ø–æ–ª—å–∑—É–µ–º await, —Ç.–∫. analyze_clothing_file –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
        
        if "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" in advice: # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ AI –º–æ–¥—É–ª—å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç –ò–ò-–º–æ–¥—É–ª—è –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ {file_path}: {advice}")
            await processing_message.edit_text(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ú–ò–®–£–†–ê –Ω–µ —Å–º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ —Ñ–æ—Ç–æ: {advice}")
            db.update_user_balance(user_id, 1) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ –ò–ò
            return
        
        consultation_id = db.save_consultation(user_id, "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π –æ–±—Ä–∞–∑", "–ù–µ —É–∫–∞–∑–∞–Ω—ã (–ø—Ä—è–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)", file_path, advice)
        logger.info(f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{consultation_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        
        await processing_message.delete()
        
        # –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç —Å –ø–µ—Ä–≤—ã–º–∏ –¥–≤—É–º—è –∞–±–∑–∞—Ü–∞–º–∏ –¥–ª—è Telegram, –ø–æ–ª–Ω—ã–π - –ø–æ –∫–æ–º–∞–Ω–¥–µ
        summary_parts = advice.split("\n\n")
        short_summary = "\n\n".join(summary_parts[:2]) # –ü–µ—Ä–≤—ã–µ –¥–≤–∞ "–∞–±–∑–∞—Ü–∞"
        
        new_balance = db.get_user_balance(user_id)
        await update.message.reply_html(
            f"<b>–ú–ò–®–£–†–ê –∑–∞–≤–µ—Ä—à–∏–ª–∞ –∞–Ω–∞–ª–∏–∑ (ID: {consultation_id}):</b>\n\n"
            f"{short_summary}\n\n"
            f"–î–ª—è –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <code>/consultation {consultation_id}</code>\n\n"
            f"–í–∞—à –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π."
        )
    except Exception as e_photo:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e_photo}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–∞–Ω–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –¥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        # if 'processing_message' in locals() and processing_message: # –ï—Å–ª–∏ —Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ, –Ω–æ –∞–Ω–∞–ª–∏–∑ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
        #     db.update_user_balance(user_id, 1)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    logger.info(f"Callback query '{query.data}' –ø–æ–ª—É—á–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    
    await query.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...") # –û—Ç–≤–µ—Ç Telegram, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞
    
    if not db:
        await query.edit_message_text(text="–°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
        return

    try:
        if query.data.startswith("buy_"):
            num_consultations = int(query.data.split("_")[1])
            prices = {1: 299, 3: 799, 5: 1299, 10: 2499} # –¶–µ–Ω—ã –≤ —Ä—É–±–ª—è—Ö
            amount_rub = prices.get(num_consultations)

            if amount_rub is None:
                logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞–∫–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π: {query.data}")
                await query.edit_message_text("–í—ã–±—Ä–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞–∫–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, Telegram Payments)
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º "–ø–ª–∞—Ç–µ–∂"
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} '–ø–æ–∫—É–ø–∞–µ—Ç' {num_consultations} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –∑–∞ {amount_rub}‚ÇΩ (–¥–µ–º–æ-—Ä–µ–∂–∏–º).")
            db.update_user_balance(user_id, num_consultations)
            db.record_payment(user_id, amount_rub, "completed_demo") # –°—Ç–∞—Ç—É—Å –¥–ª—è –¥–µ–º–æ
            
            new_balance = db.get_user_balance(user_id)
            await query.edit_message_text(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
                f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ {num_consultations} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –æ—Ç –ú–ò–®–£–†–´ –∑–∞ {amount_rub}‚ÇΩ.\n"
                f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π."
            )
        elif query.data == "add_balance":
            # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å" –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
            keyboard = [
                [InlineKeyboardButton("1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - 299‚ÇΩ", callback_data="buy_1"), InlineKeyboardButton("3 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ - 799‚ÇΩ", callback_data="buy_3")],
                [InlineKeyboardButton("5 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π - 1299‚ÇΩ", callback_data="buy_5"), InlineKeyboardButton("10 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π - 2499‚ÇΩ", callback_data="buy_10")]
            ]
            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –æ—Ç –ú–ò–®–£–†–´:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {query.data}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞.")

    except Exception as e_button:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback_query '{query.data}' –æ—Ç {user_id}: {e_button}", exc_info=True)
        try:
            await query.edit_message_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e_edit_fallback:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ edit_message_text: {e_edit_fallback}")

async def get_consultation_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None: # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª
    user_id = update.effective_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /consultation –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {context.args}")

    if not db:
        await update.message.reply_text("–°–µ—Ä–≤–∏—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
        
    if not context.args:
        await update.message.reply_html(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/consultation 123</code>"
        )
        return
    
    try:
        consultation_id = int(context.args[0])
    except ValueError:
        await update.message.reply_html("ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü—Ä–∏–º–µ—Ä: <code>/consultation 123</code>")
        return
    except Exception as e_args: # –ù–∞ —Å–ª—É—á–∞–π –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ —Å context.args
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ consultation_id –∏–∑ context.args: {e_args}", exc_info=True)
        await update.message.reply_text("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.")
        return
        
    try:
        consultation = db.get_consultation(consultation_id, user_id) # –ü–µ—Ä–µ–¥–∞–µ–º user_id –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        
        if not consultation:
            await update.message.reply_text(f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å ID {consultation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∫ –Ω–µ–π –¥–æ—Å—Ç—É–ø–∞.")
            return
        
        advice = consultation.get('advice', "–¢–µ–∫—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        image_path = consultation.get('image_path')

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_message = f"<b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç –ú–ò–®–£–†–´ #{consultation_id}:</b>\n\n{advice}"
        
        if image_path and os.path.exists(image_path):
            try:
                await update.message.reply_photo(photo=open(image_path, 'rb'), caption=response_message, parse_mode='HTML')
            except Exception as e_send_photo:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ #{consultation_id}: {e_send_photo}")
                await update.message.reply_html(response_message + "\n\n(–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫ —ç—Ç–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏)")
        else:
            if image_path:
                 logger.warning(f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path} –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ #{consultation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await update.message.reply_html(response_message)
            
    except Exception as e_get_consult:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ #{consultation_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e_get_consult}", exc_info=True)
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /help –ø–æ–ª—É—á–µ–Ω–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}")
    
    if db:
        try:
            balance = db.get_user_balance(user_id)
            balance_text = f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –æ—Ç –ú–ò–®–£–†–´."
        except Exception:
            balance_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ."
    else:
        balance_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."

    await update.message.reply_html(
        "ü§ñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ò–ò-–°—Ç–∏–ª–∏—Å—Ç—É –ú–ò–®–£–†–ê</b> ü§ñ\n\n"
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ú–ò–®–£–†–ê, –≤–∞—à –ª–∏—á–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å—Ç–∏–ª—é. –í–æ—Ç –∫–∞–∫ —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å:\n\n"
        "1.  **–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:**\n"
        "    * –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üöÄ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å—Ç–∏–ª–∏—Å—Ç–∞¬ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /webapp, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.\n"
        "    * –í –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –æ–¥–Ω–æ–π –≤–µ—â–∏ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.\n"
        "    * –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç (–≤ —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º).\n\n"
        "2.  **–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π:**\n"
        "    * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏¬ª –≤ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É <code>/consultation ID</code> –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Ä–∞–Ω–µ–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–∞.\n\n"
        "3.  **–ë–∞–ª–∞–Ω—Å:**\n"
        "    * –ö–∞–∂–¥–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.\n"
        "    * –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.\n\n"
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Ä¢  /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ú–ò–®–£–†–û–ô / –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é\n"
        "‚Ä¢  /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
        "‚Ä¢  /webapp - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
        "‚Ä¢  <code>/consultation &lt;ID&gt;</code> - –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –µ—ë –Ω–æ–º–µ—Ä—É\n\n"
        f"{balance_text}\n\n"
        "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª –≤ –º–µ–Ω—é."
    )

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ –ú–ò–®–£–†–ê."""
    if not TOKEN:
        logger.critical("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram –±–æ—Ç–∞...")
    try:
        application = Application.builder().token(TOKEN).build()
    except Exception as e_app_build:
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞: {e_app_build}", exc_info=True)
        return

    logger.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("webapp", webapp_command))
    application.add_handler(CommandHandler("consultation", get_consultation_command)) # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ CommandHandlers, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    
    # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    
    # Callback_query –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –æ–ø–ª–∞—Ç—ã)
    application.add_handler(CallbackQueryHandler(button_handler))

    logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling...")
    try:
        application.run_polling()
        logger.info("–ë–æ—Ç –ú–ò–®–£–†–ê —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
    except Exception as e_run_polling:
        logger.critical(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling: {e_run_polling}", exc_info=True)

if __name__ == "__main__":
    main()