#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé≠ –ú–ò–®–£–†–ê - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
Telegram Bot –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Gemini AI
"""

import os
import logging
import json
import asyncio
import aiohttp
from datetime import datetime
from typing import Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    CallbackQueryHandler, ContextTypes, filters
)
from telegram.constants import ParseMode

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import database
import gemini_ai
from pricing_config import (
    PRICING_PLANS, 
    create_pricing_keyboard, 
    format_plan_description, 
    format_pricing_summary,
    PRICING_TEXTS,
    get_plan_by_id
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TELEGRAM_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL', 'http://localhost:8001')

if not TOKEN:
    raise ValueError("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_states = {}
comparison_sessions = {}

class UserState:
    NORMAL = "normal"
    WAITING_FOR_PHOTO = "waiting_for_photo"
    WAITING_FOR_COMPARISON = "waiting_for_comparison"
    SELECTING_OCCASION = "selecting_occasion"

# ================================
# –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´
# ================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–∞—Ä–∏—Ñ–∞—Ö"""
    user = update.effective_user
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
    database.save_user(
        telegram_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = database.get_user_balance(user.id) or 0
    
    welcome_text = f"""
üé≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **–ú–ò–®–£–†–ê** - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç!

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: **{balance} STcoin**

üéØ **–ß—Ç–æ —è —É–º–µ—é:**
‚Ä¢ üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –æ–±—Ä–∞–∑—ã –∏ –æ–¥–µ–∂–¥—É
‚Ä¢ üí° –î–∞–≤–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Å—Ç–∏–ª—é
‚Ä¢ ‚öñÔ∏è –°—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±—Ä–∞–∑–æ–≤
‚Ä¢ üíé –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∞—Ä–¥–µ—Ä–æ–±

üíµ **–ù–æ–≤—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**
üß™ –¢–µ—Å—Ç–æ–≤—ã–π: 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è = 20‚ÇΩ (20‚ÇΩ/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)
üåü –ë–∞–∑–æ–≤—ã–π: 10 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π = 150‚ÇΩ (15‚ÇΩ/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è) 
‚≠ê –°—Ç–∞–Ω–¥–∞—Ä—Ç: 30 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π = 300‚ÇΩ (10‚ÇΩ/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è) üî•
üíé –ü—Ä–µ–º–∏—É–º: 100 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π = 800‚ÇΩ (8‚ÇΩ/–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è)

üöÄ –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:
"""
    
    keyboard = get_main_menu_keyboard()
    
    await update.message.reply_text(
        welcome_text,
        reply_markup=keyboard,
        parse_mode=ParseMode.MARKDOWN
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
üé≠ **–ú–ò–®–£–†–ê - –°–ø—Ä–∞–≤–∫–∞**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/webapp` - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ `/wardrobe` - –ú–æ–π –≥–∞—Ä–¥–µ—Ä–æ–±

**–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:**
1Ô∏è‚É£ –ö—É–ø–∏—Ç–µ STcoin —á–µ—Ä–µ–∑ –º–µ–Ω—é "üí∞ –ö—É–ø–∏—Ç—å STcoin"
2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "üöÄ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
3Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò

**–ö–æ–º–∞–Ω–¥—ã –≥–∞—Ä–¥–µ—Ä–æ–±–∞:**
‚Ä¢ `/name_ID –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ` - –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
‚Ä¢ `/tag_ID –Ω–æ–≤—ã–π_—Ç–µ–≥` - –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥ –ø—Ä–µ–¥–º–µ—Ç–∞

**–°—Ç–æ–∏–º–æ—Å—Ç—å:**
‚Ä¢ 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è = 10 STcoin

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:** @mishura_support_bot
"""
    
    await update.message.reply_text(
        help_text,
        parse_mode=ParseMode.MARKDOWN
    )

async def webapp_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    webapp_url = f"{WEBAPP_URL}/webapp/"
    
    keyboard = [
        [InlineKeyboardButton("üåê –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=webapp_url)]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:",
        reply_markup=reply_markup
    )

async def consultation_by_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ ID"""
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ ID –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: /consultation 123")
        return
    
    try:
        consultation_id = int(context.args[0])
        user_id = update.effective_user.id
        
        consultation = database.get_consultation(consultation_id, user_id)
        if not consultation:
            await update.message.reply_text("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = f"""
üìã **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{consultation_id}**

üìÖ –î–∞—Ç–∞: {consultation['created_at']}
üéØ –ü–æ–≤–æ–¥: {consultation['occasion']}

**–°–æ–≤–µ—Ç —Å—Ç–∏–ª–∏—Å—Ç–∞:**
{consultation['advice']}
"""
        
        await update.message.reply_text(
            response_text,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏")

# ================================
# –ö–õ–ê–í–ò–ê–¢–£–†–´
# ================================

def get_main_menu_keyboard():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
    keyboard = [
        [
            InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é (10 STcoin)", callback_data="get_consultation"),
        ],
        [
            InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å STcoin", callback_data="show_pricing"),
            InlineKeyboardButton("üíé –ú–æ–π –≥–∞—Ä–¥–µ—Ä–æ–±", callback_data="my_wardrobe")
        ],
        [
            InlineKeyboardButton("üìö –ú–æ–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data="my_consultations"),
            InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_occasion_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–≤–æ–¥–∞"""
    occasions = [
        ("üëî –î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞", "business"),
        ("üéâ –í–µ—á–µ—Ä–∏–Ω–∫–∞", "party"), 
        ("üö∂ –ü—Ä–æ–≥—É–ª–∫–∞", "casual"),
        ("üíï –°–≤–∏–¥–∞–Ω–∏–µ", "date"),
        ("üè† –î–æ–º–∞", "home"),
        ("üé® –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ", "creative")
    ]
    
    keyboard = []
    for text, callback in occasions:
        keyboard.append([InlineKeyboardButton(text, callback_data=f"occasion_{callback}")])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)

# ================================
# –¢–ê–†–ò–§–ù–´–ï –ü–õ–ê–ù–´
# ================================

async def show_pricing_plans(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã"""
    user_id = update.effective_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_balance = database.get_user_balance(user_id) or 0
    
    message_text = f"""
{PRICING_TEXTS['title']}

üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: **{current_balance} STcoin**

{PRICING_TEXTS['subtitle']}

{format_pricing_summary()}

{PRICING_TEXTS['currency_info']}
{PRICING_TEXTS['features_info']}
"""
    
    keyboard = create_pricing_keyboard()
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            message_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        await update.message.reply_text(
            message_text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )

async def handle_plan_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    query = update.callback_query
    await query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞–Ω–∞ –∏–∑ callback_data
    plan_id = query.data.replace("buy_plan_", "")
    plan = get_plan_by_id(plan_id)
    
    if not plan:
        await query.edit_message_text("‚ùå –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
    plan_description = format_plan_description(plan_id)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton(
                f"üí≥ –ö—É–ø–∏—Ç—å –∑–∞ {plan['price_rub']} —Ä—É–±.",
                callback_data=f"confirm_purchase_{plan_id}"
            )
        ],
        [
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="show_pricing")
        ]
    ]
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        plan_description,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN
    )

async def handle_purchase_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏ —á–µ—Ä–µ–∑ –ÆKassa"""
    query = update.callback_query
    await query.answer()
    
    plan_id = query.data.replace("confirm_purchase_", "")
    plan = get_plan_by_id(plan_id)
    
    if not plan:
        await query.edit_message_text("‚ùå –¢–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_id = update.effective_user.id
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API
        payment_url = await create_yookassa_payment(user_id, plan_id, context)
        
        keyboard = [
            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_pricing")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message_text = f"""
üí≥ **–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞**

{plan['color']} **{plan['name']}**
üí∞ –°—É–º–º–∞: **{plan['price_rub']} —Ä—É–±.**
üíé STcoin: **+{plan['stcoins']}**
üìä –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: **{plan['consultations']} —à—Ç.**

{PRICING_TEXTS['payment_processing']}
"""
        
        await query.edit_message_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_pricing")
            ]])
        )

async def create_yookassa_payment(user_id: int, plan_id: str, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ API —Å–µ—Ä–≤–µ—Ä"""
    async with aiohttp.ClientSession() as session:
        payload = {
            "user_id": user_id,
            "plan_id": plan_id,
            "return_url": f"https://t.me/{context.bot.username}"
        }
        
        async with session.post(
            f"{WEBAPP_URL}/api/v1/payments/create",
            json=payload
        ) as response:
            if response.status == 200:
                data = await response.json()
                return data["payment_url"]
            else:
                error_text = await response.text()
                raise Exception(f"API error {response.status}: {error_text}")

# ================================
# –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò
# ================================

async def handle_consultation_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    balance = database.get_user_balance(user_id) or 0
    
    if balance < 10:
        keyboard = [
            [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å STcoin", callback_data="show_pricing")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        
        await query.edit_message_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ STcoin –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} STcoin\n"
            f"üíé –ù—É–∂–Ω–æ: 10 STcoin\n\n"
            "–ö—É–ø–∏—Ç–µ STcoin –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø–æ–≤–æ–¥–∞
    user_states[user_id] = UserState.SELECTING_OCCASION
    
    await query.edit_message_text(
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:",
        reply_markup=get_occasion_keyboard()
    )

async def handle_occasion_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–≤–æ–¥–∞"""
    query = update.callback_query
    await query.answer()
    
    occasion_map = {
        "business": "–î–µ–ª–æ–≤–∞—è –≤—Å—Ç—Ä–µ—á–∞",
        "party": "–í–µ—á–µ—Ä–∏–Ω–∫–∞",
        "casual": "–ü—Ä–æ–≥—É–ª–∫–∞", 
        "date": "–°–≤–∏–¥–∞–Ω–∏–µ",
        "home": "–î–æ–º–∞",
        "creative": "–¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
    }
    
    occasion_code = query.data.replace("occasion_", "")
    occasion = occasion_map.get(occasion_code, "–û–±—â–∏–π —Å—Ç–∏–ª—å")
    
    user_id = update.effective_user.id
    context.user_data['selected_occasion'] = occasion
    user_states[user_id] = UserState.WAITING_FOR_PHOTO
    
    webapp_url = f"{WEBAPP_URL}/webapp/"
    keyboard = [
        [InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", url=webapp_url)],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ–≤–æ–¥", callback_data="get_consultation")]
    ]
    
    await query.edit_message_text(
        f"üéØ –ü–æ–≤–æ–¥: **{occasion}**\n\n"
        "üì∑ –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞–∑–∞ —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä—è–º–æ –≤ —á–∞—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π"""
    user_id = update.effective_user.id
    
    if user_states.get(user_id) != UserState.WAITING_FOR_PHOTO:
        await update.message.reply_text(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–≤–æ–¥ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –º–µ–Ω—é!",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    balance = database.get_user_balance(user_id) or 0
    if balance < 10:
        await update.message.reply_text(
            "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ STcoin –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏!",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        processing_msg = await update.message.reply_text("üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –æ–±—Ä–∞–∑...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        file_bytes = await file.download_as_bytearray()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–≤–æ–¥
        occasion = context.user_data.get('selected_occasion', '–û–±—â–∏–π —Å—Ç–∏–ª—å')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Gemini AI
        advice = await gemini_ai.analyze_clothing_image(
            image_data=file_bytes,
            occasion=occasion,
            preferences=""
        )
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º STcoin
        database.update_user_balance(user_id, -10)
        new_balance = database.get_user_balance(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation_id = database.save_consultation(
            user_id=user_id,
            occasion=occasion,
            preferences="",
            image_path=photo.file_id,
            advice=advice
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_text = f"""
‚ú® **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{consultation_id}**

üéØ **–ü–æ–≤–æ–¥:** {occasion}
üí∞ **–°–ø–∏—Å–∞–Ω–æ:** 10 STcoin (–æ—Å—Ç–∞–ª–æ—Å—å: {new_balance})

**üé® –°–æ–≤–µ—Ç —Å—Ç–∏–ª–∏—Å—Ç–∞:**
{advice}
"""
        
        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = [
            [
                InlineKeyboardButton("üíé –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –≥–∞—Ä–¥–µ—Ä–æ–±", 
                                   callback_data=f"save_to_wardrobe_{photo.file_id}"),
                InlineKeyboardButton("üöÄ –ù–æ–≤–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="get_consultation")
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        
        await update.message.reply_text(
            result_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.MARKDOWN
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_states[user_id] = UserState.NORMAL
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ: {e}")
        await processing_msg.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )

# ================================
# –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò –ò –ì–ê–†–î–ï–†–û–ë
# ================================

async def show_consultations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"""
    query = update.callback_query
    await query.answer()
    
    user_id = update.effective_user.id
    consultations = database.get_user_consultations(user_id, limit=10)
    
    if not consultations:
        await query.edit_message_text(
            "üìö –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.\n\n"
            "–ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üöÄ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data="get_consultation"),
                InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
            ]])
        )
        return
    
    text = "üìö **–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:**\n\n"
    keyboard = []
    
    for consultation in consultations:
        date = consultation['created_at'][:10]  # YYYY-MM-DD
        text += f"#{consultation['id']} - {consultation['occasion']} ({date})\n"
        
        keyboard.append([InlineKeyboardButton(
            f"üìã –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{consultation['id']}",
            callback_data=f"view_consultation_{consultation['id']}"
        )])
    
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")])
    
    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def view_consultation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–¥–µ–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
    query = update.callback_query
    await query.answer()
    
    consultation_id = int(query.data.split("_")[-1])
    user_id = update.effective_user.id
    
    consultation = database.get_consultation(consultation_id, user_id)
    if not consultation:
        await query.answer("‚ùå –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    response_text = f"""
üìã **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è #{consultation_id}**

üìÖ **–î–∞—Ç–∞:** {consultation['created_at']}
üéØ **–ü–æ–≤–æ–¥:** {consultation['occasion']}

**üé® –°–æ–≤–µ—Ç —Å—Ç–∏–ª–∏—Å—Ç–∞:**
{consultation['advice']}
"""
    
    keyboard = [
        [InlineKeyboardButton("üìö –í—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏", callback_data="my_consultations")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    
    await query.edit_message_text(
        response_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.MARKDOWN
    )

async def save_to_wardrobe(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –≥–∞—Ä–¥–µ—Ä–æ–±"""
    query = update.callback_query
    await query.answer()
    
    file_id = query.data.replace("save_to_wardrobe_", "")
    user_id = update.effective_user.id
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –±–∞–∑–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
    wardrobe_id = database.save_wardrobe_item(
        user_id=user_id,
        telegram_file_id=file_id,
        item_name="–ü—Ä–µ–¥–º–µ—Ç –æ–¥–µ–∂–¥—ã",
        item_tag="–Ω–æ–≤—ã–π"
    )
    
    keyboard = [
        [InlineKeyboardButton("üíé –û—Ç–∫—Ä—ã—Ç—å –≥–∞—Ä–¥–µ—Ä–æ–±", callback_data="my_wardrobe")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"edit_name_{wardrobe_id}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    
    await query.edit_message_text(
        f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≥–∞—Ä–¥–µ—Ä–æ–±!\n\n"
        f"üÜî ID: {wardrobe_id}\n"
        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /name_{wardrobe_id} –Ω–æ–≤–æ–µ_–Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–û–í
# ================================

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if data == "back_to_main":
        balance = database.get_user_balance(update.effective_user.id) or 0
        await query.edit_message_text(
            f"üé≠ **–ú–ò–®–£–†–ê** - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} STcoin",
            reply_markup=get_main_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    # –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    elif data == "get_consultation":
        await handle_consultation_request(update, context)
    elif data.startswith("occasion_"):
        await handle_occasion_selection(update, context)
    elif data == "my_consultations":
        await show_consultations(update, context)
    elif data.startswith("view_consultation_"):
        await view_consultation(update, context)
    
    # –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
    elif data == "show_pricing":
        await show_pricing_plans(update, context)
    elif data.startswith("buy_plan_"):
        await handle_plan_purchase(update, context)
    elif data.startswith("confirm_purchase_"):
        await handle_purchase_confirmation(update, context)
    
    # –ì–∞—Ä–¥–µ—Ä–æ–± - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
    elif data == "my_wardrobe":
        await query.edit_message_text(
            "üíé –ì–∞—Ä–¥–µ—Ä–æ–± –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n\n–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )
    elif data.startswith("save_to_wardrobe_"):
        await query.edit_message_text(
            "üíé –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≥–∞—Ä–¥–µ—Ä–æ–± –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.\n\n–§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )
    
    # –ü–æ–º–æ—â—å
    elif data == "help":
        await help_command(update, context)

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_states.get(user_id) == UserState.WAITING_FOR_PHOTO:
        await update.message.reply_text(
            "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
    await update.message.reply_text(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_menu_keyboard()
    )

# ================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ================================

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database.init_db()
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("webapp", webapp_command))
    application.add_handler(CommandHandler("consultation", consultation_by_id))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback'–æ–≤ –¥–ª—è —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤
    application.add_handler(CallbackQueryHandler(
        show_pricing_plans, pattern="^show_pricing$"
    ))
    application.add_handler(CallbackQueryHandler(
        handle_plan_purchase, pattern="^buy_plan_"
    ))
    application.add_handler(CallbackQueryHandler(
        handle_purchase_confirmation, pattern="^confirm_purchase_"
    ))
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.PHOTO, photo_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üé≠ –ú–ò–®–£–†–ê –∑–∞–ø—É—â–µ–Ω–∞!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()