# üîî –°–ò–°–¢–ï–ú–ê –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ê–î–ú–ò–ù–£ - admin_notifications.py

import os
import logging
import asyncio
import aiohttp
from datetime import datetime
from typing import Optional, Dict, Any

logger = logging.getLogger("AdminNotifications")

class AdminNotificationService:
    """
    üîî –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–µ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö
    """
    
    def __init__(self):
        self.bot_token = os.getenv('TELEGRAM_TOKEN')
        self.admin_chat_id = os.getenv('ADMIN_TELEGRAM_ID')  # ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.enabled = bool(self.bot_token and self.admin_chat_id)
        
        if not self.enabled:
            logger.warning("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ—Ç–∫–ª—é—á–µ–Ω—ã - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_TOKEN –∏–ª–∏ ADMIN_TELEGRAM_ID")
        else:
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –≤–∫–ª—é—á–µ–Ω—ã –¥–ª—è chat_id: {self.admin_chat_id}")
    
    async def send_feedback_notification(self, feedback_data: Dict[str, Any], user_data: Dict[str, Any] = None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ"""
        
        if not self.enabled:
            logger.debug("üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
        
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_feedback_message(feedback_data, user_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ Telegram Bot API
            success = await self._send_telegram_message(message)
            
            if success:
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–∑—ã–≤–µ ID={feedback_data.get('id')} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É")
                return True
            else:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –æ—Ç–∑—ã–≤–µ ID={feedback_data.get('id')}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _format_feedback_message(self, feedback_data: Dict[str, Any], user_data: Dict[str, Any] = None) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç–∑—ã–≤–µ"""
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤–∞
        feedback_id = feedback_data.get('id', 'N/A')
        telegram_id = feedback_data.get('telegram_id', 'N/A')
        feedback_text = feedback_data.get('feedback_text', '')
        feedback_rating = feedback_data.get('feedback_rating', 'unknown')
        character_count = feedback_data.get('character_count', 0)
        consultation_id = feedback_data.get('consultation_id', 'N/A')
        bonus_awarded = feedback_data.get('bonus_awarded', False)
        created_at = feedback_data.get('created_at', datetime.now().isoformat())
        
        # –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        user_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        user_balance = "N/A"
        
        if user_data:
            first_name = user_data.get('first_name', '')
            last_name = user_data.get('last_name', '')
            username = user_data.get('username', '')
            user_balance = user_data.get('balance', 'N/A')
            
            if first_name or last_name:
                user_name = f"{first_name} {last_name}".strip()
            elif username:
                user_name = f"@{username}"
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        rating_emoji = "üëç" if feedback_rating == "positive" else "üëé"
        rating_text = "–ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å" if feedback_rating == "positive" else "–ù–µ –æ—á–µ–Ω—å"
        
        # –≠–º–æ–¥–∑–∏ –¥–ª—è –±–æ–Ω—É—Å–∞
        bonus_emoji = "üí∞" if bonus_awarded else "‚è≥"
        bonus_text = "–ù–∞—á–∏—Å–ª–µ–Ω" if bonus_awarded else "–ù–µ –Ω–∞—á–∏—Å–ª–µ–Ω"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç (–¥–ª—è –±—É–¥—É—â–µ–≥–æ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        urgency_emoji = "üî•" if feedback_rating == "negative" else "‚ú®"
        
        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞
        preview_text = feedback_text
        if len(preview_text) > 200:
            preview_text = preview_text[:200] + "..."
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        try:
            if isinstance(created_at, str):
                dt = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                formatted_date = dt.strftime("%d.%m.%Y %H:%M")
            else:
                formatted_date = created_at.strftime("%d.%m.%Y %H:%M")
        except:
            formatted_date = str(created_at)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""üé≠ <b>–ù–û–í–´–ô –û–¢–ó–´–í –ú–ò–®–£–†–ê</b> {urgency_emoji}

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_name}
üÜî <b>Telegram ID:</b> <code>{telegram_id}</code>
üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user_balance} STcoin

{rating_emoji} <b>–û—Ü–µ–Ω–∫–∞:</b> {rating_text}
üìè <b>–î–ª–∏–Ω–∞:</b> {character_count} —Å–∏–º–≤–æ–ª–æ–≤
üéØ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:</b> #{consultation_id}
{bonus_emoji} <b>–ë–æ–Ω—É—Å:</b> {bonus_text}
üìÖ <b>–í—Ä–µ–º—è:</b> {formatted_date}

üìù <b>–¢–µ–∫—Å—Ç –æ—Ç–∑—ã–≤–∞:</b>
<blockquote>{preview_text}</blockquote>

üìä <b>ID –æ—Ç–∑—ã–≤–∞:</b> #{feedback_id}

<i>üîó –ü—Ä–æ—Å–º–æ—Ç—Ä: /admin/feedback</i>"""

        return message
    
    async def _send_telegram_message(self, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram Bot API"""
        
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        
        payload = {
            "chat_id": self.admin_chat_id,
            "text": message,
            "parse_mode": "HTML",
            "disable_web_page_preview": True
        }
        
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(url, json=payload, timeout=10) as response:
                    if response.status == 200:
                        result = await response.json()
                        if result.get('ok'):
                            return True
                        else:
                            logger.error(f"‚ùå Telegram API –æ—à–∏–±–∫–∞: {result}")
                            return False
                    else:
                        logger.error(f"‚ùå HTTP –æ—à–∏–±–∫–∞ {response.status}: {await response.text()}")
                        return False
                        
        except asyncio.TimeoutError:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")
            return False
    
    async def send_daily_summary(self):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –æ—Ç–∑—ã–≤–∞–º"""
        
        if not self.enabled:
            return False
        
        try:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–≤–æ–¥–æ–∫
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            from database import MishuraDB
            db = MishuraDB()
            stats = db.get_feedback_stats()
            
            message = f"""üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–ê–Ø –°–í–û–î–ö–ê –ú–ò–®–£–†–ê</b>

üìù <b>–û—Ç–∑—ã–≤—ã —Å–µ–≥–æ–¥–Ω—è:</b> {stats.get('feedback_today', 0)}
üìà <b>–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤:</b> {stats.get('total_feedback', 0)}
üìè <b>–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞:</b> {stats.get('avg_feedback_length', 0)} —Å–∏–º–≤–æ–ª–æ–≤
üëç <b>–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö:</b> {stats.get('positive_feedback_percent', 0)}%
üí∞ <b>–ë–æ–Ω—É—Å–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ:</b> {stats.get('bonuses_awarded', 0)}

üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y')}

<i>–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üé≠</i>"""

            return await self._send_telegram_message(message)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            return False
    
    async def test_notification(self):
        """–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        
        if not self.enabled:
            logger.warning("‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
            return False
        
        test_message = f"""üß™ <b>–¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –ú–ò–®–£–†–ê</b>

‚úÖ –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!

ü§ñ <b>Bot Token:</b> –ù–∞—Å—Ç—Ä–æ–µ–Ω
üë§ <b>Admin ID:</b> {self.admin_chat_id}
üìÖ <b>–í—Ä–µ–º—è —Ç–µ—Å—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}

<i>–ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ—Ç–∑—ã–≤–∞—Ö! üé≠</i>"""

        success = await self._send_telegram_message(test_message)
        
        if success:
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
            
        return success

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
notification_service = AdminNotificationService()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def notify_new_feedback(feedback_data: Dict[str, Any], user_data: Dict[str, Any] = None):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–≤–æ–º –æ—Ç–∑—ã–≤–µ"""
    return await notification_service.send_feedback_notification(feedback_data, user_data)

async def test_admin_notifications():
    """–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    return await notification_service.test_notification()

async def send_daily_summary():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—É—é —Å–≤–æ–¥–∫—É"""
    return await notification_service.send_daily_summary()