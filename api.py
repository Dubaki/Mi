#!/usr/bin/env python3
"""
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: Production API —Å–µ—Ä–≤–µ—Ä —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ÆKassa (api.py)
–í–ï–†–°–ò–Ø: 1.3.1 - –ò–°–ü–†–ê–í–õ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ RENDER.COM
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-06-16

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini AI
+ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ÆKassa

–ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø v1.3.1:
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Render.com
- –£–±—Ä–∞–Ω–∞ –±–ª–æ–∫–∏—Ä—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ payment_service.configured
- –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π –ÆKassa
==========================================================================================
"""

import os
import sys
import asyncio
from datetime import datetime
from pathlib import Path
import logging
import base64
import json
import traceback
from typing import Optional, List, Dict, Any
import uvicorn
from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Request, Header
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from pydantic import BaseModel
import google.generativeai as genai
from PIL import Image
import io
from fastapi.staticfiles import StaticFiles

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ database.py –∏ payment_service.py
sys.path.append(str(Path(__file__).parent))

try:
    import database
except ImportError:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å database.py")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª database.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    sys.exit(1)

try:
    import payment_service
except ImportError:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å payment_service.py")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª payment_service.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - %(name)s - %(message)s',
    handlers=[
        logging.FileHandler('api_server.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("MishuraAPI")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_MODEL = os.getenv('GEMINI_MODEL', 'gemini-1.5-flash')
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
HOST = os.getenv('HOST', '0.0.0.0')
PORT = int(os.getenv('BACKEND_PORT', 8000))

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="–ú–ò–®–£–†–ê –ò–ò-–°—Ç–∏–ª–∏—Å—Ç API —Å –ÆKassa",
    description="API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è –æ–¥–µ–∂–¥—ã —Å –ø–æ–º–æ—â—å—é Google Gemini AI + –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
    version="1.3.1",
    docs_url="/api/v1/docs" if DEBUG else None,
    redoc_url="/api/v1/redoc" if DEBUG else None
)

# –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê CORS –î–õ–Ø RENDER.COM
if ENVIRONMENT == 'production':
    origins = [
        "https://style-ai-bot.onrender.com",
        "https://style-ai-bot.onrender.com/webapp",
        "http://localhost:8000",  # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        "http://127.0.0.1:8000"
    ]
else:
    origins = [
        "http://localhost:3000",
        "http://localhost:8000",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:8000"
    ]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],  # –î–æ–±–∞–≤–ª–µ–Ω OPTIONS
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini AI
gemini_configured = False
gemini_model = None

def init_gemini():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini AI"""
    global gemini_configured, gemini_model
    
    try:
        if not GEMINI_API_KEY:
            logger.error("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        genai.configure(api_key=GEMINI_API_KEY)
        gemini_model = genai.GenerativeModel(GEMINI_MODEL)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_response = gemini_model.generate_content("Test connection")
        
        gemini_configured = True
        logger.info(f"‚úÖ Gemini AI –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (–º–æ–¥–µ–ª—å: {GEMINI_MODEL})")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini AI: {e}")
        gemini_configured = False
        return False

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
class AnalyzeRequest(BaseModel):
    occasion: str = "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π"
    preferences: Optional[str] = None
    user_id: Optional[int] = None

class CompareRequest(BaseModel):
    occasion: str = "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π"
    preferences: Optional[str] = None
    user_id: Optional[int] = None

class HealthResponse(BaseModel):
    status: str
    service: str
    version: str
    gemini_configured: bool
    gemini_working: bool
    environment: str
    timestamp: str

# –ù–û–í–´–ï –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–• –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô
class CreatePaymentRequest(BaseModel):
    user_id: int
    package_id: str
    return_url: Optional[str] = None

class WebhookRequest(BaseModel):
    event: str
    object: Dict[str, Any]

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
class UserBalanceRequest(BaseModel):
    user_id: int

class UserBalanceResponse(BaseModel):
    status: str
    user_id: int
    balance: int
    consultations_available: int
    timestamp: str

class UserInitRequest(BaseModel):
    user_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
def process_image(image_data: bytes) -> Image.Image:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        image = Image.open(io.BytesIO(image_data))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        max_size = 1024
        if max(image.size) > max_size:
            image.thumbnail((max_size, max_size), Image.Resampling.LANCZOS)
        
        return image
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

async def analyze_with_gemini(image: Image.Image, occasion: str, preferences: str = None) -> str:
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Gemini AI"""
    try:
        if not gemini_configured:
            raise HTTPException(status_code=503, detail="Gemini AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ù–û–í–´–ô –ü–†–û–ú–ü–¢ –¥–ª—è Instagram-–±–ª–æ–≥–µ—Ä–∞
        prompt = f"""
–¢—ã ‚Äî –º–æ–¥–Ω—ã–π Instagram-–±–ª–æ–≥–µ—Ä —Å 1 –º–ª–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –†–æ—Å—Å–∏–∏. –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –æ–±–æ–∂–∞—é—Ç —Ç–µ–±—è –∑–∞ –ª—ë–≥–∫–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–æ —Å—Ç–∏–ª—è –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –¢—ã –≤—Å–µ–≥–¥–∞ –¥–∞–µ—à—å –ø–æ–Ω—è—Ç–Ω—ã–µ, —Å—Ç–∏–ª—å–Ω—ã–µ –∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö, –Ω–µ –±–æ–π—Å—è –ª–∞–π—Ñ—Ö–∞–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –º–µ—Ç–∞—Ñ–æ—Ä. –ë—É–¥—å –∫–∞–∫ –ø–æ–¥—Ä—É–∂–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ —Å–∫–∞–∂–µ—Ç —á–µ—Å—Ç–Ω–æ ‚Äî –Ω–æ —Å –ª—é–±–æ–≤—å—é.

–ü–û–í–û–î: {occasion}
{'–ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø: ' + preferences if preferences else ''}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—Ä–∞–∑ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –Ω–æ –µ–º–∫–∏–µ —Å–æ–≤–µ—Ç—ã:

1. **–û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ** (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. **–ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç** –≤ –æ–±—Ä–∞–∑–µ 
3. **–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å** (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã)
4. **–ü—Ä–∏—á–µ—Å–∫–∞ –∏ –º–∞–∫–∏—è–∂** (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ)
5. **–†–µ–π—Ç–∏–Ω–≥: X/10** –∏ –ø–æ—á–µ–º—É

–ü–∏—à–∏ –∂–∏–≤–æ, —Å —ç–º–æ–¥–∑–∏, –∫–∞–∫ –≤ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º–µ. –ù–∞—á–Ω–∏ —Å —ç–º–æ–¥–∑–∏ –∏ "–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–æ—Ç–∫–∞!"

–ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª—è: "–û–±–æ–∂–∞—é total beige, –Ω–æ –∑–¥–µ—Å—å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞. –î–æ–±–∞–≤—å —è—Ä–∫–∏–π –±–∞–≥–µ—Ç –∏–ª–∏ –∫—Ä–∞—Å–Ω—É—é –ø–æ–º–∞–¥—É ‚Äî –∏ –æ–±—Ä–∞–∑ –∑–∞–∏–≥—Ä–∞–µ—Ç ‚ú®"

–ë—É–¥—å –∫—Ä–∞—Ç–∫–æ–π, –Ω–æ —Ç–æ—á–Ω–æ–π!
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
        response = await asyncio.to_thread(
            gemini_model.generate_content, 
            [prompt, image]
        )
        
        if not response.text:
            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ Gemini AI –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return response.text
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Gemini: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤–æ–º —Å—Ç–∏–ª–µ
        return f"""
üí´ –ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–æ—Ç–∫–∞!

## ‚ö†Ô∏è –û–π, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π!

–ü—Ä–æ—Å—Ç–∏, —Å–µ–π—á–∞—Å –Ω–µ–º–Ω–æ–≥–æ –≥–ª—é—á–∏—Ç, –Ω–æ —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!

**–ü–æ–≤–æ–¥:** {occasion}

**–ë—ã—Å—Ç—Ä—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å –ø–æ—Å–∞–¥–∫—É ‚Äî –≤—Å–µ –¥–æ–ª–∂–Ω–æ —Å–∏–¥–µ—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ!
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 —Ü–≤–µ—Ç–∞ –≤ –æ–±—Ä–∞–∑–µ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –¥–µ—Ç–∞–ª–∏
‚Ä¢ –û–¥–∏–Ω —è—Ä–∫–∏–π –∞–∫—Ü–µ–Ω—Ç –∏ —Ç—ã –∑–≤–µ–∑–¥–∞ ‚≠ê
‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã ‚Äî –æ–Ω–∏ –¥–µ–ª–∞—é—Ç –æ–±—Ä–∞–∑

**–†–µ–π—Ç–∏–Ω–≥:** –£–≤–∏–¥–∏–º—Å—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É! üíï

*–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —è —É–∂–µ —Å–∫—É—á–∞—é! ü•∞*
"""

async def compare_with_gemini(images: List[Image.Image], occasion: str, preferences: str = None) -> str:
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—Ä–∞–∑–æ–≤ —Å –ø–æ–º–æ—â—å—é Gemini AI"""
    try:
        if not gemini_configured:
            raise HTTPException(status_code=503, detail="Gemini AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ù–û–í–´–ô –ü–†–û–ú–ü–¢ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ Instagram-–±–ª–æ–≥–µ—Ä–∞
        prompt = f"""
–¢—ã ‚Äî –º–æ–¥–Ω—ã–π Instagram-–±–ª–æ–≥–µ—Ä —Å 1 –º–ª–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –†–æ—Å—Å–∏–∏. –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –æ–±–æ–∂–∞—é—Ç —Ç–µ–±—è –∑–∞ –ª—ë–≥–∫–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–æ —Å—Ç–∏–ª—è –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.

–°—Ä–∞–≤–Ω–∏ —ç—Ç–∏ {len(images)} –æ–±—Ä–∞–∑–∞ –¥–ª—è: {occasion}
{'–£—á—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ' + preferences if preferences else ''}

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–∑–∞ –¥–∞–π:
1. **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ** (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
2. **–†–µ–π—Ç–∏–Ω–≥ X/10** 
3. **–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∞—è –æ—Ü–µ–Ω–∫–∞**
4. **–ü—Ä–∏—á–µ—Å–∫–∞/–º–∞–∫–∏—è–∂** (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ)

–ü–æ—Ç–æ–º **–ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢**: –∫–∞–∫–æ–π –æ–±—Ä–∞–∑ –ª—É—á—à–µ –∏ –ø–æ—á–µ–º—É.

–ü–∏—à–∏ –∂–∏–≤–æ, —Å —ç–º–æ–¥–∑–∏, –∫–∞–∫ –ø–æ–¥—Ä—É–∂–∫–∞! –ù–∞—á–Ω–∏ —Å "–û–≥–æ, –∫–∞–∫–∞—è –¥–∏–ª–µ–º–º–∞! üòç"

–ë—É–¥—å –∫—Ä–∞—Ç–∫–æ–π, –Ω–æ —á–µ—Å—Ç–Ω–æ–π!
"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        content = [prompt] + images
        
        response = await asyncio.to_thread(
            gemini_model.generate_content,
            content
        )
        
        if not response.text:
            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
        
        logger.info(f"‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {len(images)} –æ–±—Ä–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return response.text
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è Gemini: {e}")
        return f"""
üòç –û–≥–æ, –∫–∞–∫–∞—è –¥–∏–ª–µ–º–º–∞!

## ‚ö†Ô∏è –£–ø—Å, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏!

–•–æ—á–µ—Ç—Å—è —Å—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –æ–±—Ä–∞–∑—ã, –Ω–æ —á—Ç–æ-—Ç–æ –≥–ª—é—á–∏—Ç!

**–ü–æ–≤–æ–¥:** {occasion}

**–ú–æ–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤—ã–±–æ—Ä–∞:**
üéØ –ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥—Ä–µ—Å—Å-–∫–æ–¥—É —Å–æ–±—ã—Ç–∏—è?
üí´ –ß—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏ —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ?
‚ú® –í—Å–µ –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≥–∞—Ä–º–æ–Ω–∏–∏?
üíï –ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ —Å–∞–º–æ–π?

**–°–æ–≤–µ—Ç:** –í—ã–±–∏—Ä–∞–π —Ç–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –Ω–∞ 100! 

*–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —Ä–µ—à–∏–º —ç—Ç—É –¥–∏–ª–µ–º–º—É –≤–º–µ—Å—Ç–µ! üí™*
"""

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è  
app.mount("/webapp", StaticFiles(directory="webapp"), name="webapp")

# ===========================================================================
# –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï API –†–û–£–¢–´ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# ===========================================================================

@app.get("/api/v1/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å Gemini
    gemini_working = False
    if gemini_configured:
        try:
            test_response = await asyncio.to_thread(
                gemini_model.generate_content, 
                "Test"
            )
            gemini_working = bool(test_response.text)
        except:
            gemini_working = False
    
    return HealthResponse(
        status="healthy",
        service="–ú–ò–®–£–†–ê –ò–ò-–°—Ç–∏–ª–∏—Å—Ç API —Å –ÆKassa",
        version="1.3.1",
        gemini_configured=gemini_configured,
        gemini_working=gemini_working,
        environment=ENVIRONMENT,
        timestamp=datetime.now().isoformat()
    )

@app.post("/api/v1/analyze")
async def analyze_clothing(
    request: Request,
    file: UploadFile = File(...),
    occasion: str = Form("–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π"),
    preferences: Optional[str] = Form(None),
    user_id: Optional[int] = Form(None)
):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã"""
    
    logger.info(f"üì§ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑: {file.filename}, –ø–æ–≤–æ–¥: {occasion}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.content_type.startswith('image/'):
            raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        
        # –ß–∏—Ç–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = await file.read()
        image = process_image(image_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é Gemini
        advice = await analyze_with_gemini(image, occasion, preferences)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        consultation_id = None
        if user_id:
            try:
                consultation_id = database.save_consultation(
                    user_id=user_id,
                    occasion=occasion,
                    preferences=preferences,
                    image_path=file.filename,
                    advice=advice
                )
                
                # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
                database.update_user_balance(user_id, -10)  # STcoin: —Å–ø–∏—Å—ã–≤–∞–µ–º 10 STcoin
                logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ 10 STcoin")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        
        response_data = {
            "status": "success",
            "advice": advice,
            "metadata": {
                "consultation_id": consultation_id,
                "occasion": occasion,
                "preferences": preferences,
                "timestamp": datetime.now().isoformat(),
                "model": GEMINI_MODEL,
                "environment": ENVIRONMENT
            }
        }
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ (ID: {consultation_id})")
        return JSONResponse(content=response_data)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

@app.post("/api/v1/compare")
async def compare_clothing(
    request: Request,
    files: List[UploadFile] = File(...),
    occasion: str = Form("–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π"),
    preferences: Optional[str] = Form(None),
    user_id: Optional[int] = Form(None)
):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—Ä–∞–∑–æ–≤"""
    
    logger.info(f"üì§ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {len(files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–≤–æ–¥: {occasion}")
    
    try:
        if len(files) < 2:
            raise HTTPException(status_code=400, detail="–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        if len(files) > 4:
            raise HTTPException(status_code=400, detail="–ú–∞–∫—Å–∏–º—É–º 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = []
        for file in files:
            if not file.content_type.startswith('image/'):
                raise HTTPException(status_code=400, detail=f"–§–∞–π–ª {file.filename} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
            
            image_data = await file.read()
            image = process_image(image_data)
            images.append(image)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ–º–æ—â—å—é Gemini
        advice = await compare_with_gemini(images, occasion, preferences)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        consultation_id = None
        if user_id:
            try:
                filenames = ", ".join([f.filename for f in files])
                consultation_id = database.save_consultation(
                    user_id=user_id,
                    occasion=occasion,
                    preferences=preferences,
                    image_path=filenames,
                    advice=advice
                )
                
                # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–µ)
                cost = len(files) * 10  # STcoin: 10 STcoin –∑–∞ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                database.update_user_balance(user_id, -cost)
                logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {cost} STcoin")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        
        response_data = {
            "status": "success",
            "advice": advice,
            "metadata": {
                "consultation_id": consultation_id,
                "occasion": occasion,
                "preferences": preferences,
                "images_count": len(files),
                "timestamp": datetime.now().isoformat(),
                "model": GEMINI_MODEL,
                "environment": ENVIRONMENT
            }
        }
        
        logger.info(f"‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (ID: {consultation_id})")
        return JSONResponse(content=response_data)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {str(e)}")

@app.get("/api/v1/status")
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ Gemini AI"""
    return {
        "api_status": "online",
        "gemini_status": "connected" if gemini_configured else "disconnected",
        "environment": ENVIRONMENT,
        "model": GEMINI_MODEL if gemini_configured else None,
        "timestamp": datetime.now().isoformat()
    }

# ===========================================================================
# –ù–û–í–´–ï API –†–û–£–¢–´ –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ï–ô –ÆKassa
# ===========================================================================

@app.get("/api/v1/payments/packages")
async def get_payment_packages():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è STcoin"""
    logger.info("üì¶ –ó–∞–ø—Ä–æ—Å –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    try:
        packages = payment_service.payment_service.get_packages()
        return JSONResponse(content=packages)
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–æ–≤")

@app.post("/api/v1/payments/create")
async def create_payment(request: CreatePaymentRequest):
    """–°–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø RENDER.COM"""
    logger.info(f"üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={request.user_id}, package={request.package_id}")
    
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üì• Request data: user_id={request.user_id}, package_id={request.package_id}, return_url={request.return_url}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ payment_service –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        if not hasattr(payment_service, 'payment_service'):
            logger.error("‚ùå payment_service –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            raise HTTPException(status_code=503, detail="–ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –ù–ï –ø—Ä–æ–≤–µ—Ä—è–µ–º configured (—Ç–µ—Å—Ç–æ–≤—ã–µ –∫–ª—é—á–∏ –º–æ–≥—É—Ç –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É)
        logger.info(f"üîß Payment service status: configured={payment_service.payment_service.configured}")
        logger.info(f"üîß Environment: {ENVIRONMENT}")
        logger.info(f"üîß YuKassa keys present: shop_id={bool(os.getenv('YUKASSA_SHOP_ID'))}, secret_key={bool(os.getenv('YUKASSA_SECRET_KEY'))}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–∞–∂–µ –µ—Å–ª–∏ configured=False (–¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª—é—á–µ–π)
        try:
            result = payment_service.payment_service.create_payment(
                user_id=request.user_id,
                package_id=request.package_id,
                return_url=request.return_url
            )
            
            logger.info(f"üîß Payment service result status: {result.get('status', 'unknown')}")
            
            if result.get('status') == 'success':
                logger.info(f"‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {result.get('payment_id', 'unknown')}")
                return JSONResponse(content=result)
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {result}")
                
                # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
                error_detail = result.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂')
                error_type = result.get('error', 'unknown')
                
                logger.error(f"‚ùå Error type: {error_type}")
                logger.error(f"‚ùå Error detail: {error_detail}")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –æ—à–∏–±–∫—É
                raise HTTPException(
                    status_code=400, 
                    detail={
                        "error": error_type,
                        "message": error_detail,
                        "debug_info": {
                            "environment": ENVIRONMENT,
                            "payment_service_configured": payment_service.payment_service.configured,
                            "yukassa_keys_present": bool(os.getenv('YUKASSA_SHOP_ID') and os.getenv('YUKASSA_SECRET_KEY'))
                        }
                    }
                )
                
        except Exception as payment_error:
            logger.error(f"‚ùå Exception –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {payment_error}")
            logger.error(f"‚ùå Exception type: {type(payment_error)}")
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –ÆKassa API
            if "yookassa" in str(payment_error).lower() or "unauthorized" in str(payment_error).lower():
                raise HTTPException(
                    status_code=503,
                    detail=f"–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –ÆKassa: {str(payment_error)}"
                )
            else:
                raise HTTPException(
                    status_code=500,
                    detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {str(payment_error)}"
                )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
        raise HTTPException(
            status_code=500, 
            detail=f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        )

@app.post("/api/v1/payments/webhook")
async def payment_webhook(
    request: Request,
    signature: Optional[str] = Header(None, alias="X-Signature")
):
    """Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa"""
    logger.info("üîî –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç –ÆKassa")
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.body()
        webhook_data = json.loads(body.decode('utf-8'))
        
        logger.debug(f"üì® Webhook –¥–∞–Ω–Ω—ã–µ: {json.dumps(webhook_data, ensure_ascii=False, indent=2)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å (–≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ)
        if signature and ENVIRONMENT == 'production':
            is_valid = payment_service.payment_service.validate_webhook_signature(
                body.decode('utf-8'), 
                signature
            )
            if not is_valid:
                logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å webhook")
                raise HTTPException(status_code=401, detail="–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º webhook
        result = payment_service.payment_service.process_webhook(webhook_data)
        
        if result['status'] == 'success':
            logger.info(f"‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ: {result}")
            return JSONResponse(content={"status": "ok"})
        elif result['status'] == 'ignored':
            logger.info(f"‚ÑπÔ∏è Webhook –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω: {result}")
            return JSONResponse(content={"status": "ok"})
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {result}")
            return JSONResponse(
                content={"status": "error", "message": result.get('message')},
                status_code=400
            )
            
    except json.JSONDecodeError:
        logger.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON –≤ webhook")
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook")

@app.get("/api/v1/payments/status/{payment_id}")
async def get_payment_status(payment_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    logger.info(f"üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {payment_id}")
    
    try:
        result = payment_service.payment_service.get_payment_status(payment_id)
        
        if result['status'] == 'success':
            return JSONResponse(content=result)
        else:
            raise HTTPException(
                status_code=404, 
                detail=result.get('message', '–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            )
            
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")

# ===========================================================================
# –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –§–ê–ô–õ–´ –ò –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø
# ===========================================================================

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/")
async def read_root():
    return FileResponse('webapp/index.html')

# Catch-all (–ü–û–°–õ–ï–î–ù–ò–ú!)
@app.get("/{full_path:path}")
async def catch_all(full_path: str):
    file_path = Path("webapp") / full_path
    if file_path.exists() and file_path.is_file():
        return FileResponse(file_path)
    return FileResponse('webapp/index.html')

# ===========================================================================
# –°–û–ë–´–¢–ò–Ø –ñ–ò–ó–ù–ï–ù–ù–û–ì–û –¶–ò–ö–õ–ê
# ===========================================================================

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ú–ò–®–£–†–ê API —Å–µ—Ä–≤–µ—Ä–∞ —Å –ÆKassa...")
    logger.info(f"üìã –°—Ä–µ–¥–∞: {ENVIRONMENT}")
    logger.info(f"üåê –•–æ—Å—Ç: {HOST}:{PORT}")
    logger.info(f"üîß Debug —Ä–µ–∂–∏–º: {DEBUG}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        if database.init_db():
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini AI
    if init_gemini():
        logger.info("‚úÖ Gemini AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.warning("‚ö†Ô∏è Gemini AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ fallback")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    payment_status = payment_service.payment_service.get_service_status()
    logger.info(f"üîß Payment service status: {payment_status}")
    
    if payment_status['status'] == 'online':
        logger.info("‚úÖ –ÆKassa –ø–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞")
    else:
        logger.warning(f"‚ö†Ô∏è –ÆKassa —Å—Ç–∞—Ç—É—Å: {payment_status['status']}")
        logger.warning("‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂–∏ –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    logger.info("üé≠ –ú–ò–®–£–†–ê API —Å–µ—Ä–≤–µ—Ä —Å –ÆKassa –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤!")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ú–ò–®–£–†–ê API —Å–µ—Ä–≤–µ—Ä–∞...")

# ===========================================================================
# API –†–û–£–¢–´ –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –ë–ê–õ–ê–ù–°–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
# ===========================================================================

@app.get("/api/v1/user/{user_id}/balance", response_model=UserBalanceResponse)
async def get_user_balance(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"üë§ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è user_id={user_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        user = database.get_user(user_id)
        if not user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
            logger.info(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            database.save_user(user_id, None, None, None)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 200 STcoin
            database.update_user_balance(user_id, 200)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        balance = database.get_user_balance(user_id)
        consultations_available = balance // 10  # 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è = 10 STcoin
        
        logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å user_id={user_id}: {balance} STcoin ({consultations_available} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π)")
        
        return UserBalanceResponse(
            status="success",
            user_id=user_id,
            balance=balance,
            consultations_available=consultations_available,
            timestamp=datetime.now().isoformat()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è user_id={user_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")

@app.post("/api/v1/user/init")
async def init_user(request: UserInitRequest):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö)"""
    logger.info(f"üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = database.get_user(request.user_id)
        
        if existing_user:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
            if request.username or request.first_name or request.last_name:
                database.save_user(
                    request.user_id, 
                    request.username, 
                    request.first_name, 
                    request.last_name
                )
                logger.info(f"üìù –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user_id} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        else:
            logger.info(f"üÜï –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user_id}")
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.save_user(
                request.user_id, 
                request.username, 
                request.first_name, 
                request.last_name
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 200 STcoin
            database.update_user_balance(request.user_id, 200)
            logger.info(f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {request.user_id} –Ω–∞—á–∏—Å–ª–µ–Ω —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å 200 STcoin")
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        balance = database.get_user_balance(request.user_id)
        consultations_available = balance // 10
        
        return {
            "status": "success",
            "user_id": request.user_id,
            "balance": balance,
            "consultations_available": consultations_available,
            "is_new_user": not bool(existing_user),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {request.user_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

@app.get("/api/v1/user/{user_id}/history")
async def get_user_history(user_id: int, limit: int = 20):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"üìö –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id={user_id}, limit={limit}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        consultations = database.get_user_consultations(user_id, limit)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        formatted_consultations = []
        for consultation in consultations:
            formatted_consultations.append({
                "id": consultation[0],
                "occasion": consultation[2],
                "preferences": consultation[3],
                "advice": consultation[5],
                "created_at": consultation[6],
                "image_path": consultation[4]
            })
        
        return {
            "status": "success",
            "user_id": user_id,
            "consultations": formatted_consultations,
            "total_count": len(formatted_consultations),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è user_id={user_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏")

@app.post("/api/v1/user/{user_id}/balance/sync")
async def sync_user_balance(user_id: int):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)"""
    logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è user_id={user_id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–∑ –ë–î
        balance = database.get_user_balance(user_id)
        consultations_available = balance // 10
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payments = database.get_connection()
        cursor = payments.cursor()
        cursor.execute(
            "SELECT COUNT(*) FROM payments WHERE user_id = ? AND status = 'completed'",
            (user_id,)
        )
        completed_payments = cursor.fetchone()[0]
        payments.close()
        
        return {
            "status": "success",
            "user_id": user_id,
            "balance": balance,
            "consultations_available": consultations_available,
            "completed_payments": completed_payments,
            "synced_at": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è user_id={user_id}: {e}")
        raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞")

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: {ENVIRONMENT}")
    
    # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
    render_port = os.environ.get('PORT')
    if render_port:
        PORT = int(render_port)
        logger.info(f"üåê Render PORT –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {PORT}")
    else:
        logger.info(f"üè† –õ–æ–∫–∞–ª—å–Ω—ã–π PORT: {PORT}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è uvicorn
    uvicorn.run(
        "api:app",
        host=HOST,
        port=PORT,
        log_level="info" if ENVIRONMENT == "production" else "debug",
        reload=False  # –û—Ç–∫–ª—é—á–∞–µ–º reload –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ
    )