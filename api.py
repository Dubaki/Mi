#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
üé≠ –ú–ò–®–£–†–ê - API –°–µ—Ä–≤–µ—Ä
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –ÆKassa
"""

import os
import json
import logging
import asyncio
from datetime import datetime
from typing import Optional, Dict, Any

from fastapi import FastAPI, HTTPException, Request, Depends
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel

# –ÆKassa
from yookassa import Configuration, Payment
import yookassa

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
import database
import gemini_ai
import payment_service
from pricing_config import PRICING_PLANS, YOOKASSA_PLANS_CONFIG, get_plan_by_id, get_yookassa_config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="–ú–ò–®–£–†–ê API",
    description="API –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ò–ò-—Å—Ç–∏–ª–∏—Å—Ç–∞",
    version="2.5.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ÆKassa
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY')

if YOOKASSA_SHOP_ID and YOOKASSA_SECRET_KEY:
    Configuration.account_id = YOOKASSA_SHOP_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY
    logger.info("–ÆKassa configured successfully")
else:
    logger.warning("–ÆKassa credentials not found")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/webapp", StaticFiles(directory="webapp", html=True), name="webapp")

# ================================
# –ú–û–î–ï–õ–ò –î–ê–ù–ù–´–•
# ================================

class UserSyncRequest(BaseModel):
    user_id: int
    username: Optional[str] = None
    first_name: Optional[str] = None
    last_name: Optional[str] = None

class ConsultationRequest(BaseModel):
    user_id: int
    occasion: str = "general"
    preferences: str = ""
    image_url: Optional[str] = None

class PaymentRequest(BaseModel):
    user_id: int
    plan_id: str
    return_url: Optional[str] = None

class BalanceUpdateRequest(BaseModel):
    user_id: int
    amount: int

# ================================
# –û–°–ù–û–í–ù–´–ï –≠–ù–î–ü–û–ò–ù–¢–´
# ================================

@app.get("/")
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
    return {
        "service": "–ú–ò–®–£–†–ê API",
        "version": "2.5.0",
        "status": "running",
        "features": ["styling_ai", "wardrobe", "payments", "pricing_plans"]
    }

@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        db_status = True  # –ó–∞–≥–ª—É—à–∫–∞, database.check_connection() –ø–æ–∫–∞ –Ω–µ—Ç
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Gemini AI
        ai_status = await gemini_ai.test_gemini_connection()
        
        return {
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "components": {
                "database": "ok" if db_status else "error",
                "gemini_ai": "ok" if ai_status else "error",
                "yookassa": "ok" if YOOKASSA_SHOP_ID else "not_configured"
            }
        }
    except Exception as e:
        logger.error(f"Health check failed: {e}")
        return {
            "status": "unhealthy",
            "error": str(e)
        }

@app.get("/api/v1/health")
async def health_check_v1():
    return await health_check()

# ================================
# –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
# ================================

@app.post("/api/v1/users/sync")
async def sync_user_endpoint(request: Request):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        
        if not user_id:
            raise HTTPException(status_code=400, detail="user_id is required")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = database.get_user(user_id)
        is_new_user = user is None
        
        if is_new_user:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            database.save_user(
                telegram_id=user_id,
                username=data.get("username"),
                first_name=data.get("first_name"),
                last_name=data.get("last_name")
            )
            # –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            database.update_user_balance(user_id, 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        balance = database.get_user_balance(user_id) or 0
        consultations_count = len(database.get_user_consultations(user_id, 1000))  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        
        return {
            "user_id": user_id,
            "balance": balance,
            "is_new_user": is_new_user,
            "consultations_count": consultations_count,
            "status": "success",
            "telegram_synced": True
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error syncing user: {str(e)}")
        raise HTTPException(status_code=500, detail="User sync failed")

@app.get("/api/v1/users/{user_id}/balance")
async def get_user_balance(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        balance = database.get_user_balance(user_id) or 0
        return {
            "user_id": user_id,
            "balance": balance,
            "currency": "STcoin"
        }
    except Exception as e:
        logger.error(f"Error getting balance: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to get balance")

@app.post("/api/v1/users/{user_id}/balance")
async def update_user_balance(user_id: int, request: BalanceUpdateRequest):
    """–û–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)"""
    try:
        database.update_user_balance(user_id, request.amount)
        new_balance = database.get_user_balance(user_id)
        
        return {
            "user_id": user_id,
            "amount_changed": request.amount,
            "new_balance": new_balance,
            "status": "success"
        }
    except Exception as e:
        logger.error(f"Error updating balance: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to update balance")

# ================================
# –¢–ê–†–ò–§–ù–´–ï –ü–õ–ê–ù–´
# ================================

@app.get("/api/v1/pricing/plans")
async def get_pricing_plans():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞—Ä–∏—Ñ–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
    try:
        plans_list = []
        
        for plan_id, plan in PRICING_PLANS.items():
            price_per_consultation = plan["price_rub"] / plan["consultations"]
            
            plans_list.append({
                "id": plan_id,
                "name": plan["name"],
                "description": plan["description"],
                "consultations": plan["consultations"],
                "stcoins": plan["stcoins"],
                "price_rub": plan["price_rub"],
                "price_per_consultation": round(price_per_consultation, 1),
                "discount": plan["discount"],
                "popular": plan["popular"],
                "temporary": plan["temporary"],
                "color": plan["color"]
            })
        
        return {
            "status": "success",
            "plans": plans_list,
            "currency": "RUB",
            "consultation_cost": 10  # STcoin –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        }
        
    except Exception as e:
        logger.error(f"Error getting pricing plans: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to get pricing plans")

# ================================
# –ü–õ–ê–¢–ï–ñ–ò
# ================================

@app.post("/api/v1/payments/create")
async def create_payment_endpoint(request: Request):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Å –Ω–æ–≤—ã–º–∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–º–∏ –ø–ª–∞–Ω–∞–º–∏"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        plan_id = data.get("plan_id")
        return_url = data.get("return_url", "https://t.me/your_bot_name")
        
        if not user_id or not plan_id:
            raise HTTPException(status_code=400, detail="Missing user_id or plan_id")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–ª–∞–Ω–∞
        plan = get_plan_by_id(plan_id)
        if not plan:
            raise HTTPException(status_code=400, detail="Invalid plan_id")
        
        yookassa_config = get_yookassa_config(plan_id)
        if not yookassa_config:
            raise HTTPException(status_code=400, detail="YooKassa config not found")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        payment = Payment.create({
            "amount": yookassa_config["amount"],
            "currency": "RUB",
            "description": yookassa_config["description"],
            "confirmation": {
                "type": "redirect",
                "return_url": return_url
            },
            "capture": True,
            "metadata": {
                "user_id": str(user_id),
                "plan_id": plan_id,
                "stcoins_reward": str(yookassa_config["stcoins_reward"]),
                "consultations_count": str(plan["consultations"])
            }
        })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –±–∞–∑—É
        payment_service.save_payment(
            payment_id=payment.id,
            user_id=user_id,
            amount=float(yookassa_config["amount"]["value"]),
            currency="RUB",
            status="pending",
            plan_id=plan_id,
            stcoins_amount=yookassa_config["stcoins_reward"]
        )
        
        # –î–õ–Ø –¢–ï–°–¢–û–í–û–ì–û –†–ï–ñ–ò–ú–ê: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–ª–∞—Ç–µ–∂
        if YOOKASSA_SECRET_KEY and YOOKASSA_SECRET_KEY.startswith('test_'):
            # –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å—Ä–∞–∑—É –∑–∞—á–∏—Å–ª—è–µ–º STcoin
            database.update_user_balance(user_id, yookassa_config["stcoins_reward"])
            payment_service.update_payment_status(payment.id, 'completed')
            logger.info(f"üß™ TEST MODE: Auto-completed payment {payment.id}, added {yookassa_config['stcoins_reward']} STcoin")
        
        logger.info(f"Created payment {payment.id} for user {user_id}, plan {plan_id} ({plan['name']})")
        
        return {
            "payment_id": payment.id,
            "payment_url": payment.confirmation.confirmation_url,
            "amount": yookassa_config["amount"]["value"],
            "plan": {
                "id": plan_id,
                "name": plan["name"],
                "consultations": plan["consultations"],
                "stcoins": plan["stcoins"],
                "price": plan["price_rub"]
            }
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error creating payment: {str(e)}")
        raise HTTPException(status_code=500, detail="Payment creation failed")

@app.post("/api/v1/payments/webhook")
async def payment_webhook_endpoint(request: Request):
    """Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –ÆKassa —Å –Ω–æ–≤—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏"""
    try:
        raw_body = await request.body()
        webhook_data = json.loads(raw_body.decode('utf-8'))
        
        payment_data = webhook_data.get('object', {})
        payment_id = payment_data.get('id')
        status = payment_data.get('status')
        
        if not payment_id:
            logger.error("No payment_id in webhook")
            return {"status": "error", "message": "No payment_id"}
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂ –∏–∑ –±–∞–∑—ã
        payment_record = payment_service.get_payment(payment_id)
        if not payment_record:
            logger.error(f"Payment {payment_id} not found in database")
            return {"status": "error", "message": "Payment not found"}
        
        user_id = payment_record['user_id']
        plan_id = payment_record.get('plan_id')
        
        if status == 'succeeded':
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
            if payment_record.get('status') == 'completed':
                logger.info(f"Payment {payment_id} already processed")
                return {"status": "ok", "message": "Already processed"}
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–ª–∞–Ω–∞
            if plan_id and plan_id in PRICING_PLANS:
                plan = PRICING_PLANS[plan_id]
                stcoins_to_add = plan["stcoins"]
                plan_name = plan["name"]
            else:
                # Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                stcoins_to_add = payment_record.get('stcoins_amount', 10)
                plan_name = "–ü–∞–∫–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π"
            
            # –ù–∞—á–∏—Å–ª—è–µ–º STcoin
            database.update_user_balance(user_id, stcoins_to_add)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment_service.update_payment_status(payment_id, 'completed')
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            new_balance = database.get_user_balance(user_id)
            
            logger.info(f"Payment {payment_id} processed: +{stcoins_to_add} STcoin for user {user_id} (plan: {plan_name})")
            logger.info(f"User {user_id} new balance: {new_balance} STcoin")
            
            return {
                "status": "success",
                "message": "Payment processed",
                "plan_id": plan_id,
                "plan_name": plan_name,
                "stcoins_added": stcoins_to_add,
                "new_balance": new_balance
            }
            
        elif status == 'canceled':
            payment_service.update_payment_status(payment_id, 'canceled')
            logger.info(f"Payment {payment_id} canceled")
            return {"status": "ok", "message": "Payment canceled"}
        
        else:
            logger.info(f"Payment {payment_id} status: {status}")
            return {"status": "ok", "message": f"Status {status} received"}
            
    except Exception as e:
        logger.error(f"Error processing webhook: {str(e)}")
        raise HTTPException(status_code=500, detail="Webhook processing failed")

@app.get("/api/v1/payments/history")
async def get_payments_history(user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        logger.info(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î
        import database
        conn = database.get_connection()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payments = conn.execute("""
            SELECT 
                payment_id,
                amount,
                stcoins_amount,
                status,
                plan_id,
                created_at,
                updated_at
            FROM payments 
            WHERE user_id = ? 
            ORDER BY created_at DESC
        """, (user_id,)).fetchall()
        
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        payments_list = []
        for payment in payments:
            payments_list.append({
                "payment_id": payment[0],
                "amount": payment[1],
                "stcoins_amount": payment[2],
                "status": payment[3],
                "plan_id": payment[4],
                "created_at": payment[5],
                "updated_at": payment[6]
            })
        
        logger.info(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(payments_list)} –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        return payments_list
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

@app.post("/api/v1/payments/sync_all")
async def sync_all_payments(request: dict):
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ÆKassa"""
    try:
        user_id = request.get('user_id')
        if not user_id:
            raise HTTPException(status_code=400, detail="user_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω")
        
        logger.info(f"üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
        import database
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ pending –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        conn = database.get_connection()
        pending_payments = conn.execute("""
            SELECT payment_id, amount, stcoins_amount, plan_id 
            FROM payments 
            WHERE user_id = ? AND status = 'pending'
            ORDER BY created_at DESC
        """, (user_id,)).fetchall()
        
        if not pending_payments:
            conn.close()
            logger.info(f"üí∞ –ù–µ—Ç pending –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return {
                "success": True,
                "message": "–ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏",
                "synchronized": 0,
                "checked_payments": 0,
                "total_stcoins": 0
            }
        
        synchronized_count = 0
        total_stcoins = 0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π pending –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        for payment in pending_payments:
            payment_id = payment[0]
            stcoins_amount = payment[2]
            
            try:
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ÆKassa
                from yookassa import Payment as YooPayment
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –∏–∑ –ÆKassa
                yoo_payment = YooPayment.find_one(payment_id)
                
                logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: —Å—Ç–∞—Ç—É—Å {yoo_payment.status}")
                
                if yoo_payment.status == 'succeeded':
                    # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                    conn.execute("""
                        UPDATE payments 
                        SET status = 'completed', updated_at = datetime('now') 
                        WHERE payment_id = ?
                    """, (payment_id,))
                    
                    # –ó–∞—á–∏—Å–ª—è–µ–º STcoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    conn.execute("""
                        UPDATE users 
                        SET balance = balance + ?, updated_at = datetime('now')
                        WHERE telegram_id = ?
                    """, (stcoins_amount, user_id))
                    
                    synchronized_count += 1
                    total_stcoins += stcoins_amount
                    
                    logger.info(f"‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id}: +{stcoins_amount} STcoin")
                    
                elif yoo_payment.status == 'waiting_for_capture':
                    # –ü–ª–∞—Ç–µ–∂ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                    try:
                        captured_payment = YooPayment.capture(payment_id)
                        if captured_payment.status == 'succeeded':
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                            conn.execute("""
                                UPDATE payments 
                                SET status = 'completed', updated_at = datetime('now') 
                                WHERE payment_id = ?
                            """, (payment_id,))
                            
                            conn.execute("""
                                UPDATE users 
                                SET balance = balance + ?, updated_at = datetime('now')
                                WHERE telegram_id = ?
                            """, (stcoins_amount, user_id))
                            
                            synchronized_count += 1
                            total_stcoins += stcoins_amount
                            
                            logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–ª–∞—Ç–µ–∂ {payment_id}: +{stcoins_amount} STcoin")
                            
                    except Exception as capture_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {capture_error}")
                        
                else:
                    logger.info(f"‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂ {payment_id} –≤ —Å—Ç–∞—Ç—É—Å–µ {yoo_payment.status}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    
            except Exception as payment_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment_error}")
                
                # –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –ÆKassa, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
                # (–¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ —É–±—Ä–∞—Ç—å!)
                if "test_" in payment_id:  # –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
                    logger.info(f"üß™ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ {payment_id}, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
                    
                    conn.execute("""
                        UPDATE payments 
                        SET status = 'completed', updated_at = datetime('now') 
                        WHERE payment_id = ?
                    """, (payment_id,))
                    
                    conn.execute("""
                        UPDATE users 
                        SET balance = balance + ?, updated_at = datetime('now')
                        WHERE telegram_id = ?
                    """, (stcoins_amount, user_id))
                    
                    synchronized_count += 1
                    total_stcoins += stcoins_amount
                    
                    logger.info(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω: +{stcoins_amount} STcoin")
                
                continue
        
        conn.commit()
        conn.close()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        result = {
            "success": True,
            "message": f"–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {synchronized_count} –ø–ª–∞—Ç–µ–∂–µ–π",
            "synchronized": synchronized_count,
            "total_stcoins": total_stcoins,
            "checked_payments": len(pending_payments)
        }
        
        logger.info(f"üéâ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {str(e)}")

@app.get("/api/v1/payments/status/{payment_id}")
async def get_payment_status(payment_id: str):
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        payment_record = payment_service.get_payment(payment_id)
        if not payment_record:
            raise HTTPException(status_code=404, detail="Payment not found")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–µ
        plan_id = payment_record.get('plan_id')
        plan_info = {}
        if plan_id:
            plan = get_plan_by_id(plan_id)
            if plan:
                plan_info = {
                    "id": plan_id,
                    "name": plan["name"],
                    "consultations": plan["consultations"],
                    "stcoins": plan["stcoins"]
                }
        
        return {
            "payment_id": payment_id,
            "status": payment_record.get('status', 'unknown'),
            "amount": payment_record.get('amount'),
            "currency": payment_record.get('currency', 'RUB'),
            "user_id": payment_record.get('user_id'),
            "plan": plan_info,
            "created_at": payment_record.get('created_at')
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting payment status: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to get payment status")

@app.get("/api/v1/users/{user_id}/payments")
async def get_user_payments(user_id: int, limit: int = 10):
    """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        payments = payment_service.get_user_payments(user_id, limit)
        
        # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–º–∏ –æ –ø–ª–∞–Ω–∞—Ö
        enriched_payments = []
        for payment in payments:
            plan_id = payment.get('plan_id')
            plan_info = {}
            
            if plan_id and plan_id in PRICING_PLANS:
                plan = PRICING_PLANS[plan_id]
                plan_info = {
                    "name": plan["name"],
                    "consultations": plan["consultations"]
                }
            
            enriched_payments.append({
                "payment_id": payment.get('payment_id'),
                "amount": payment.get('amount'),
                "currency": payment.get('currency', 'RUB'),
                "status": payment.get('status'),
                "plan_id": plan_id,
                "plan_name": plan_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–ª–∞–Ω'),
                "stcoins_reward": payment.get('stcoins_amount', 0),
                "created_at": payment.get('created_at'),
                "updated_at": payment.get('updated_at')
            })
        
        return {
            "user_id": user_id,
            "payments": enriched_payments,
            "total": len(enriched_payments)
        }
        
    except Exception as e:
        logger.error(f"Error getting user payments: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to get payments")

# ================================
# –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò
# ================================

@app.post("/api/v1/consultations/analyze")
async def analyze_image_endpoint(request: Request):
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gemini AI"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        occasion = data.get("occasion", "general")
        preferences = data.get("preferences", "")
        image_data = data.get("image_data")  # base64
        
        if not user_id or not image_data:
            raise HTTPException(status_code=400, detail="Missing required fields")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = database.get_user_balance(user_id) or 0
        if balance < 10:
            raise HTTPException(status_code=402, detail="Insufficient balance")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        import base64
        image_bytes = base64.b64decode(image_data)
        
        advice = await gemini_ai.analyze_clothing_image(
            image_data=image_bytes,
            occasion=occasion,
            preferences=preferences
        )
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º STcoin
        database.update_user_balance(user_id, -10)
        new_balance = database.get_user_balance(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation_id = database.save_consultation(
            user_id=user_id,
            occasion=occasion,
            preferences=preferences,
            image_path="webapp_upload",
            advice=advice
        )
        
        return {
            "consultation_id": consultation_id,
            "advice": advice,
            "cost": 10,
            "new_balance": new_balance,
            "status": "success"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error analyzing image: {str(e)}")
        raise HTTPException(status_code=500, detail="Analysis failed")

@app.post("/api/v1/consultations/compare")
async def compare_images_endpoint(request: Request):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini AI"""
    try:
        data = await request.json()
        user_id = data.get("user_id")
        occasion = data.get("occasion", "general")
        preferences = data.get("preferences", "")
        images_data = data.get("images_data")  # list of base64 strings
        
        if not user_id or not images_data:
            raise HTTPException(status_code=400, detail="Missing required fields")
        
        if not isinstance(images_data, list) or len(images_data) < 2:
            raise HTTPException(status_code=400, detail="At least 2 images required for comparison")
        
        if len(images_data) > 4:
            raise HTTPException(status_code=400, detail="Maximum 4 images allowed")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = database.get_user_balance(user_id) or 0
        if balance < 10:
            raise HTTPException(status_code=402, detail="Insufficient balance")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º base64 –≤ bytes
        import base64
        image_bytes_list = []
        for image_data in images_data:
            try:
                image_bytes = base64.b64decode(image_data)
                image_bytes_list.append(image_bytes)
            except Exception as e:
                raise HTTPException(status_code=400, detail=f"Invalid image data: {str(e)}")
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Gemini AI
        advice = await gemini_ai.compare_clothing_images(
            image_data_list=image_bytes_list,
            occasion=occasion,
            preferences=preferences
        )
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º STcoin
        database.update_user_balance(user_id, -10)
        new_balance = database.get_user_balance(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation_id = database.save_consultation(
            user_id=user_id,
            occasion=occasion,
            preferences=preferences,
            image_path="webapp_compare_upload",
            advice=advice
        )
        
        return {
            "consultation_id": consultation_id,
            "advice": advice,
            "images_count": len(images_data),
            "cost": 10,
            "new_balance": new_balance,
            "status": "success"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error comparing images: {str(e)}")
        raise HTTPException(status_code=500, detail="Comparison failed")

@app.get("/api/v1/consultations/{user_id}")
async def get_user_consultations(user_id: int, limit: int = 10):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        consultations = database.get_user_consultations(user_id, limit)
        return {
            "user_id": user_id,
            "consultations": consultations,
            "total": len(consultations)
        }
    except Exception as e:
        logger.error(f"Error getting consultations: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to get consultations")

@app.get("/api/v1/consultations/{user_id}/{consultation_id}")
async def get_consultation(user_id: int, consultation_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"""
    try:
        consultation = database.get_consultation(consultation_id, user_id)
        if not consultation:
            raise HTTPException(status_code=404, detail="Consultation not found")
        
        return consultation
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error getting consultation: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to get consultation")

# ================================
# –ì–ê–†–î–ï–†–û–ë
# ================================

@app.get("/api/v1/wardrobe/{user_id}")
async def get_user_wardrobe(user_id: int, limit: int = 20):
    """–ü–æ–ª—É—á–∏—Ç—å –≥–∞—Ä–¥–µ—Ä–æ–± –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        wardrobe = database.get_user_wardrobe(user_id, limit)
        return {
            "user_id": user_id,
            "wardrobe": wardrobe,
            "total": len(wardrobe)
        }
    except Exception as e:
        logger.error(f"Error getting wardrobe: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to get wardrobe")

@app.post("/api/v1/wardrobe/{user_id}/add")
async def add_wardrobe_item(user_id: int, request: Request):
    """–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –≤ –≥–∞—Ä–¥–µ—Ä–æ–±"""
    try:
        data = await request.json()
        file_id = data.get("file_id")
        item_name = data.get("item_name", "–ü—Ä–µ–¥–º–µ—Ç –æ–¥–µ–∂–¥—ã")
        item_tag = data.get("item_tag", "–Ω–æ–≤—ã–π")
        
        if not file_id:
            raise HTTPException(status_code=400, detail="file_id is required")
        
        wardrobe_id = database.save_wardrobe_item(
            user_id=user_id,
            telegram_file_id=file_id,
            item_name=item_name,
            item_tag=item_tag
        )
        
        return {
            "wardrobe_id": wardrobe_id,
            "item_name": item_name,
            "item_tag": item_tag,
            "status": "success"
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error adding wardrobe item: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to add item")

# ================================
# –ê–î–ú–ò–ù–ö–ê
# ================================

@app.get("/api/v1/admin/stats")
async def get_admin_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
    try:
        stats = database.get_stats()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
        pricing_stats = []
        for plan_id, plan in PRICING_PLANS.items():
            pricing_stats.append({
                "plan_id": plan_id,
                "name": plan["name"],
                "price": plan["price_rub"],
                "consultations": plan["consultations"],
                "popular": plan["popular"],
                "temporary": plan["temporary"],
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂
                "sales_count": 0,
                "revenue": 0
            })
        
        return {
            "system_stats": stats,
            "pricing_stats": pricing_stats,
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        logger.error(f"Error getting admin stats: {str(e)}")
        raise HTTPException(status_code=500, detail="Failed to get stats")

# ================================
# –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê
# ================================

if __name__ == "__main__":
    import uvicorn
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    database.init_db()

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.getenv("PORT", 8000))
    
    logger.info(f"üé≠ –ú–ò–®–£–†–ê API Server starting on port {port}")
    
    uvicorn.run(
        "api:app",
        host="0.0.0.0",
        port=port,
        reload=False,
        log_level="info"
    )