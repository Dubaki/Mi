#!/usr/bin/env python3
"""
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: Production API —Å–µ—Ä–≤–µ—Ä (api.py)
–í–ï–†–°–ò–Ø: 1.2.0
–î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø: 2025-06-05

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï:
FastAPI —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Gemini AI
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç REST API –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ú–ò–®–£–†–´

–≠–ù–î–ü–û–ò–ù–¢–´:
- GET /api/v1/health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
- POST /api/v1/analyze - –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- POST /api/v1/compare - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
- GET /api/v1/status - —Å—Ç–∞—Ç—É—Å Gemini AI
==========================================================================================
"""

import os
import sys
import asyncio
from datetime import datetime
from pathlib import Path
import logging
import base64
import json
from typing import Optional, List, Dict, Any
import uvicorn
from fastapi import FastAPI, HTTPException, UploadFile, File, Form, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse, FileResponse
from pydantic import BaseModel
import google.generativeai as genai
from PIL import Image
import io
from fastapi.staticfiles import StaticFiles

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ database.py
sys.path.append(str(Path(__file__).parent))

try:
    import database
except ImportError:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å database.py")
    print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª database.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - %(name)s - %(message)s',
    handlers=[
        logging.FileHandler('api_server.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("MishuraAPI")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from dotenv import load_dotenv
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')
GEMINI_MODEL = os.getenv('GEMINI_MODEL', 'gemini-1.5-flash')
ENVIRONMENT = os.getenv('ENVIRONMENT', 'development')
DEBUG = os.getenv('DEBUG', 'False').lower() == 'true'
HOST = os.getenv('HOST', '0.0.0.0')
PORT = int(os.getenv('BACKEND_PORT', 8000))

# –°–æ–∑–¥–∞–Ω–∏–µ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = FastAPI(
    title="–ú–ò–®–£–†–ê –ò–ò-–°—Ç–∏–ª–∏—Å—Ç API",
    description="API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç–∏–ª—è –æ–¥–µ–∂–¥—ã —Å –ø–æ–º–æ—â—å—é Google Gemini AI",
    version="1.2.0",
    docs_url="/api/v1/docs" if DEBUG else None,
    redoc_url="/api/v1/redoc" if DEBUG else None
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
if ENVIRONMENT == 'production':
    origins = [
        "https://style-ai-bot.onrender.com",
        "http://localhost:8000",
        "http://127.0.0.1:8000"
    ]
else:
    origins = [
        "http://localhost:3000",
        "http://localhost:8000",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:8000"
    ]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE"],
    allow_headers=["*"],
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini AI
gemini_configured = False
gemini_model = None

def init_gemini():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini AI"""
    global gemini_configured, gemini_model
    
    try:
        if not GEMINI_API_KEY:
            logger.error("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            return False
        
        genai.configure(api_key=GEMINI_API_KEY)
        gemini_model = genai.GenerativeModel(GEMINI_MODEL)
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_response = gemini_model.generate_content("Test connection")
        
        gemini_configured = True
        logger.info(f"‚úÖ Gemini AI –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ (–º–æ–¥–µ–ª—å: {GEMINI_MODEL})")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Gemini AI: {e}")
        gemini_configured = False
        return False

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class AnalyzeRequest(BaseModel):
    occasion: str = "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π"
    preferences: Optional[str] = None
    user_id: Optional[int] = None

class CompareRequest(BaseModel):
    occasion: str = "–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π"
    preferences: Optional[str] = None
    user_id: Optional[int] = None

class HealthResponse(BaseModel):
    status: str
    service: str
    version: str
    gemini_configured: bool
    gemini_working: bool
    environment: str
    timestamp: str

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
def process_image(image_data: bytes) -> Image.Image:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        image = Image.open(io.BytesIO(image_data))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ
        max_size = 1024
        if max(image.size) > max_size:
            image.thumbnail((max_size, max_size), Image.Resampling.LANCZOS)
        
        return image
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=400, detail="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

async def analyze_with_gemini(image: Image.Image, occasion: str, preferences: str = None) -> str:
    """–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Gemini AI"""
    try:
        if not gemini_configured:
            raise HTTPException(status_code=503, detail="Gemini AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ù–û–í–´–ô –ü–†–û–ú–ü–¢ –¥–ª—è Instagram-–±–ª–æ–≥–µ—Ä–∞
        prompt = f"""
–¢—ã ‚Äî –º–æ–¥–Ω—ã–π Instagram-–±–ª–æ–≥–µ—Ä —Å 1 –º–ª–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –†–æ—Å—Å–∏–∏. –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –æ–±–æ–∂–∞—é—Ç —Ç–µ–±—è –∑–∞ –ª—ë–≥–∫–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–æ —Å—Ç–∏–ª—è –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–≤–µ—Ç—ã. –¢—ã –≤—Å–µ–≥–¥–∞ –¥–∞–µ—à—å –ø–æ–Ω—è—Ç–Ω—ã–µ, —Å—Ç–∏–ª—å–Ω—ã–µ –∏ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π –≤—ã—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö, –Ω–µ –±–æ–π—Å—è –ª–∞–π—Ñ—Ö–∞–∫–æ–≤ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö –º–µ—Ç–∞—Ñ–æ—Ä. –ë—É–¥—å –∫–∞–∫ –ø–æ–¥—Ä—É–∂–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—Å–µ–≥–¥–∞ —Å–∫–∞–∂–µ—Ç —á–µ—Å—Ç–Ω–æ ‚Äî –Ω–æ —Å –ª—é–±–æ–≤—å—é.

–ü–û–í–û–î: {occasion}
{'–ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø: ' + preferences if preferences else ''}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–±—Ä–∞–∑ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –Ω–æ –µ–º–∫–∏–µ —Å–æ–≤–µ—Ç—ã:

1. **–û–±—â–µ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ** (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
2. **–ß—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç** –≤ –æ–±—Ä–∞–∑–µ 
3. **–ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å** (–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Å–æ–≤–µ—Ç—ã)
4. **–ü—Ä–∏—á–µ—Å–∫–∞ –∏ –º–∞–∫–∏—è–∂** (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ)
5. **–†–µ–π—Ç–∏–Ω–≥: X/10** –∏ –ø–æ—á–µ–º—É

–ü–∏—à–∏ –∂–∏–≤–æ, —Å —ç–º–æ–¥–∑–∏, –∫–∞–∫ –≤ –ò–Ω—Å—Ç–∞–≥—Ä–∞–º–µ. –ù–∞—á–Ω–∏ —Å —ç–º–æ–¥–∑–∏ –∏ "–ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–æ—Ç–∫–∞!"

–ü—Ä–∏–º–µ—Ä —Å—Ç–∏–ª—è: "–û–±–æ–∂–∞—é total beige, –Ω–æ –∑–¥–µ—Å—å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞. –î–æ–±–∞–≤—å —è—Ä–∫–∏–π –±–∞–≥–µ—Ç –∏–ª–∏ –∫—Ä–∞—Å–Ω—É—é –ø–æ–º–∞–¥—É ‚Äî –∏ –æ–±—Ä–∞–∑ –∑–∞–∏–≥—Ä–∞–µ—Ç ‚ú®"

–ë—É–¥—å –∫—Ä–∞—Ç–∫–æ–π, –Ω–æ —Ç–æ—á–Ω–æ–π!
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
        response = await asyncio.to_thread(
            gemini_model.generate_content, 
            [prompt, image]
        )
        
        if not response.text:
            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ Gemini AI –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return response.text
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ Gemini: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤–æ–º —Å—Ç–∏–ª–µ
        return f"""
üí´ –ü—Ä–∏–≤–µ—Ç, –∫—Ä–∞—Å–æ—Ç–∫–∞!

## ‚ö†Ô∏è –û–π, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π!

–ü—Ä–æ—Å—Ç–∏, —Å–µ–π—á–∞—Å –Ω–µ–º–Ω–æ–≥–æ –≥–ª—é—á–∏—Ç, –Ω–æ —Å–∫–æ—Ä–æ –≤—Å–µ –∏—Å–ø—Ä–∞–≤–∏–º!

**–ü–æ–≤–æ–¥:** {occasion}

**–ë—ã—Å—Ç—Ä—ã–µ —Å–æ–≤–µ—Ç—ã –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:**
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å –ø–æ—Å–∞–¥–∫—É ‚Äî –≤—Å–µ –¥–æ–ª–∂–Ω–æ —Å–∏–¥–µ—Ç—å –∏–¥–µ–∞–ª—å–Ω–æ!
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3 —Ü–≤–µ—Ç–∞ –≤ –æ–±—Ä–∞–∑–µ, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –¥–µ—Ç–∞–ª–∏
‚Ä¢ –û–¥–∏–Ω —è—Ä–∫–∏–π –∞–∫—Ü–µ–Ω—Ç –∏ —Ç—ã –∑–≤–µ–∑–¥–∞ ‚≠ê
‚Ä¢ –ù–µ –∑–∞–±—ã–≤–∞–π –ø—Ä–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã ‚Äî –æ–Ω–∏ –¥–µ–ª–∞—é—Ç –æ–±—Ä–∞–∑

**–†–µ–π—Ç–∏–Ω–≥:** –£–≤–∏–¥–∏–º—Å—è —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É! üíï

*–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —è —É–∂–µ —Å–∫—É—á–∞—é! ü•∞*
"""

async def compare_with_gemini(images: List[Image.Image], occasion: str, preferences: str = None) -> str:
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—Ä–∞–∑–æ–≤ —Å –ø–æ–º–æ—â—å—é Gemini AI"""
    try:
        if not gemini_configured:
            raise HTTPException(status_code=503, detail="Gemini AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ù–û–í–´–ô –ü–†–û–ú–ü–¢ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Å—Ç–∏–ª–µ Instagram-–±–ª–æ–≥–µ—Ä–∞
        prompt = f"""
–¢—ã ‚Äî –º–æ–¥–Ω—ã–π Instagram-–±–ª–æ–≥–µ—Ä —Å 1 –º–ª–Ω –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–∑ –†–æ—Å—Å–∏–∏. –¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏ –æ–±–æ–∂–∞—é—Ç —Ç–µ–±—è –∑–∞ –ª—ë–≥–∫–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–æ —Å—Ç–∏–ª—è –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —Å–æ–≤–µ—Ç—ã.

–°—Ä–∞–≤–Ω–∏ —ç—Ç–∏ {len(images)} –æ–±—Ä–∞–∑–∞ –¥–ª—è: {occasion}
{'–£—á—Ç–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ' + preferences if preferences else ''}

–î–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–∑–∞ –¥–∞–π:
1. **–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ** (1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ)
2. **–†–µ–π—Ç–∏–Ω–≥ X/10** 
3. **–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —Ç–∞–∫–∞—è –æ—Ü–µ–Ω–∫–∞**
4. **–ü—Ä–∏—á–µ—Å–∫–∞/–º–∞–∫–∏—è–∂** (–µ—Å–ª–∏ –≤–∏–¥–Ω–æ)

–ü–æ—Ç–æ–º **–ò–¢–û–ì–û–í–´–ô –í–ï–†–î–ò–ö–¢**: –∫–∞–∫–æ–π –æ–±—Ä–∞–∑ –ª—É—á—à–µ –∏ –ø–æ—á–µ–º—É.

–ü–∏—à–∏ –∂–∏–≤–æ, —Å —ç–º–æ–¥–∑–∏, –∫–∞–∫ –ø–æ–¥—Ä—É–∂–∫–∞! –ù–∞—á–Ω–∏ —Å "–û–≥–æ, –∫–∞–∫–∞—è –¥–∏–ª–µ–º–º–∞! üòç"

–ë—É–¥—å –∫—Ä–∞—Ç–∫–æ–π, –Ω–æ —á–µ—Å—Ç–Ω–æ–π!
"""
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        content = [prompt] + images
        
        response = await asyncio.to_thread(
            gemini_model.generate_content,
            content
        )
        
        if not response.text:
            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini")
        
        logger.info(f"‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ {len(images)} –æ–±—Ä–∞–∑–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return response.text
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è Gemini: {e}")
        return f"""
üòç –û–≥–æ, –∫–∞–∫–∞—è –¥–∏–ª–µ–º–º–∞!

## ‚ö†Ô∏è –£–ø—Å, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏!

–•–æ—á–µ—Ç—Å—è —Å—Ä–∞–≤–Ω–∏—Ç—å –≤—Å–µ —Ç–≤–æ–∏ –æ–±—Ä–∞–∑—ã, –Ω–æ —á—Ç–æ-—Ç–æ –≥–ª—é—á–∏—Ç!

**–ü–æ–≤–æ–¥:** {occasion}

**–ú–æ–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –≤—ã–±–æ—Ä–∞:**
üéØ –ü–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –¥—Ä–µ—Å—Å-–∫–æ–¥—É —Å–æ–±—ã—Ç–∏—è?
üí´ –ß—É–≤—Å—Ç–≤—É–µ—à—å –ª–∏ —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ?
‚ú® –í—Å–µ –ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≥–∞—Ä–º–æ–Ω–∏–∏?
üíï –ù—Ä–∞–≤–∏—Ç—Å—è –ª–∏ —Ç–µ–±–µ —Å–∞–º–æ–π?

**–°–æ–≤–µ—Ç:** –í—ã–±–∏—Ä–∞–π —Ç–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –Ω–∞ 100! 

*–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, —Ä–µ—à–∏–º —ç—Ç—É –¥–∏–ª–µ–º–º—É –≤–º–µ—Å—Ç–µ! üí™*
"""

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è  
app.mount("/webapp", StaticFiles(directory="webapp"), name="webapp")

# 2. –í–°–ï API —Ä–æ—É—Ç—ã
@app.get("/api/v1/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å Gemini
    gemini_working = False
    if gemini_configured:
        try:
            test_response = await asyncio.to_thread(
                gemini_model.generate_content, 
                "Test"
            )
            gemini_working = bool(test_response.text)
        except:
            gemini_working = False
    
    return HealthResponse(
        status="healthy",
        service="–ú–ò–®–£–†–ê –ò–ò-–°—Ç–∏–ª–∏—Å—Ç API",
        version="1.2.0",
        gemini_configured=gemini_configured,
        gemini_working=gemini_working,
        environment=ENVIRONMENT,
        timestamp=datetime.now().isoformat()
    )

@app.post("/api/v1/analyze")
async def analyze_clothing(
    request: Request,
    file: UploadFile = File(...),
    occasion: str = Form("–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π"),
    preferences: Optional[str] = Form(None),
    user_id: Optional[int] = Form(None)
):
    """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–¥–µ–∂–¥—ã"""
    
    logger.info(f"üì§ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑: {file.filename}, –ø–æ–≤–æ–¥: {occasion}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
        if not file.content_type.startswith('image/'):
            raise HTTPException(status_code=400, detail="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        
        # –ß–∏—Ç–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_data = await file.read()
        image = process_image(image_data)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é Gemini
        advice = await analyze_with_gemini(image, occasion, preferences)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        consultation_id = None
        if user_id:
            try:
                consultation_id = database.save_consultation(
                    user_id=user_id,
                    occasion=occasion,
                    preferences=preferences,
                    image_path=file.filename,
                    advice=advice
                )
                
                # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
                database.update_user_balance(user_id, -1)
                logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ 1")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        
        response_data = {
            "status": "success",
            "advice": advice,
            "metadata": {
                "consultation_id": consultation_id,
                "occasion": occasion,
                "preferences": preferences,
                "timestamp": datetime.now().isoformat(),
                "model": GEMINI_MODEL,
                "environment": ENVIRONMENT
            }
        }
        
        logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ (ID: {consultation_id})")
        return JSONResponse(content=response_data)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

@app.post("/api/v1/compare")
async def compare_clothing(
    request: Request,
    files: List[UploadFile] = File(...),
    occasion: str = Form("–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π"),
    preferences: Optional[str] = Form(None),
    user_id: Optional[int] = Form(None)
):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ–±—Ä–∞–∑–æ–≤"""
    
    logger.info(f"üì§ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {len(files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–≤–æ–¥: {occasion}")
    
    try:
        if len(files) < 2:
            raise HTTPException(status_code=400, detail="–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        if len(files) > 4:
            raise HTTPException(status_code=400, detail="–ú–∞–∫—Å–∏–º—É–º 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = []
        for file in files:
            if not file.content_type.startswith('image/'):
                raise HTTPException(status_code=400, detail=f"–§–∞–π–ª {file.filename} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
            
            image_data = await file.read()
            image = process_image(image_data)
            images.append(image)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –ø–æ–º–æ—â—å—é Gemini
        advice = await compare_with_gemini(images, occasion, preferences)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        consultation_id = None
        if user_id:
            try:
                filenames = ", ".join([f.filename for f in files])
                consultation_id = database.save_consultation(
                    user_id=user_id,
                    occasion=occasion,
                    preferences=preferences,
                    image_path=filenames,
                    advice=advice
                )
                
                # –°–ø–∏—Å—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏—Ç –±–æ–ª—å—à–µ)
                cost = len(files)  # 1 –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞ –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                database.update_user_balance(user_id, -cost)
                logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–º–µ–Ω—å—à–µ–Ω –Ω–∞ {cost}")
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
        
        response_data = {
            "status": "success",
            "advice": advice,
            "metadata": {
                "consultation_id": consultation_id,
                "occasion": occasion,
                "preferences": preferences,
                "images_count": len(files),
                "timestamp": datetime.now().isoformat(),
                "model": GEMINI_MODEL,
                "environment": ENVIRONMENT
            }
        }
        
        logger.info(f"‚úÖ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ (ID: {consultation_id})")
        return JSONResponse(content=response_data)
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: {str(e)}")

@app.get("/api/v1/status")
async def get_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ Gemini AI"""
    return {
        "api_status": "online",
        "gemini_status": "connected" if gemini_configured else "disconnected",
        "environment": ENVIRONMENT,
        "model": GEMINI_MODEL if gemini_configured else None,
        "timestamp": datetime.now().isoformat()
    }

# 3. –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.get("/")
async def read_root():
    return FileResponse('webapp/index.html')

# 4. Catch-all (–ü–û–°–õ–ï–î–ù–ò–ú!)
@app.get("/{full_path:path}")
async def catch_all(full_path: str):
    file_path = Path("webapp") / full_path
    if file_path.exists() and file_path.is_file():
        return FileResponse(file_path)
    return FileResponse('webapp/index.html')

# –°–æ–±—ã—Ç–∏—è –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ú–ò–®–£–†–ê API —Å–µ—Ä–≤–µ—Ä–∞...")
    logger.info(f"üìã –°—Ä–µ–¥–∞: {ENVIRONMENT}")
    logger.info(f"üåê –•–æ—Å—Ç: {HOST}:{PORT}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    try:
        if database.init_db():
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini AI
    if init_gemini():
        logger.info("‚úÖ Gemini AI –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    else:
        logger.warning("‚ö†Ô∏è Gemini AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –≤ —Ä–µ–∂–∏–º–µ fallback")
    
    logger.info("üé≠ –ú–ò–®–£–†–ê API —Å–µ—Ä–≤–µ—Ä –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤!")

@app.on_event("shutdown")
async def shutdown_event():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ú–ò–®–£–†–ê API —Å–µ—Ä–≤–µ—Ä–∞...")

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == "__main__":
    logger.info(f"üéØ –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ: {ENVIRONMENT}")
    
    # Render –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é PORT
    render_port = os.environ.get('PORT')
    if render_port:
        PORT = int(render_port)
        logger.info(f"üåê Render PORT –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {PORT}")
    else:
        logger.info(f"üè† –õ–æ–∫–∞–ª—å–Ω—ã–π PORT: {PORT}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è uvicorn
    uvicorn.run(
        "api:app",
        host=HOST,
        port=PORT,
        log_level="info" if ENVIRONMENT == "production" else "debug",
        reload=False  # –û—Ç–∫–ª—é—á–∞–µ–º reload –≤ –ø—Ä–æ–¥–∞–∫—à–Ω–µ
    )