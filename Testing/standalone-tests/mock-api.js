// üé≠ MOCK API –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–ò–®–£–†–´
// mock-api.js - –ü–æ–ª–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è API –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
// –í–µ—Ä—Å–∏—è: 1.0.0

console.log('üé≠ Mock API –¥–ª—è –ú–ò–®–£–†–´ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...');

/**
 * –ö–ª–∞—Å—Å Mock API Service
 * –ò–º–∏—Ç–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
class MockMishuraAPIService {
    constructor() {
        this.baseURL = '/api/v1';
        this.timeout = 90000; // 90 —Å–µ–∫—É–Ω–¥ –∫–∞–∫ –≤ –ø–∞—Ç—á–∞—Ö V2
        this.retryCount = 3;
        this.retryDelay = 1000;
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.stats = {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            averageResponseTime: 0,
            lastRequestTime: null
        };
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.settings = {
            simulateDelay: true,
            minDelay: 1000,
            maxDelay: 3000,
            failureRate: 0, // 0 = –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞–µ—Ç, 0.1 = 10% —à–∞–Ω—Å –æ—à–∏–±–∫–∏
            customResponses: new Map()
        };
        
        this.log('‚úÖ Mock API —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    }

    log(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const prefix = {
            'info': '‚ÑπÔ∏è',
            'success': '‚úÖ',
            'error': '‚ùå',
            'warning': '‚ö†Ô∏è'
        }[type] || '‚ÑπÔ∏è';
        
        console.log(`[${timestamp}] [MOCK-API] ${prefix} ${message}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ—Å—Ç–æ–≤—ã–π –ª–æ–≥ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (typeof window.testLog === 'function') {
            window.testLog(`Mock API: ${message}`, type);
        }
    }

    /**
     * –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏
     */
    async simulateNetworkDelay() {
        if (!this.settings.simulateDelay) return;
        
        const delay = Math.random() * (this.settings.maxDelay - this.settings.minDelay) + this.settings.minDelay;
        this.log(`–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–µ—Ç–∏: ${Math.round(delay)}–º—Å`);
        
        return new Promise(resolve => setTimeout(resolve, delay));
    }

    /**
     * –°–∏–º—É–ª—è—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—à–∏–±–æ–∫
     */
    shouldSimulateFailure() {
        return Math.random() < this.settings.failureRate;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStats(success, responseTime) {
        this.stats.totalRequests++;
        this.stats.lastRequestTime = Date.now();
        
        if (success) {
            this.stats.successfulRequests++;
        } else {
            this.stats.failedRequests++;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
        this.stats.averageResponseTime = (
            (this.stats.averageResponseTime * (this.stats.totalRequests - 1) + responseTime) / 
            this.stats.totalRequests
        );
    }

    /**
     * –ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Mock)
     */
    async analyzeSingle(imageFile, occasion, preferences = '') {
        const startTime = Date.now();
        this.log(`üì§ analyzeSingle –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–≤–æ–¥–∞: "${occasion}"`);
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!imageFile) {
                throw new Error('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ');
            }
            
            if (!occasion || occasion.trim() === '') {
                throw new Error('–ü–æ–≤–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω');
            }
            
            // –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
            await this.simulateNetworkDelay();
            
            // –°–∏–º—É–ª—è—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if (this.shouldSimulateFailure()) {
                throw new Error('–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            const customKey = `single_${occasion}`;
            if (this.settings.customResponses.has(customKey)) {
                const customResponse = this.settings.customResponses.get(customKey);
                this.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è "${occasion}"`, 'info');
                return customResponse;
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock –æ—Ç–≤–µ—Ç
            const response = this.generateSingleAnalysisResponse(occasion, preferences, imageFile);
            
            const responseTime = Date.now() - startTime;
            this.updateStats(true, responseTime);
            this.log(`‚úÖ analyzeSingle –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${responseTime}–º—Å`, 'success');
            
            return response;
            
        } catch (error) {
            const responseTime = Date.now() - startTime;
            this.updateStats(false, responseTime);
            this.log(`‚ùå analyzeSingle –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
            throw error;
        }
    }

    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (Mock)
     */
    async analyzeCompare(imageFiles, occasion, preferences = '') {
        const startTime = Date.now();
        this.log(`üì§ analyzeCompare –≤—ã–∑–≤–∞–Ω (${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π) –¥–ª—è –ø–æ–≤–æ–¥–∞: "${occasion}"`);
        
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!Array.isArray(imageFiles) || imageFiles.length < 2) {
                throw new Error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            }
            
            if (imageFiles.length > 4) {
                throw new Error('–ú–∞–∫—Å–∏–º—É–º 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            }
            
            if (!occasion || occasion.trim() === '') {
                throw new Error('–ü–æ–≤–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω');
            }
            
            // –°–∏–º—É–ª—è—Ü–∏—è –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            this.settings.minDelay = 2000;
            this.settings.maxDelay = 5000;
            await this.simulateNetworkDelay();
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            this.settings.minDelay = 1000;
            this.settings.maxDelay = 3000;
            
            // –°–∏–º—É–ª—è—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—à–∏–±–æ–∫
            if (this.shouldSimulateFailure()) {
                throw new Error('–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ API —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
            const customKey = `compare_${occasion}_${imageFiles.length}`;
            if (this.settings.customResponses.has(customKey)) {
                const customResponse = this.settings.customResponses.get(customKey);
                this.log(`üìã –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è "${occasion}"`, 'info');
                return customResponse;
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º mock –æ—Ç–≤–µ—Ç
            const response = this.generateCompareAnalysisResponse(occasion, preferences, imageFiles);
            
            const responseTime = Date.now() - startTime;
            this.updateStats(true, responseTime);
            this.log(`‚úÖ analyzeCompare –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${responseTime}–º—Å`, 'success');
            
            return response;
            
        } catch (error) {
            const responseTime = Date.now() - startTime;
            this.updateStats(false, responseTime);
            this.log(`‚ùå analyzeCompare –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
            throw error;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    generateSingleAnalysisResponse(occasion, preferences, imageFile) {
        const occasionAnalysis = this.getOccasionAnalysis(occasion);
        const fileName = imageFile.name || 'image.jpg';
        const fileSize = imageFile.size || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        
        const advice = `
# üé® –ê–Ω–∞–ª–∏–∑ –æ–±—Ä–∞–∑–∞ –æ—Ç –ú–ò–®–£–†–´

**–ü–æ–≤–æ–¥**: ${occasion}
**–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è**: ${preferences || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}

## –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
${occasionAnalysis.generalFeedback}

## üåà –¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞
${occasionAnalysis.colorAdvice}

## üëó –°—Ç–∏–ª—å –∏ —Å–∏–ª—É—ç—Ç
${occasionAnalysis.styleAdvice}

## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
${occasionAnalysis.recommendations.map(rec => `- ${rec}`).join('\n')}

## üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
${occasionAnalysis.additionalTips}

## ‚≠ê –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: ${occasionAnalysis.rating}/10

üí° **–°–æ–≤–µ—Ç –æ—Ç –ú–ò–®–£–†–´**: ${occasionAnalysis.proTip} (–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú)

---
*–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${fileName} (${fileSize} –±–∞–π—Ç)*
*–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${new Date().toLocaleString()}*
        `.trim();

        return {
            status: 'success',
            advice: advice,
            metadata: {
                timestamp: new Date().toISOString(),
                testMode: true,
                apiVersion: 'mock-v1.0.0',
                occasion: occasion,
                preferences: preferences,
                fileInfo: {
                    name: fileName,
                    size: fileSize,
                    type: imageFile.type || 'unknown'
                },
                processingTime: `${Math.random() * 3 + 1}s`,
                rating: occasionAnalysis.rating
            }
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
     */
    generateCompareAnalysisResponse(occasion, preferences, imageFiles) {
        const occasionAnalysis = this.getOccasionAnalysis(occasion);
        const imageCount = imageFiles.length;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—Ä–∞–∑–∞
        const ratings = Array.from({length: imageCount}, () => Math.floor(Math.random() * 3) + 7); // 7-10
        const sortedIndices = ratings
            .map((rating, index) => ({rating, index}))
            .sort((a, b) => b.rating - a.rating)
            .map(item => item.index);
        
        const colors = ['–°–∏–Ω–∏–π', '–ö—Ä–∞—Å–Ω—ã–π', '–ë–µ–ª—ã–π', '–ß–µ—Ä–Ω—ã–π', '–ó–µ–ª–µ–Ω—ã–π', '–°–µ—Ä—ã–π'];
        
        let comparisonDetails = '';
        sortedIndices.forEach((imageIndex, position) => {
            const medal = position === 0 ? 'ü•á' : position === 1 ? 'ü•à' : 'ü•â';
            const color = colors[imageIndex] || `–û–±—Ä–∞–∑ ${imageIndex + 1}`;
            const rating = ratings[imageIndex];
            
            comparisonDetails += `
### ${medal} ${color} –æ–±—Ä–∞–∑ - –û—Ü–µ–Ω–∫–∞: ${rating}/10
- **–ü–ª—é—Å—ã**: ${this.getRandomAdvantage()}
- **–ú–∏–Ω—É—Å—ã**: ${this.getRandomDisadvantage()}
- **–°–æ–≤–µ—Ç**: ${this.getRandomTip()}
`;
        });
        
        const advice = `
# üèÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –æ—Ç –ú–ò–®–£–†–´

**–ü–æ–≤–æ–¥**: ${occasion}
**–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è**: ${preferences || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}
**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑–æ–≤**: ${imageCount}

## –†–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
**–õ—É—á—à–∏–π –æ–±—Ä–∞–∑ –¥–ª—è ${occasion}**: ${colors[sortedIndices[0]]} –æ–±—Ä–∞–∑ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç —Å –æ—Ü–µ–Ω–∫–æ–π ${ratings[sortedIndices[0]]}/10!

## üìä –î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ
${comparisonDetails}

## üí° –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
${occasionAnalysis.generalFeedback}

–í—Å–µ –æ–±—Ä–∞–∑—ã –∏–º–µ—é—Ç —Å–≤–æ–∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞. –í—ã–±–∏—Ä–∞–π—Ç–µ –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏!

## üéØ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥
${sortedIndices.map((index, position) => 
    `${position + 1}. ${colors[index]} –æ–±—Ä–∞–∑ - ${ratings[index]}/10`
).join('\n')}

üí° **–°–æ–≤–µ—Ç –æ—Ç –ú–ò–®–£–†–´**: ${occasionAnalysis.proTip} (–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú)

---
*–°—Ä–∞–≤–Ω–µ–Ω–∏–µ ${imageCount} –æ–±—Ä–∞–∑–æ–≤*
*–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${new Date().toLocaleString()}*
        `.trim();

        return {
            status: 'success',
            advice: advice,
            metadata: {
                timestamp: new Date().toISOString(),
                testMode: true,
                apiVersion: 'mock-v1.0.0',
                occasion: occasion,
                preferences: preferences,
                imagesCount: imageCount,
                ratings: ratings,
                bestImageIndex: sortedIndices[0],
                processingTime: `${Math.random() * 5 + 2}s`
            }
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–≤–æ–¥–∞
     */
    getOccasionAnalysis(occasion) {
        const occasionLower = occasion.toLowerCase();
        
        if (occasionLower.includes('–¥–µ–ª–æ–≤–∞—è') || occasionLower.includes('—Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ') || occasionLower.includes('—Ä–∞–±–æ—Ç–∞')) {
            return {
                generalFeedback: '–í–∞—à –¥–µ–ª–æ–≤–æ–π –æ–±—Ä–∞–∑ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –±–∏–∑–Ω–µ—Å-—Å—Ä–µ–¥—ã!',
                colorAdvice: '–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–µ–ª–æ–≤–æ–≥–æ —Å—Ç–∏–ª—è - —Å—Ç—Ä–æ–≥–æ, –Ω–æ –Ω–µ —Å–∫—É—á–Ω–æ.',
                styleAdvice: '–°–∏–ª—É—ç—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º –∏ —Å–æ–∑–¥–∞–µ—Ç –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏.',
                recommendations: [
                    '–î–æ–±–∞–≤—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–∑–∞',
                    '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫—É—é –æ–±—É–≤—å –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –∫–∞–±–ª—É–∫–µ',
                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ –æ–±—Ä–∞–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–∫–æ–π –∏–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º'
                ],
                additionalTips: '–ü–æ–º–Ω–∏—Ç–µ: –≤ –¥–µ–ª–æ–≤–æ–π —Å—Ä–µ–¥–µ –≤–∞–∂–Ω–∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Å–æ—Ç–∞, –Ω–æ –∏ —É–º–µ—Å—Ç–Ω–æ—Å—Ç—å. –í–∞—à –æ–±—Ä–∞–∑ –¥–æ–ª–∂–µ–Ω –≥–æ–≤–æ—Ä–∏—Ç—å –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º–µ.',
                rating: Math.floor(Math.random() * 2) + 8, // 8-9
                proTip: '–î–ª—è –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á –ª—É—á—à–µ –≤—ã–±–∏—Ä–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–æ—á–µ—Ç–∞–Ω–∏—è, —á–µ–º —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å'
            };
        }
        
        if (occasionLower.includes('—Å–≤–∏–¥–∞–Ω–∏–µ') || occasionLower.includes('—Ä–æ–º–∞–Ω—Ç–∏–∫')) {
            return {
                generalFeedback: '–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–∑! –í—ã —Ç–æ—á–Ω–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ—Ç–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–∏.',
                colorAdvice: '–¶–≤–µ—Ç–∞ —Å–æ–∑–¥–∞—é—Ç –Ω—É–∂–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ - –Ω–µ–∂–Ω–æ –∏ –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ, –Ω–æ –Ω–µ –≤—ã–∑—ã–≤–∞—é—â–µ.',
                styleAdvice: '–°–∏–ª—É—ç—Ç –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ —Ñ–∏–≥—É—Ä—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–≥–∞–¥–æ—á–Ω–æ—Å—Ç—å.',
                recommendations: [
                    '–î–æ–±–∞–≤—å—Ç–µ –¥–µ–ª–∏–∫–∞—Ç–Ω—ã–µ —É–∫—Ä–∞—à–µ–Ω–∏—è –¥–ª—è —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ—Å—Ç–∏',
                    '–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—É–≤—å, –≤ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç–µ —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ',
                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ –æ–±—Ä–∞–∑ –Ω–µ–±–æ–ª—å—à–æ–π –∏–∑—è—â–Ω–æ–π —Å—É–º–æ—á–∫–æ–π'
                ],
                additionalTips: '–ì–ª–∞–≤–Ω–æ–µ –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–∏ - —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ. –ö—Ä–∞—Å–æ—Ç–∞ –∏–¥–µ—Ç –∏–∑–Ω—É—Ç—Ä–∏!',
                rating: Math.floor(Math.random() * 2) + 8, // 8-9
                proTip: '–ù–∞ —Å–≤–∏–¥–∞–Ω–∏–∏ –≤–∞–∂–Ω–µ–µ –±—ã—Ç—å —Å–æ–±–æ–π, —á–µ–º –ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —á—É–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º'
            };
        }
        
        if (occasionLower.includes('–≤–µ—á–µ—Ä–∏–Ω–∫–∞') || occasionLower.includes('–∫–ª—É–±') || occasionLower.includes('–ø—Ä–∞–∑–¥')) {
            return {
                generalFeedback: '–Ø—Ä–∫–∏–π –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è –æ–±—Ä–∞–∑ –¥–ª—è –≤–µ—á–µ—Ä–∏–Ω–∫–∏! –í—ã —Ç–æ—á–Ω–æ –±—É–¥–µ—Ç–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≤–Ω–∏–º–∞–Ω–∏—è.',
                colorAdvice: '–°–º–µ–ª–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞ –æ—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è.',
                styleAdvice: '–î–∏–Ω–∞–º–∏—á–Ω—ã–π —Å–∏–ª—É—ç—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è –∏ —Ç–∞–Ω—Ü–µ–≤–∞—Ç—å.',
                recommendations: [
                    '–î–æ–±–∞–≤—å—Ç–µ —è—Ä–∫–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏ —É–∫—Ä–∞—à–µ–Ω–∏—è',
                    '–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –æ–±—É–≤—å –¥–ª—è —Ç–∞–Ω—Ü–µ–≤',
                    '–î–æ–ø–æ–ª–Ω–∏—Ç–µ –æ–±—Ä–∞–∑ —Å—Ç–∏–ª—å–Ω–æ–π —Å—É–º–æ—á–∫–æ–π –Ω–∞ –¥–ª–∏–Ω–Ω–æ–π —Ä—É—á–∫–µ'
                ],
                additionalTips: '–ù–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ –º–æ–∂–Ω–æ –ø–æ–∑–≤–æ–ª–∏—Ç—å —Å–µ–±–µ –±–æ–ª—å—à–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤ —Å —Ü–≤–µ—Ç–æ–º –∏ —Å—Ç–∏–ª–µ–º!',
                rating: Math.floor(Math.random() * 2) + 7, // 7-8
                proTip: '–î–ª—è –≤–µ—á–µ—Ä–∏–Ω–æ–∫ –≤—ã–±–∏—Ä–∞–π—Ç–µ –≤–µ—â–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ'
            };
        }
        
        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        return {
            generalFeedback: '–ì–∞—Ä–º–æ–Ω–∏—á–Ω—ã–π –∏ —Å—Ç–∏–ª—å–Ω—ã–π –æ–±—Ä–∞–∑! –û—Ç–ª–∏—á–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–≤–æ–¥–∞.',
            colorAdvice: '–¶–≤–µ—Ç–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∏—è—Ç–Ω–æ–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ.',
            styleAdvice: '–ü—Ä–æ–ø–æ—Ä—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω—ã —É–¥–∞—á–Ω–æ –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞—é—Ç –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞ —Ñ–∏–≥—É—Ä—ã.',
            recommendations: [
                '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–µ–Ω—Ç–Ω–æ–≥–æ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞',
                '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –æ–±—É–≤—å - –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≥–∞—Ä–º–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å –æ–±—â–∏–º —Å—Ç–∏–ª–µ–º',
                '–î–æ–ø–æ–ª–Ω–∏—Ç–µ –æ–±—Ä–∞–∑ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—É–º–∫–æ–π'
            ],
            additionalTips: '–ü–æ–º–Ω–∏—Ç–µ: –ª—É—á—à–∏–π –æ–±—Ä–∞–∑ - —Ç–æ—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–±—è —É–≤–µ—Ä–µ–Ω–Ω–æ –∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ.',
            rating: Math.floor(Math.random() * 2) + 7, // 7-8
            proTip: '–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç–∏–ª—è–º–∏, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–≤–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑'
        };
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     */
    getRandomAdvantage() {
        const advantages = [
            '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—á–µ—Ç–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤',
            '–ò–¥–µ–∞–ª—å–Ω–∞—è –ø–æ—Å–∞–¥–∫–∞ –ø–æ —Ñ–∏–≥—É—Ä–µ',
            '–°—Ç–∏–ª—å–Ω—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –≤–∏–¥',
            '–•–æ—Ä–æ—à–∏–µ –ø—Ä–æ–ø–æ—Ä—Ü–∏–∏',
            '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
            '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–∞',
            '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —Å–∏–ª—É—ç—Ç',
            '–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏'
        ];
        return advantages[Math.floor(Math.random() * advantages.length)];
    }

    getRandomDisadvantage() {
        const disadvantages = [
            '–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ü–≤–µ—Ç–∞',
            '–°—Ç–∏–ª—å –Ω–µ–º–Ω–æ–≥–æ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π',
            '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —è—Ä–∫–∏—Ö –∞–∫—Ü–µ–Ω—Ç–æ–≤',
            '–°–∏–ª—É—ç—Ç –º–æ–∂–Ω–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å',
            '–û–±—Ä–∞–∑ —Å–ª–µ–≥–∫–∞ –æ–¥–Ω–æ–æ–±—Ä–∞–∑–µ–Ω',
            '–ú–æ–∂–Ω–æ –ø–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–∫—Å—Ç—É—Ä–∞–º–∏',
            '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∏–¥–µ–∞–ª–µ–Ω',
            '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –Ω–µ–¥–æ—á–µ—Ç—ã'
        ];
        return disadvantages[Math.floor(Math.random() * disadvantages.length)];
    }

    getRandomTip() {
        const tips = [
            '–î–æ–±–∞–≤—å—Ç–µ —è—Ä–∫–∏–π –∞–∫—Å–µ—Å—Å—É–∞—Ä',
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –æ–±—É–≤—å',
            '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–π –ø–æ—è—Å',
            '–î–æ–ø–æ–ª–Ω–∏—Ç–µ –æ–±—Ä–∞–∑ —É–∫—Ä–∞—à–µ–Ω–∏—è–º–∏',
            '–ü–æ—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –ø—Ä–∏—á–µ—Å–∫–æ–π',
            '–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é —Å—É–º–∫—É',
            '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω–æ—Å—Ç—å',
            '–£–∂–µ –æ—Ç–ª–∏—á–Ω–æ, –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ'
        ];
        return tips[Math.floor(Math.random() * tips.length)];
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è Mock API
     */
    setFailureRate(rate) {
        this.settings.failureRate = Math.max(0, Math.min(1, rate));
        this.log(`–ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${(rate * 100).toFixed(1)}%`);
    }

    setDelay(min, max) {
        this.settings.minDelay = min;
        this.settings.maxDelay = max;
        this.log(`–ó–∞–¥–µ—Ä–∂–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${min}-${max}–º—Å`);
    }

    setCustomResponse(type, occasion, response) {
        const key = `${type}_${occasion}`;
        this.settings.customResponses.set(key, response);
        this.log(`–ö–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è: ${key}`);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    getStats() {
        return { ...this.stats };
    }

    /**
     * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    resetStats() {
        this.stats = {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            averageResponseTime: 0,
            lastRequestTime: null
        };
        this.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API (Mock)
     */
    async healthCheck() {
        this.log('üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Mock API');
        
        await this.simulateNetworkDelay();
        
        return {
            isHealthy: true,
            data: {
                status: 'healthy',
                service: '–ú–ò–®–£–†–ê Mock API',
                version: 'mock-v1.0.0',
                uptime: Date.now() - this.stats.lastRequestTime || 0,
                statistics: this.getStats()
            }
        };
    }
}

// === –≠–ö–°–ü–û–†–¢ –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ===

// –î–µ–ª–∞–µ–º –∫–ª–∞—Å—Å –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.MockMishuraAPIService = MockMishuraAPIService;

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
window.mockAPI = new MockMishuraAPIService();

// –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π API Service –Ω–∞ Mock (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
if (typeof window.originalMishuraAPIService === 'undefined') {
    window.originalMishuraAPIService = window.MishuraAPIService;
}
window.MishuraAPIService = MockMishuraAPIService;

// === –¢–ï–°–¢–û–í–´–ï –£–¢–ò–õ–ò–¢–´ ===

window.mockAPIUtils = {
    // –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    enableErrors: (rate = 0.1) => window.mockAPI.setFailureRate(rate),
    disableErrors: () => window.mockAPI.setFailureRate(0),
    fastMode: () => window.mockAPI.setDelay(100, 500),
    slowMode: () => window.mockAPI.setDelay(3000, 8000),
    normalMode: () => window.mockAPI.setDelay(1000, 3000),
    
    // –ö–∞—Å—Ç–æ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    setCustom: (type, occasion, response) => window.mockAPI.setCustomResponse(type, occasion, response),
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats: () => window.mockAPI.getStats(),
    resetStats: () => window.mockAPI.resetStats(),
    
    // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ API
    restore: () => {
        if (window.originalMishuraAPIService) {
            window.MishuraAPIService = window.originalMishuraAPIService;
            console.log('‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π API Service –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        }
    }
};

console.log(`
üé≠ === MOCK API –î–õ–Ø –ú–ò–®–£–†–´ –ì–û–¢–û–í ===

üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:
‚Ä¢ mockAPIUtils.enableErrors(0.1) - –≤–∫–ª—é—á–∏—Ç—å 10% –æ—à–∏–±–æ–∫
‚Ä¢ mockAPIUtils.disableErrors() - –æ—Ç–∫–ª—é—á–∏—Ç—å –æ—à–∏–±–∫–∏
‚Ä¢ mockAPIUtils.fastMode() - –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º
‚Ä¢ mockAPIUtils.slowMode() - –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
‚Ä¢ mockAPIUtils.stats() - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ mockAPIUtils.restore() - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π API

üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:
‚Ä¢ –í—Å–µ API –∑–∞–ø—Ä–æ—Å—ã —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è Mock —Å–µ—Ä–≤–∏—Å–æ–º
‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ª—é–±—ã—Ö –ø–æ–≤–æ–¥–æ–≤
‚Ä¢ –ú–æ–∂–Ω–æ —Å–∏–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –∏ –∑–∞–¥–µ—Ä–∂–∫–∏
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è

‚ö†Ô∏è –í–ê–ñ–ù–û:
‚Ä¢ –≠—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ mockAPIUtils.restore() –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É API
‚Ä¢ Mock API –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
`);

console.log('‚úÖ Mock API –¥–ª—è –ú–ò–®–£–†–´ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');