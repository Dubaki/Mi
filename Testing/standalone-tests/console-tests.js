// üß™ –ö–û–ù–°–û–õ–¨–ù–´–ï –¢–ï–°–¢–´ –î–õ–Ø –ú–ò–®–£–†–´
// console-tests.js - –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
// –í–µ—Ä—Å–∏—è: 1.0.0

console.log('üß™ === –ö–û–ù–°–û–õ–¨–ù–´–ï –¢–ï–°–¢–´ –ú–ò–®–£–†–´ –ó–ê–ì–†–£–ñ–ï–ù–´ ===');
console.log('üìÖ –í–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–æ–≤: 1.0.0');
console.log('üéØ –¶–µ–ª—å: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—á–µ–π V2');

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
let testResults = {
    total: 0,
    passed: 0,
    failed: 0,
    warnings: 0,
    startTime: Date.now(),
    tests: []
};

// === –£–¢–ò–õ–ò–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===
function testLog(message, type = 'info') {
    const timestamp = new Date().toLocaleTimeString();
    const prefix = {
        'info': '‚ÑπÔ∏è',
        'success': '‚úÖ',
        'error': '‚ùå',
        'warning': '‚ö†Ô∏è',
        'debug': 'üîç'
    }[type] || '‚ÑπÔ∏è';
    
    const logMessage = `[${timestamp}] ${prefix} ${message}`;
    console.log(logMessage);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    testResults.tests.push({
        timestamp: Date.now(),
        type,
        message,
        fullMessage: logMessage
    });
}

function assert(condition, message) {
    testResults.total++;
    if (condition) {
        testResults.passed++;
        testLog(`PASS: ${message}`, 'success');
        return true;
    } else {
        testResults.failed++;
        testLog(`FAIL: ${message}`, 'error');
        return false;
    }
}

function assertEqual(actual, expected, message) {
    const condition = actual === expected;
    if (!condition) {
        testLog(`Expected: ${expected}, Actual: ${actual}`, 'error');
    }
    return assert(condition, message);
}

function assertNotNull(value, message) {
    return assert(value !== null && value !== undefined, message);
}

function assertType(value, expectedType, message) {
    return assert(typeof value === expectedType, message);
}

// === –°–û–ó–î–ê–ù–ò–ï BACKUP –¢–ï–ö–£–©–ï–ì–û –°–û–°–¢–û–Ø–ù–ò–Ø ===
function createBackup() {
    testLog('üõ°Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ backup —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è...', 'info');
    
    window.originalMishuraApp = window.mishuraApp;
    window.originalMishuraAPIService = window.MishuraAPIService;
    
    if (window.originalMishuraApp) {
        testLog('‚úÖ Backup –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω', 'success');
    } else {
        testLog('‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'warning');
        testResults.warnings++;
    }
    
    if (window.originalMishuraAPIService) {
        testLog('‚úÖ Backup API —Å–µ—Ä–≤–∏—Å–∞ —Å–æ–∑–¥–∞–Ω', 'success');
    } else {
        testLog('‚ö†Ô∏è API —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'warning');
        testResults.warnings++;
    }
}

function restoreBackup() {
    testLog('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ backup...', 'info');
    
    if (window.originalMishuraApp) {
        window.mishuraApp = window.originalMishuraApp;
        delete window.originalMishuraApp;
        testLog('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'success');
    }
    
    if (window.originalMishuraAPIService) {
        window.MishuraAPIService = window.originalMishuraAPIService;
        delete window.originalMishuraAPIService;
        testLog('‚úÖ API —Å–µ—Ä–≤–∏—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω', 'success');
    }
    
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
    if (window.testMishuraApp) {
        delete window.testMishuraApp;
        testLog('üßπ –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–¥–∞–ª–µ–Ω', 'info');
    }
}

// === –ë–ê–ó–û–í–´–ï –¢–ï–°–¢–´ ===
function testEnvironment() {
    testLog('üåê === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ö–†–£–ñ–ï–ù–ò–Ø ===', 'info');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±—Ä–∞—É–∑–µ—Ä
    assertNotNull(window, 'window –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
    assertNotNull(document, 'document –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
    assertNotNull(console, 'console –æ–±—ä–µ–∫—Ç –¥–æ—Å—Ç—É–ø–µ–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ API
    assertType(localStorage, 'object', 'localStorage –¥–æ—Å—Ç—É–ø–µ–Ω');
    assertType(fetch, 'function', 'fetch API –¥–æ—Å—Ç—É–ø–µ–Ω');
    assert(typeof Promise !== 'undefined', 'Promise –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM
    const container = document.querySelector('.container');
    assert(!!container, '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω');
    
    testLog('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'success');
}

function testMishuraAppClass() {
    testLog('üé≠ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–ê–°–°–ê MishuraApp ===', 'info');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞
    assertType(window.MishuraApp, 'function', '–ö–ª–∞—Å—Å MishuraApp –¥–æ—Å—Ç—É–ø–µ–Ω');
    
    try {
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
        window.testMishuraApp = new window.MishuraApp();
        assert(true, '–≠–∫–∑–µ–º–ø–ª—è—Ä MishuraApp —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        assertNotNull(window.testMishuraApp.currentMode, 'currentMode –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        assertNotNull(window.testMishuraApp.currentSection, 'currentSection –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        assertType(window.testMishuraApp.compareImages, 'object', 'compareImages –º–∞—Å—Å–∏–≤ —Å–æ–∑–¥–∞–Ω');
        assertType(window.testMishuraApp.userBalance, 'number', 'userBalance —á–∏—Å–ª–æ');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –ø–∞—Ç—á–µ–π V2
        assertEqual(window.testMishuraApp.requestTimeout, 90000, 'Timeout —É–≤–µ–ª–∏—á–µ–Ω –¥–æ 90 —Å–µ–∫—É–Ω–¥');
        assertType(window.testMishuraApp.initializationComplete, 'boolean', 'initializationComplete —Ñ–ª–∞–≥ –µ—Å—Ç—å');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã
        assertType(window.testMishuraApp.normalizeAPIResponse, 'function', 'normalizeAPIResponse –º–µ—Ç–æ–¥ –µ—Å—Ç—å');
        assertType(window.testMishuraApp.parseMarkdownStructure, 'function', 'parseMarkdownStructure –º–µ—Ç–æ–¥ –µ—Å—Ç—å');
        assertType(window.testMishuraApp.diagnostics, 'function', 'diagnostics –º–µ—Ç–æ–¥ –µ—Å—Ç—å');
        assertType(window.testMishuraApp.getAnalytics, 'function', 'getAnalytics –º–µ—Ç–æ–¥ –µ—Å—Ç—å');
        
    } catch (error) {
        testLog(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞: ${error.message}`, 'error');
        testResults.failed++;
    }
    
    testLog('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ MishuraApp –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'success');
}

function testAPIResponseNormalization() {
    testLog('üîÑ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–†–ú–ê–õ–ò–ó–ê–¶–ò–ò API ===', 'info');
    
    if (!window.testMishuraApp) {
        testLog('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    const testCases = [
        {
            input: '–ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞',
            expectedType: 'string',
            description: '–°—Ç—Ä–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç'
        },
        {
            input: { advice: '–û—Ç–≤–µ—Ç —Å advice' },
            expectedField: 'advice',
            description: '–û–±—ä–µ–∫—Ç —Å advice'
        },
        {
            input: { message: '–û—Ç–≤–µ—Ç —Å message' },
            expectedField: 'advice',
            description: '–û–±—ä–µ–∫—Ç —Å message'
        },
        {
            input: { text: '–û—Ç–≤–µ—Ç —Å text' },
            expectedField: 'advice',
            description: '–û–±—ä–µ–∫—Ç —Å text'
        },
        {
            input: null,
            expectedField: 'advice',
            description: 'null –æ—Ç–≤–µ—Ç'
        },
        {
            input: {},
            expectedField: 'advice',
            description: '–ü—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç'
        }
    ];
    
    testCases.forEach((testCase, index) => {
        try {
            const result = window.testMishuraApp.normalizeAPIResponse(testCase.input);
            
            assert(!!result, `–¢–µ—Å—Ç ${index + 1}: –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ null`);
            assert(!!result.advice, `–¢–µ—Å—Ç ${index + 1}: advice –ø–æ–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            assert(!!result.metadata, `–¢–µ—Å—Ç ${index + 1}: metadata –ø–æ–ª–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
            assertType(result.advice, 'string', `–¢–µ—Å—Ç ${index + 1}: advice —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π`);
            
            testLog(`‚úÖ ${testCase.description} - –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ`, 'success');
            
        } catch (error) {
            testLog(`‚ùå ${testCase.description} - –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
            testResults.failed++;
        }
    });
    
    testLog('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ API –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'success');
}

function testMarkdownParsing() {
    testLog('üìã === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–ê–†–°–ò–ù–ì–ê MARKDOWN ===', 'info');
    
    if (!window.testMishuraApp) {
        testLog('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    const testMarkdown = `
# –ó–∞–≥–æ–ª–æ–≤–æ–∫ 1
## –ó–∞–≥–æ–ª–æ–≤–æ–∫ 2
### –ó–∞–≥–æ–ª–æ–≤–æ–∫ 3

**–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç**
*–ö—É—Ä—Å–∏–≤*

- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ 1
- –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ 2

–û–±—ã—á–Ω—ã–π –∞–±–∑–∞—Ü —Ç–µ–∫—Å—Ç–∞.

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
–≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç —Å—Ç–∏–ª–∏—Å—Ç–∞.
    `;
    
    try {
        const result = window.testMishuraApp.parseMarkdownStructure(testMarkdown);
        
        assert(typeof result === 'string', '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ - —Å—Ç—Ä–æ–∫–∞');
        assert(result.includes('<h2>'), 'H1 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ H2');
        assert(result.includes('<h3>'), 'H2 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ H3');
        assert(result.includes('<h4>'), 'H3 –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ H4');
        assert(result.includes('<strong>'), '–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω');
        assert(result.includes('<em>'), '–ö—É—Ä—Å–∏–≤ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω');
        assert(result.includes('<ul>'), '–°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω');
        assert(result.includes('<li>'), '–≠–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω—ã');
        assert(result.includes('<p>'), '–ü–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å–æ–∑–¥–∞–Ω—ã');
        
        testLog('‚úÖ Markdown –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'success');
        
    } catch (error) {
        testLog(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ markdown: ${error.message}`, 'error');
        testResults.failed++;
    }
    
    testLog('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'success');
}

function testAPIIntegration() {
    testLog('üåê === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===', 'info');
    
    if (!window.testMishuraApp) {
        testLog('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API
    if (!window.testMishuraApp.api) {
        testLog('‚ö†Ô∏è API –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É —ç–∫–∑–µ–º–ø–ª—è—Ä—É', 'warning');
        testResults.warnings++;
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã API
    assertType(window.testMishuraApp.api.analyzeSingle, 'function', 'analyzeSingle –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω');
    assertType(window.testMishuraApp.api.analyzeCompare, 'function', 'analyzeCompare –º–µ—Ç–æ–¥ –¥–æ—Å—Ç—É–ø–µ–Ω');
    
    // –¢–µ—Å—Ç —Å mock –¥–∞–Ω–Ω—ã–º–∏
    const mockFile = new File(['test data'], 'test.jpg', { type: 'image/jpeg' });
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º analyzeSingle (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    window.testMishuraApp.api.analyzeSingle(mockFile, '—Ç–µ—Å—Ç', '—Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è')
        .then(result => {
            assert(!!result, 'analyzeSingle –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
            assert(!!result.advice || !!result.message, '–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç advice –∏–ª–∏ message');
            testLog('‚úÖ analyzeSingle —Ç–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω', 'success');
        })
        .catch(error => {
            testLog(`‚ùå analyzeSingle —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`, 'error');
            testResults.failed++;
        });
    
    testLog('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'success');
}

function testNavigationSystem() {
    testLog('üß≠ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–í–ò–ì–ê–¶–ò–ò ===', 'info');
    
    if (!window.testMishuraApp) {
        testLog('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    const sections = ['home', 'history', 'balance'];
    let successCount = 0;
    
    sections.forEach(section => {
        try {
            const initialSection = window.testMishuraApp.currentSection;
            window.testMishuraApp.navigateToSection(section);
            
            if (window.testMishuraApp.currentSection === section) {
                successCount++;
                testLog(`‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –≤ ${section} —É—Å–ø–µ—à–µ–Ω`, 'success');
            } else {
                testLog(`‚ùå –ü–µ—Ä–µ—Ö–æ–¥ –≤ ${section} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω`, 'error');
                testResults.failed++;
            }
        } catch (error) {
            testLog(`‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ ${section}: ${error.message}`, 'error');
            testResults.failed++;
        }
    });
    
    assert(successCount === sections.length, `–í—Å–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã (${successCount}/${sections.length})`);
    
    testLog('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'success');
}

function testAnalyticsAndDiagnostics() {
    testLog('üìä === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ê–ù–ê–õ–ò–¢–ò–ö–ò –ò –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===', 'info');
    
    if (!window.testMishuraApp) {
        testLog('‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º getAnalytics
    try {
        const analytics = window.testMishuraApp.getAnalytics();
        
        assertType(analytics, 'object', 'getAnalytics –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç');
        assertType(analytics.sessionDuration, 'number', 'sessionDuration —á–∏—Å–ª–æ');
        assertType(analytics.userBalance, 'number', 'userBalance —á–∏—Å–ª–æ');
        assertType(analytics.apiConnected, 'boolean', 'apiConnected –±—É–ª–µ–≤–æ');
        assertType(analytics.initializationComplete, 'boolean', 'initializationComplete –±—É–ª–µ–≤–æ');
        
        testLog('‚úÖ getAnalytics —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', 'success');
        
    } catch (error) {
        testLog(`‚ùå –û—à–∏–±–∫–∞ getAnalytics: ${error.message}`, 'error');
        testResults.failed++;
    }
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º diagnostics
    try {
        window.testMishuraApp.diagnostics();
        testLog('‚úÖ diagnostics –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–µ–∑ –æ—à–∏–±–æ–∫', 'success');
        
    } catch (error) {
        testLog(`‚ùå –û—à–∏–±–∫–∞ diagnostics: ${error.message}`, 'error');
        testResults.failed++;
    }
    
    testLog('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'success');
}

// === –ü–û–õ–ù–´–ô –¢–ï–°–¢-–°–¨–Æ–¢ ===
async function runFullTestSuite() {
    testLog('üß™ === –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢-–°–¨–Æ–¢–ê ===', 'info');
    testLog(`üìÖ –î–∞—Ç–∞ –∑–∞–ø—É—Å–∫–∞: ${new Date().toLocaleString()}`, 'info');
    
    // –°–±—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    testResults = {
        total: 0,
        passed: 0,
        failed: 0,
        warnings: 0,
        startTime: Date.now(),
        tests: []
    };
    
    try {
        // –°–æ–∑–¥–∞–µ–º backup
        createBackup();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        testEnvironment();
        testMishuraAppClass();
        
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        testAPIResponseNormalization();
        testMarkdownParsing();
        testAPIIntegration();
        testNavigationSystem();
        testAnalyticsAndDiagnostics();
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        await new Promise(resolve => setTimeout(resolve, 3000));
        
    } catch (error) {
        testLog(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç-—Å—å—é—Ç–∞: ${error.message}`, 'error');
        testResults.failed++;
    }
    
    // –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    const duration = (Date.now() - testResults.startTime) / 1000;
    const successRate = testResults.total > 0 ? Math.round((testResults.passed / testResults.total) * 100) : 0;
    
    testLog('üìä === –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===', 'info');
    testLog(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${testResults.passed}`, 'success');
    testLog(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${testResults.failed}`, 'error');
    testLog(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: ${testResults.warnings}`, 'warning');
    testLog(`üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${successRate}%`, 'info');
    testLog(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}—Å`, 'info');
    
    if (testResults.failed === 0) {
        testLog('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!', 'success');
        testLog('üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é', 'info');
        return true;
    } else {
        testLog('‚ö†Ô∏è –ï–°–¢–¨ –ü–†–û–í–ê–õ–ï–ù–ù–´–ï –¢–ï–°–¢–´', 'warning');
        testLog('üîß –ù–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è', 'info');
        return false;
    }
}

// === –ë–´–°–¢–†–´–ï –¢–ï–°–¢–´ ===
function quickTest() {
    testLog('‚ö° === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ ===', 'info');
    
    createBackup();
    testEnvironment();
    testMishuraAppClass();
    
    const successRate = testResults.total > 0 ? Math.round((testResults.passed / testResults.total) * 100) : 0;
    testLog(`‚ö° –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: ${successRate}% —É—Å–ø–µ—à–Ω–æ—Å—Ç—å`, successRate > 80 ? 'success' : 'warning');
    
    return successRate > 80;
}

// === –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô ===
window.testingTools = {
    // –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    runFullTestSuite,
    quickTest,
    createBackup,
    restoreBackup,
    
    // –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    testEnvironment,
    testMishuraAppClass,
    testAPIResponseNormalization,
    testMarkdownParsing,
    testAPIIntegration,
    testNavigationSystem,
    testAnalyticsAndDiagnostics,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    testLog,
    assert,
    assertEqual,
    assertNotNull,
    assertType,
    
    // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    getResults: () => testResults
};

// –î–µ–ª–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
window.runFullTestSuite = runFullTestSuite;
window.quickTest = quickTest;
window.createBackup = createBackup;
window.restoreBackup = restoreBackup;
window.testLog = testLog;

// === –ò–ù–°–¢–†–£–ö–¶–ò–ò ===
console.log(`
üß™ === –ö–û–ù–°–û–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ò–®–£–†–´ ===

üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:
1. runFullTestSuite() - –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (5-10 –º–∏–Ω—É—Ç)
2. quickTest() - –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (30 —Å–µ–∫—É–Ω–¥)
3. createBackup() - —Å–æ–∑–¥–∞—Ç—å backup
4. restoreBackup() - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å backup

üöÄ –ë–´–°–¢–†–´–ô –°–¢–ê–†–¢:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ MishuraApp
2. runFullTestSuite()
3. –ï—Å–ª–∏ –≤—Å–µ –û–ö: –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é
4. –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö: restoreBackup()

‚ö†Ô∏è –í–ê–ñ–ù–û:
- –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ backup –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏
- –¢–µ—Å—Ç—ã –Ω–µ –≤–ª–∏—è—é—Ç –Ω–∞ production –∫–æ–¥
- –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ restoreBackup()

üîç –û–¢–õ–ê–î–ö–ê:
- testingTools.getResults() - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
- –í—Å–µ –ª–æ–≥–∏ –¥—É–±–ª–∏—Ä—É—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
- –ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
`);

testLog('üéâ –ö–æ–Ω—Å–æ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ –∑–∞–ø—É—Å–∫—É!', 'success');