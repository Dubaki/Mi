/*
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –ú–æ–¥—É–ª—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è features
–ö–û–ú–ü–û–ù–ï–ù–¢: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ (features/comparison.js)
–í–ï–†–°–ò–Ø: 1.0.0 - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏
–î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø: 2025-05-30

–ù–ê–ó–ù–ê–ß–ï–ù–ò–ï: –ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –æ–±—Ä–∞–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ features
==========================================================================================
*/

window.MishuraApp = window.MishuraApp || {};
window.MishuraApp.features = window.MishuraApp.features || {};

window.MishuraApp.features.comparison = (function() {
    'use strict';
    
    let logger;
    let isInitialized = false;
    let uploadedImages = []; // –ú–∞—Å—Å–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    
    function init() {
        if (isInitialized) {
            return;
        }
        
        logger = window.MishuraApp.utils?.logger || createFallbackLogger();
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (features)");
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        setupEventListeners();
        
        isInitialized = true;
        logger.info("‚úÖ –ú–æ–¥—É–ª—å —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (features) –≥–æ—Ç–æ–≤");
    }
    
    function createFallbackLogger() {
        return {
            debug: (...args) => console.debug("Comparison:", ...args),
            info: (...args) => console.info("Comparison:", ...args),
            warn: (...args) => console.warn("Comparison:", ...args),
            error: (...args) => console.error("Comparison:", ...args)
        };
    }
    
    function setupEventListeners() {
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        document.addEventListener('compareImageUploaded', (e) => {
            const { file, slot } = e.detail;
            if (file && slot !== undefined) {
                addImage(file, slot);
                logger.debug(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ—Ç ${slot}: ${file.name}`);
            }
        });
        
        // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        document.addEventListener('compareImageRemoved', (e) => {
            const { slot } = e.detail;
            if (slot !== undefined) {
                removeImage(slot);
                logger.debug(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ—Ç–∞ ${slot}`);
            }
        });
        
        // –°–ª—É—à–∞–µ–º —Å–±—Ä–æ—Å –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        document.addEventListener('allCompareImagesRemoved', () => {
            clearAllImages();
            logger.debug("–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã");
        });
    }
    
    function addImage(file, slotIndex) {
        // –†–∞—Å—à–∏—Ä—è–µ–º –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        while (uploadedImages.length <= slotIndex) {
            uploadedImages.push(null);
        }
        
        uploadedImages[slotIndex] = file;
        logger.debug(`–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ª–æ—Ç ${slotIndex}: ${file.name}`);
    }
    
    function removeImage(slotIndex) {
        if (slotIndex >= 0 && slotIndex < uploadedImages.length) {
            uploadedImages[slotIndex] = null;
            logger.debug(`–§–∞–π–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ª–æ—Ç–∞ ${slotIndex}`);
        }
    }
    
    function clearAllImages() {
        uploadedImages = [];
        logger.debug("–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã");
    }
    
    function getUploadedImages() {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ-null —Ñ–∞–π–ª—ã
        return uploadedImages.filter(file => file !== null);
    }
    
    function getImageCount() {
        return getUploadedImages().length;
    }
    
    function hasImages() {
        return getImageCount() > 0;
    }
    
    function hasMinimumImages() {
        return getImageCount() >= 2;
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–π API
    return {
        init,
        getUploadedImages,
        getImageCount,
        hasImages,
        hasMinimumImages,
        addImage,
        removeImage,
        clearAllImages,
        isInitialized: () => isInitialized
    };
})();