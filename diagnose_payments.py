# üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ü–õ–ê–¢–ï–ñ–ï–ô –ú–ò–®–£–†–´
# –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏

import os
import sqlite3
import requests
from datetime import datetime

def diagnose_payment_system():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π"""
    
    print("üé≠ –ú–ò–®–£–†–ê - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–ª–∞—Ç–µ–∂–µ–π")
    print("=" * 60)
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    print("1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    
    try:
        from dotenv import load_dotenv
        load_dotenv()
        
        shop_id = os.getenv('YOOKASSA_SHOP_ID')
        secret_key = os.getenv('YOOKASSA_SECRET_KEY')
        webhook_url = os.getenv('WEBHOOK_URL')
        
        print(f"   YOOKASSA_SHOP_ID: {'‚úÖ –ù–∞–π–¥–µ–Ω' if shop_id else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
        print(f"   YOOKASSA_SECRET_KEY: {'‚úÖ –ù–∞–π–¥–µ–Ω' if secret_key else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
        print(f"   WEBHOOK_URL: {webhook_url if webhook_url else '‚ùå –ù–ï –ù–ê–ô–î–ï–ù'}")
        
        if shop_id:
            print(f"   Shop ID: {shop_id}")
        if secret_key:
            print(f"   Secret Key: {secret_key[:10]}...")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•:")
    
    try:
        conn = sqlite3.connect('styleai.db')
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã payments
        schema = conn.execute("PRAGMA table_info(payments)").fetchall()
        print("   –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã payments:")
        for col in schema:
            print(f"     - {col[1]} ({col[2]})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        stats = conn.execute("""
            SELECT 
                status, 
                COUNT(*) as count, 
                SUM(stcoins_amount) as total_stcoins,
                SUM(amount) as total_amount
            FROM payments 
            WHERE user_id = 5930269100 
            GROUP BY status
        """).fetchall()
        
        print("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 5930269100:")
        for stat in stats:
            print(f"     - {stat[0]}: {stat[1]} –ø–ª–∞—Ç–µ–∂–µ–π, {stat[2]} STcoin, {stat[3]}‚ÇΩ")
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
        recent = conn.execute("""
            SELECT payment_id, amount, stcoins_amount, status, created_at 
            FROM payments 
            WHERE user_id = 5930269100 
            ORDER BY created_at DESC 
            LIMIT 5
        """).fetchall()
        
        print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–ª–∞—Ç–µ–∂–µ–π:")
        for payment in recent:
            print(f"     - {payment[0][:15]}... | {payment[1]}‚ÇΩ | {payment[2]} STcoin | {payment[3]} | {payment[4]}")
        
        conn.close()
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    print("\n3Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê API ENDPOINTS:")
    
    api_endpoints = [
        "/api/v1/health",
        "/api/v1/users/5930269100/balance", 
        "/api/v1/payments/history?user_id=5930269100",
        "/api/v1/payments/webhook"
    ]
    
    for endpoint in api_endpoints:
        try:
            if endpoint.endswith("webhook"):
                # POST –¥–ª—è webhook
                response = requests.post(f"http://localhost:8000{endpoint}", 
                                       json={"test": True}, timeout=5)
            else:
                # GET –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
                response = requests.get(f"http://localhost:8000{endpoint}", timeout=5)
            
            print(f"   {endpoint}: {'‚úÖ' if response.status_code < 400 else '‚ùå'} {response.status_code}")
            
        except Exception as e:
            print(f"   {endpoint}: ‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({e})")
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ÆKassa –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    print("\n4Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ÆKASSA –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:")
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
        test_payment_data = {
            "user_id": 5930269100,
            "plan_id": "test",
            "return_url": "http://localhost:8000/test"
        }
        
        response = requests.post("http://localhost:8000/api/v1/payments/create", 
                               json=test_payment_data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            print("   ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print(f"   Payment ID: {result.get('payment_id', '–ù–µ –Ω–∞–π–¥–µ–Ω')}")
            print(f"   Payment URL: {'–ù–∞–π–¥–µ–Ω' if result.get('payment_url') else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ÆKassa: {e}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    print("\n5Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò:")
    
    try:
        response = requests.post("http://localhost:8000/api/v1/payments/sync_all", 
                               json={"user_id": 5930269100}, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            print("   ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
    
    print("\n" + "=" * 60)
    print("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±—É–¥—É—Ç –¥–∞–Ω—ã –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
    
    return True

if __name__ == "__main__":
    diagnose_payment_system()