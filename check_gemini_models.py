import os
import google.generativeai as genai
from dotenv import load_dotenv
from PIL import Image
import requests
from io import BytesIO

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

print(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º API –∫–ª—é—á: {GEMINI_API_KEY[:4]}...{GEMINI_API_KEY[-4:] if GEMINI_API_KEY else 'Not found'}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=GEMINI_API_KEY)

def test_text_model():
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏ (gemini-pro) ===")
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –º–æ–¥–µ–ª–∏
        model = genai.GenerativeModel('gemini-pro')
        response = model.generate_content("–ü—Ä–∏–≤–µ—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!")
        print(f"–û—Ç–≤–µ—Ç –æ—Ç gemini-pro: {response.text[:100]}...")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ gemini-pro: {e}")
        return False

def test_vision_model():
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ (gemini-pro-vision) ===")
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        # –ó–∞–≥—Ä—É–∑–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
        image_url = "https://storage.googleapis.com/github-repo/img/gemini/vision_capabilities/landmark6.jpg"
        response = requests.get(image_url)
        image = Image.open(BytesIO(response.content))
        
        model = genai.GenerativeModel('gemini-pro-vision')
        response = model.generate_content(["–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ —ç—Ç–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?", image])
        print(f"–û—Ç–≤–µ—Ç –æ—Ç gemini-pro-vision: {response.text[:100]}...")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ gemini-pro-vision: {e}")
        return False

def check_available_models():
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π ===")
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        models = genai.list_models()
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
        for model in models:
            print(f"‚Ä¢ {model.name}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π: {e}")
        return False

# –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê GEMINI API –ö–õ–Æ–ß–ê –ò –ú–û–î–ï–õ–ï–ô üîç")
text_ok = test_text_model()
vision_ok = test_vision_model()
models_ok = check_available_models()

# –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤
print("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===")
print(f"‚úì –¢–µ–∫—Å—Ç–æ–≤–∞—è –º–æ–¥–µ–ª—å (gemini-pro): {'–î–æ—Å—Ç—É–ø–Ω–∞' if text_ok else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
print(f"‚úì –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å (gemini-pro-vision): {'–î–æ—Å—Ç—É–ø–Ω–∞' if vision_ok else '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞'}")
print(f"‚úì –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π: {'–ü–æ–ª—É—á–µ–Ω' if models_ok else '–ù–µ –ø–æ–ª—É—á–µ–Ω'}")

if not vision_ok:
    print("\n‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ë–õ–ï–ú:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API –∫–ª—é—á –≤–µ—Ä–Ω—ã–π –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
    print("2. –ü–æ—Å–µ—Ç–∏—Ç–µ Google AI Studio (https://makersuite.google.com/app/apikeys):")
    print("   - –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π API –∫–ª—é—á")
    print("   - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç (–¥–∞–∂–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è)")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ä–µ–≥–∏–æ–Ω—É")
    print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ API –≤ Google Cloud Console.")