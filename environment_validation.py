#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ú–ò–®–£–†–ê
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Æ–ö–∞—Å—Å—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
1. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Ñ–∞–π–ª environment_validation.py
2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python environment_validation.py
"""

import os
import sys
import logging
from yookassa import Configuration, Settings
from yookassa.domain.exceptions import ApiError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - [%(levelname)s] - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    
    required_vars = {
        'TELEGRAM_BOT_TOKEN': '–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞',
        'GEMINI_API_KEY': 'API –∫–ª—é—á Google Gemini',
        'YOOKASSA_SHOP_ID': 'ID –º–∞–≥–∞–∑–∏–Ω–∞ –Æ–ö–∞—Å—Å—ã',
        'YOOKASSA_SECRET_KEY': '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –Æ–ö–∞—Å—Å—ã'
    }
    
    missing_vars = []
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    for var_name, description in required_vars.items():
        value = os.getenv(var_name)
        
        if not value:
            missing_vars.append(f"‚ùå {var_name} - {description}")
            logger.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {var_name}")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            masked_value = f"{value[:4]}...{value[-4:]}" if len(value) > 8 else "****"
            logger.info(f"‚úÖ {var_name}: {masked_value}")
    
    if missing_vars:
        logger.error("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        for var in missing_vars:
            logger.error(f"   {var}")
        return False
    
    logger.info("‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    return True

def validate_yookassa_credentials():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –Æ–ö–∞—Å—Å—ã"""
    
    shop_id = os.getenv('YOOKASSA_SHOP_ID')
    secret_key = os.getenv('YOOKASSA_SECRET_KEY')
    
    logger.info("üè™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Æ–ö–∞—Å—Å—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ shop_id
    try:
        shop_id_int = int(shop_id)
        logger.info(f"‚úÖ Shop ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: {shop_id}")
    except (ValueError, TypeError):
        logger.error(f"‚ùå Shop ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º: {shop_id}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã secret_key
    if len(secret_key) < 20:
        logger.error(f"‚ùå Secret Key —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {len(secret_key)} —Å–∏–º–≤–æ–ª–æ–≤")
        return False
    
    logger.info(f"‚úÖ Secret Key –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–ª–∏–Ω—ã: {len(secret_key)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Æ–ö–∞—Å—Å—ã
    try:
        Configuration.configure(
            account_id=shop_id,
            secret_key=secret_key
        )
        logger.info("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Æ–ö–∞—Å—Å—ã —É—Å–ø–µ—à–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Æ–ö–∞—Å—Å—ã: {e}")
        return False
    
    # –¢–µ—Å—Ç API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    try:
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Æ–ö–∞—Å—Å–µ...")
        settings = Settings.get_account_settings()
        logger.info(f"‚úÖ –Æ–ö–∞—Å—Å–∞ API —Ä–∞–±–æ—Ç–∞–µ—Ç: {settings}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ
        if hasattr(settings, 'account_id'):
            logger.info(f"   Account ID: {settings.account_id}")
        if hasattr(settings, 'status'):
            logger.info(f"   –°—Ç–∞—Ç—É—Å: {settings.status}")
            
        return True
        
    except ApiError as e:
        logger.error(f"‚ùå –Æ–ö–∞—Å—Å–∞ API –æ—à–∏–±–∫–∞: {e}")
        logger.error(f"   HTTP –∫–æ–¥: {getattr(e, 'http_code', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        logger.error(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {getattr(e, 'error_code', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        logger.error(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {getattr(e, 'description', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
        # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –æ—à–∏–±–∫–∞–º
        if hasattr(e, 'http_code'):
            if e.http_code == 401:
                logger.error("üîë –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å Shop ID –∏ Secret Key")
                logger.error("üîë –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ü–†–û–î–ê–ö–®–ù –∫–ª—é—á–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω —Å—Ä–µ–¥—ã")
            elif e.http_code == 400:
                logger.error("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –≤ –Æ–ö–∞—Å—Å–µ")
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –Æ–ö–∞—Å—Å–µ: {e}")
        return False

def check_test_mode():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã"""
    
    test_mode = os.getenv('TEST_MODE', 'False').lower() == 'true'
    environment = os.getenv('ENVIRONMENT', 'development')
    
    logger.info(f"üîß –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {'–¢–ï–°–¢' if test_mode else '–ü–†–û–î–ê–ö–®–ù'}")
    logger.info(f"üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: {environment}")
    
    if test_mode:
        logger.warning("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –†–∞–±–æ—Ç–∞–µ–º –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
        logger.warning("‚ö†Ô∏è  –ü–ª–∞—Ç–µ–∂–∏ –±—É–¥—É—Ç —Ç–µ—Å—Ç–æ–≤—ã–º–∏!")
    else:
        logger.info("üí∞ –†–∞–±–æ—Ç–∞–µ–º –≤ –ø—Ä–æ–¥–∞–∫—à–Ω —Ä–µ–∂–∏–º–µ")
        logger.info("üí∞ –ü–ª–∞—Ç–µ–∂–∏ –±—É–¥—É—Ç —Ä–µ–∞–ª—å–Ω—ã–º–∏!")
    
    return True

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    
    logger.info("üé≠ –ú–ò–®–£–†–ê - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    logger.info("=" * 50)
    
    all_checks_passed = True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not check_environment_variables():
        all_checks_passed = False
    
    logger.info("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Æ–ö–∞—Å—Å—ã
    if not validate_yookassa_credentials():
        all_checks_passed = False
    
    logger.info("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞
    if not check_test_mode():
        all_checks_passed = False
    
    logger.info("=" * 50)
    
    if all_checks_passed:
        logger.info("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        logger.info("üöÄ –ú–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        return 0
    else:
        logger.error("‚ùå –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        logger.error("üîß –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        return 1

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)