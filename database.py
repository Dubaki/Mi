"""
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: –ú–æ–¥—É–ª—å –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö (database.py)
–í–ï–†–°–ò–Ø: 3.0.0 - POSTGRESQL SUPPORT
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-06-22

–ù–û–í–û–ï: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ PostgreSQL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ + SQLite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
==========================================================================================
"""
import sqlite3
import os
from datetime import datetime
import logging
from typing import Optional, Dict, Any, List, Union

# PostgreSQL –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
try:
    import psycopg2
    import psycopg2.extras
    from urllib.parse import urlparse
    POSTGRES_AVAILABLE = True
except ImportError:
    POSTGRES_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger("MishuraDB")
if not logger.handlers:
    logging.basicConfig(
        format="%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d): %(message)s",
        level=logging.INFO
    )

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ú–ò–®–£–†–ê.")

def get_database_path():
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_path = os.getenv('DATABASE_PATH')
    if env_path:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        db_dir = os.path.dirname(env_path)
        if db_dir and not os.path.exists(db_dir):
            os.makedirs(db_dir, exist_ok=True)
        return env_path
    
    # Fallback: –ø—Ä–æ–≤–µ—Ä—è–µ–º persistent disk
    if os.path.exists('/opt/render/project/data'):
        return '/opt/render/project/data/styleai.db'
    
    # –õ–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
    return 'styleai.db'

# –ò–º—è —Ñ–∞–π–ª–∞ –ë–î
DB_FILENAME = "styleai.db"
DB_PATH = get_database_path()
SCHEMA_FILE = "schema.sql"

def get_database_config():
    """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    database_url = os.getenv('DATABASE_URL')
    
    if database_url and database_url.startswith('postgresql') and POSTGRES_AVAILABLE:
        logger.info(f"üêò –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è PostgreSQL –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
        return {'type': 'postgresql', 'url': database_url}
    else:
        logger.info(f"üóÉÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è SQLite –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: {DB_PATH}")
        return {'type': 'sqlite', 'path': DB_PATH}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î
DB_CONFIG = get_database_config()

class MishuraDB:
    """
    üé≠ –ú–ò–®–£–†–ê Database Class
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å SQLite –∏ PostgreSQL
    """
    
    def __init__(self, db_path: str = DB_PATH):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ú–ò–®–£–†–ê"""
        self.db_path = db_path
        self.logger = logger
        self.DB_CONFIG = DB_CONFIG
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        if DB_CONFIG['type'] == 'postgresql':
            self.logger.info(f"üêò –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PostgreSQL...")
            self.init_db()
        else:
            if not os.path.exists(self.db_path):
                self.logger.info(f"üÜï SQLite –ë–î –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º: {self.db_path}")
                self.init_db()
            else:
                self.logger.info(f"‚úÖ SQLite –ë–î —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {self.db_path}")
        
        self.logger.info(f"‚úÖ MishuraDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def get_connection(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (SQLite –∏–ª–∏ PostgreSQL)"""
        if DB_CONFIG['type'] == 'postgresql':
            # PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            try:
                conn = psycopg2.connect(DB_CONFIG['url'])
                return conn
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
                raise
        else:
            # SQLite –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (–ª–æ–∫–∞–ª—å–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞)
            try:
                conn = sqlite3.connect(self.db_path, timeout=10)
                conn.execute("PRAGMA foreign_keys = ON;")
                return conn
            except sqlite3.Error as e:
                self.logger.critical(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite: {e}")
                raise
    
    def create_postgres_schema(self, conn):
        """–°–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –¥–ª—è PostgreSQL"""
        cursor = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è PostgreSQL
        schema_sql = """
        -- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            telegram_id BIGINT UNIQUE NOT NULL,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            balance INTEGER DEFAULT 200,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        );

        -- –¢–∞–±–ª–∏—Ü–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
        CREATE TABLE IF NOT EXISTS consultations (
            id SERIAL PRIMARY KEY,
            user_id INTEGER NOT NULL,
            occasion TEXT,
            preferences TEXT,
            image_path TEXT,
            advice TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id)
        );

        -- –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        CREATE TABLE IF NOT EXISTS payments (
            id SERIAL PRIMARY KEY,
            payment_id TEXT UNIQUE NOT NULL,
            yookassa_payment_id TEXT,
            user_id INTEGER NOT NULL,
            telegram_id BIGINT NOT NULL,
            plan_id TEXT NOT NULL,
            amount DECIMAL(10,2) NOT NULL,
            currency TEXT DEFAULT 'RUB',
            status TEXT DEFAULT 'pending',
            stcoins_amount INTEGER NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            processed_at TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id)
        );

        -- –¢–∞–±–ª–∏—Ü–∞ –≥–∞—Ä–¥–µ—Ä–æ–±–∞
        CREATE TABLE IF NOT EXISTS wardrobe (
            id SERIAL PRIMARY KEY,
            user_id INTEGER NOT NULL,
            telegram_file_id TEXT NOT NULL,
            item_name TEXT,
            item_tag TEXT,
            category TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id)
        );

        -- –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
        CREATE INDEX IF NOT EXISTS idx_users_telegram_id ON users(telegram_id);
        CREATE INDEX IF NOT EXISTS idx_consultations_user_id ON consultations(user_id);
        CREATE INDEX IF NOT EXISTS idx_payments_telegram_id ON payments(telegram_id);
        CREATE INDEX IF NOT EXISTS idx_payments_payment_id ON payments(payment_id);
        CREATE INDEX IF NOT EXISTS idx_wardrobe_user_id ON wardrobe(user_id);
        """
        
        cursor.execute(schema_sql)
        conn.commit()
        self.logger.info("‚úÖ PostgreSQL —Å—Ö–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∞")
    
    def init_db(self, schema_file_path: str = SCHEMA_FILE) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            conn = self.get_connection()
            
            if DB_CONFIG['type'] == 'postgresql':
                # PostgreSQL
                self.create_postgres_schema(conn)
            else:
                # SQLite (—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
                cursor = conn.cursor()
                with open(schema_file_path, 'r', encoding='utf-8') as f:
                    sql_script = f.read()
                cursor.executescript(sql_script)
            
            conn.commit()
            conn.close()
            self.logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return True
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
            return False

    def _execute_query(self, query: str, params=None, fetch_one=False, fetch_all=False):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è PostgreSQL
            if DB_CONFIG['type'] == 'postgresql' and params:
                # PostgreSQL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç %s –≤–º–µ—Å—Ç–æ ?
                query = query.replace('?', '%s')
            
            if params:
                cursor.execute(query, params)
            else:
                cursor.execute(query)
            
            result = None
            if fetch_one:
                result = cursor.fetchone()
            elif fetch_all:
                result = cursor.fetchall()
            
            if query.strip().upper().startswith(('INSERT', 'UPDATE', 'DELETE')):
                conn.commit()
                if query.strip().upper().startswith('INSERT') and 'RETURNING' not in query.upper():
                    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                    if DB_CONFIG['type'] == 'postgresql':
                        try:
                            cursor.execute("SELECT LASTVAL()")
                            result = cursor.fetchone()[0]
                        except:
                            # –ï—Å–ª–∏ LASTVAL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º currval
                            result = cursor.lastrowid
                    else:
                        result = cursor.lastrowid
            
            conn.close()
            return result
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
            if 'conn' in locals():
                conn.rollback()
                conn.close()
            raise

    # --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---
    
    def get_user_by_telegram_id(self, telegram_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
        try:
            query = """
                SELECT id, telegram_id, username, first_name, last_name, created_at
                FROM users 
                WHERE telegram_id = ?
            """
            user = self._execute_query(query, (telegram_id,), fetch_one=True)
            
            if user:
                return {
                    'id': user[0],
                    'telegram_id': user[1], 
                    'username': user[2],
                    'first_name': user[3],
                    'last_name': user[4],
                    'created_at': user[5]
                }
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {str(e)}")
            return None

    def save_user(self, telegram_id, username=None, first_name=None, last_name=None, initial_balance=200):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            existing_query = "SELECT id, balance FROM users WHERE telegram_id = ?"
            existing_user = self._execute_query(existing_query, (telegram_id,), fetch_one=True)
            
            if existing_user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                user_id, current_balance = existing_user
                update_query = """
                    UPDATE users 
                    SET username = COALESCE(?, username),
                        first_name = COALESCE(?, first_name),
                        last_name = COALESCE(?, last_name),
                        updated_at = CURRENT_TIMESTAMP
                    WHERE telegram_id = ?
                """
                
                self._execute_query(update_query, (username, first_name, last_name, telegram_id))
                
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ID={user_id}, telegram_id={telegram_id}, –±–∞–ª–∞–Ω—Å={current_balance}")
                return user_id
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                if DB_CONFIG['type'] == 'postgresql':
                    insert_query = """
                        INSERT INTO users (telegram_id, username, first_name, last_name, balance, created_at, updated_at)
                        VALUES (%s, %s, %s, %s, %s, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                        RETURNING id
                    """
                    conn = self.get_connection()
                    cursor = conn.cursor()
                    cursor.execute(insert_query, (
                        telegram_id, username or 'webapp_user', first_name or 'WebApp', 
                        last_name or 'User', initial_balance
                    ))
                    user_id = cursor.fetchone()[0]
                    conn.commit()
                    conn.close()
                else:
                    insert_query = """
                        INSERT INTO users (telegram_id, username, first_name, last_name, balance, created_at, updated_at)
                        VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                    """
                    user_id = self._execute_query(insert_query, (
                        telegram_id, username or 'webapp_user', first_name or 'WebApp', 
                        last_name or 'User', initial_balance
                    ))
                
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID={user_id}, telegram_id={telegram_id}, –±–∞–ª–∞–Ω—Å={initial_balance}")
                return user_id
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id={telegram_id}: {e}")
            raise

    def get_user(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ telegram_id"""
        self.logger.debug(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: telegram_id={telegram_id}")
        
        try:
            query = 'SELECT id, telegram_id, username, first_name, last_name, balance, created_at FROM users WHERE telegram_id = ?'
            user_row = self._execute_query(query, (telegram_id,), fetch_one=True)
            
            if user_row:
                user_dict = {
                    'id': user_row[0],
                    'telegram_id': user_row[1],
                    'username': user_row[2],
                    'first_name': user_row[3],
                    'last_name': user_row[4],
                    'balance': user_row[5],
                    'created_at': user_row[6]
                }
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} –Ω–∞–π–¥–µ–Ω: {user_dict}")
                return user_dict
            else:
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return None
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id={telegram_id}: {e}", exc_info=True)
            return None
        
    def get_user_balance(self, telegram_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.logger.debug(f"–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: telegram_id={telegram_id}")
        
        try:
            query = 'SELECT balance FROM users WHERE telegram_id = ?'
            result = self._execute_query(query, (telegram_id,), fetch_one=True)
            
            if result:
                balance = result[0]
                self.logger.info(f"–ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id={telegram_id} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {balance}")
                return balance
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º 200 STCoins
                initial_balance = 200
                user_id = self.save_user(
                    telegram_id=telegram_id,
                    username='webapp_user',
                    first_name='WebApp',
                    last_name='User',
                    initial_balance=initial_balance
                )
                
                if user_id:
                    self.logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º {initial_balance}")
                    return initial_balance
                else:
                    return 0
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id={telegram_id}: {e}", exc_info=True)
            return 0
        
    def update_user_balance(self, telegram_id: int, amount_change: int, operation_type="manual") -> int:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            current_balance = self.get_user_balance(telegram_id)
            new_balance = current_balance + amount_change
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            update_query = """
                UPDATE users 
                SET balance = ?, updated_at = CURRENT_TIMESTAMP
                WHERE telegram_id = ?
            """
            
            result = self._execute_query(update_query, (new_balance, telegram_id))
            
            self.logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {current_balance} {'+' if amount_change >= 0 else ''}{amount_change} = {new_balance} ({operation_type})")
            
            return new_balance
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è telegram_id={telegram_id}: {e}")
            return current_balance if 'current_balance' in locals() else 0

    # --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø–ú–ò ---
    
    def save_consultation(self, user_id: int, occasion: Optional[str], preferences: Optional[str], image_path: Optional[str], advice: Optional[str]) -> Optional[int]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, –ø–æ–≤–æ–¥: {occasion}")
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: user_id —Ç–µ–ø–µ—Ä—å —ç—Ç–æ telegram_id, –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π internal ID
            user_query = "SELECT id FROM users WHERE telegram_id = ?"
            user_row = self._execute_query(user_query, (user_id,), fetch_one=True)
            
            if not user_row:
                self.logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return None
            
            internal_user_id = user_row[0]
            
            if DB_CONFIG['type'] == 'postgresql':
                consultation_query = '''
                INSERT INTO consultations (user_id, occasion, preferences, image_path, advice, created_at)
                VALUES (%s, %s, %s, %s, %s, CURRENT_TIMESTAMP)
                RETURNING id
                '''
                conn = self.get_connection()
                cursor = conn.cursor()
                cursor.execute(consultation_query, (internal_user_id, occasion, preferences, image_path, advice))
                consultation_id = cursor.fetchone()[0]
                conn.commit()
                conn.close()
            else:
                consultation_query = '''
                INSERT INTO consultations (user_id, occasion, preferences, image_path, advice, created_at)
                VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
                '''
                consultation_id = self._execute_query(consultation_query, (internal_user_id, occasion, preferences, image_path, advice))
            
            self.logger.info(f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª—è telegram_id={user_id} (internal_id={internal_user_id}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID={consultation_id}.")
            return consultation_id
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
            return None

    def get_consultation(self, consultation_id: int, user_id: Optional[int] = None) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        self.logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ID={consultation_id}" + (f" –¥–ª—è user_id={user_id}" if user_id else ""))
        
        try:
            if user_id:
                query = 'SELECT * FROM consultations WHERE id = ? AND user_id = ?'
                params = (consultation_id, user_id)
            else:
                query = 'SELECT * FROM consultations WHERE id = ?'
                params = (consultation_id,)
                
            consultation_row = self._execute_query(query, params, fetch_one=True)
            
            if consultation_row:
                consultation_dict = {
                    'id': consultation_row[0],
                    'user_id': consultation_row[1],
                    'occasion': consultation_row[2],
                    'preferences': consultation_row[3],
                    'image_path': consultation_row[4],
                    'advice': consultation_row[5],
                    'created_at': consultation_row[6]
                }
                self.logger.info(f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ID={consultation_id} –Ω–∞–π–¥–µ–Ω–∞.")
                return consultation_dict
            else:
                self.logger.info(f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ID={consultation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" + (f" –¥–ª—è user_id={user_id}." if user_id else "."))
                return None
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ID={consultation_id}: {e}", exc_info=True)
            return None

    def get_user_consultations(self, user_id: int, limit: int = 20):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            query = """
                SELECT id, user_id, occasion, preferences, image_path, advice, created_at
                FROM consultations 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT ?
            """
            
            consultations = self._execute_query(query, (user_id, limit), fetch_all=True)
            
            self.logger.info(f"üìö –ü–æ–ª—É—á–µ–Ω–æ {len(consultations)} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return consultations
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞ –ú–ò–®–£–†–ê"""
        self.logger.debug("–ó–∞–ø—Ä–æ—Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞.")
        stats = {
            'total_users': 0,
            'total_consultations': 0,
            'daily_consultations': 0,
            'total_payments_completed': 0
        }
        try:
            stats['total_users'] = self._execute_query('SELECT COUNT(*) FROM users', fetch_one=True)[0]
            stats['total_consultations'] = self._execute_query('SELECT COUNT(*) FROM consultations', fetch_one=True)[0]
            
            if DB_CONFIG['type'] == 'postgresql':
                daily_query = "SELECT COUNT(*) FROM consultations WHERE created_at >= NOW() - INTERVAL '1 day'"
            else:
                daily_query = "SELECT COUNT(*) FROM consultations WHERE created_at >= datetime('now', '-1 day')"
            
            stats['daily_consultations'] = self._execute_query(daily_query, fetch_one=True)[0]
            
            self.logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ú–ò–®–£–†–ê –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        return stats


# === –§–£–ù–ö–¶–ò–ò –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===

def get_connection():
    """–§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    db_instance = MishuraDB()
    return db_instance.get_connection()

def init_db(schema_file_path: str = SCHEMA_FILE) -> bool:
    """–§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    db_instance = MishuraDB()
    return db_instance.init_db(schema_file_path)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ database.py –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏).")
    db_instance = MishuraDB()
    if db_instance:
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ __main__.")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ __main__.")