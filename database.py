"""
==========================================================================================
–ü–†–û–ï–ö–¢: –ú–ò–®–£–†–ê - –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–°—Ç–∏–ª–∏—Å—Ç
–ö–û–ú–ü–û–ù–ï–ù–¢: –ú–æ–¥—É–ª—å –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö (database.py)
–í–ï–†–°–ò–Ø: 0.2.0 - –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –ë–î
–î–ê–¢–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø: 2025-06-20

–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –ë–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ FOREIGN KEY
==========================================================================================
"""
import sqlite3
import os
from datetime import datetime
import logging
from typing import Optional, Dict, Any, List, Union

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
logger = logging.getLogger("MishuraDB")
if not logger.handlers:
    logging.basicConfig(
        format="%(asctime)s - [%(levelname)s] - %(name)s - (%(filename)s).%(funcName)s(%(lineno)d): %(message)s",
        level=logging.INFO
    )

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ú–ò–®–£–†–ê.")

# –ò–º—è —Ñ–∞–π–ª–∞ –ë–î
DB_FILENAME = "styleai.db"
DB_PATH = DB_FILENAME 
SCHEMA_FILE = "schema.sql"

class MishuraDB:
    """
    üé≠ –ú–ò–®–£–†–ê Database Class
    –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite
    """
    
    def __init__(self, db_path: str = DB_PATH):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ú–ò–®–£–†–ê"""
        self.db_path = db_path
        self.logger = logger
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –ë–î
        self.force_recreate_db()
        
        self.logger.info(f"‚úÖ MishuraDB –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.db_path}")
    
    def force_recreate_db(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π"""
        self.logger.info("üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        try:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å
            if os.path.exists(self.db_path):
                os.remove(self.db_path)
                self.logger.info(f"üóëÔ∏è –°—Ç–∞—Ä–∞—è –ë–î —É–¥–∞–ª–µ–Ω–∞: {self.db_path}")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ë–î —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π
            self.init_db()
            
            self.logger.info("‚úÖ –ë–î —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞ —Å –Ω–æ–≤–æ–π —Å—Ö–µ–º–æ–π")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –ë–î: {e}")
            raise
    
    def get_connection(self) -> sqlite3.Connection:
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö SQLite.
        –í–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π.
        """
        try:
            conn = sqlite3.connect(self.db_path, timeout=10)
            conn.execute("PRAGMA foreign_keys = ON;")
            return conn
        except sqlite3.Error as e:
            self.logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î {self.db_path}: {e}", exc_info=True)
            raise
    
    def init_db(self, schema_file_path: str = SCHEMA_FILE) -> bool:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info(f"–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏/–ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{self.db_path}' —Å–æ —Å—Ö–µ–º–æ–π '{schema_file_path}'")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Ö–µ–º—ã
        actual_schema_path = schema_file_path
        if not os.path.exists(actual_schema_path):
            self.logger.warning(f"–§–∞–π–ª —Å—Ö–µ–º—ã '{actual_schema_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ({os.getcwd()}). –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ä—è–¥–æ–º —Å database.py...")
            script_dir = os.path.dirname(os.path.abspath(__file__))
            path_near_script = os.path.join(script_dir, schema_file_path)
            if os.path.exists(path_near_script):
                actual_schema_path = path_near_script
                self.logger.info(f"–§–∞–π–ª —Å—Ö–µ–º—ã –Ω–∞–π–¥–µ–Ω –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É –ø—É—Ç–∏: {actual_schema_path}")
            else:
                self.logger.critical(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –§–∞–π–ª SQL-—Å—Ö–µ–º—ã '{schema_file_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
                return False
                
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                with open(actual_schema_path, 'r', encoding='utf-8') as f:
                    sql_script = f.read()
                
                cursor.executescript(sql_script)
                conn.commit()
                self.logger.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '{self.db_path}' —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞/–ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ —Å—Ö–µ–º–æ–π '{actual_schema_path}'.")
                return True
        except sqlite3.Error as e_sql:
            self.logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ({self.db_path}): {e_sql}", exc_info=True)
        except FileNotFoundError:
            self.logger.error(f"–§–∞–π–ª SQL-—Å—Ö–µ–º—ã '{actual_schema_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω.", exc_info=True)
        except Exception as e:
            self.logger.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", exc_info=True)
        return False

    # --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---
    
    def get_user_by_telegram_id(self, telegram_id):
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            cursor.execute("""
                SELECT id, telegram_id, username, first_name, last_name, created_at
                FROM users 
                WHERE telegram_id = ?
            """, (telegram_id,))
            user = cursor.fetchone()
            conn.close()
            
            if user:
                return {
                    'id': user[0],
                    'telegram_id': user[1], 
                    'username': user[2],
                    'first_name': user[3],
                    'last_name': user[4],
                    'created_at': user[5]
                }
            return None
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {str(e)}")
            return None

    def save_user(self, telegram_id, username=None, first_name=None, last_name=None, initial_balance=200):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            cursor.execute("SELECT id, balance FROM users WHERE telegram_id = ?", (telegram_id,))
            existing_user = cursor.fetchone()
            
            if existing_user:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                user_id, current_balance = existing_user
                cursor.execute("""
                    UPDATE users 
                    SET username = COALESCE(?, username),
                        first_name = COALESCE(?, first_name),
                        last_name = COALESCE(?, last_name),
                        updated_at = CURRENT_TIMESTAMP
                    WHERE telegram_id = ?
                """, (username, first_name, last_name, telegram_id))
                
                conn.commit()
                conn.close()
                
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ID={user_id}, telegram_id={telegram_id}, –±–∞–ª–∞–Ω—Å={current_balance}")
                return user_id
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                cursor.execute("""
                    INSERT INTO users (telegram_id, username, first_name, last_name, balance, created_at, updated_at)
                    VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
                """, (telegram_id, username or 'webapp_user', first_name or 'WebApp', 
                      last_name or 'User', initial_balance))
                
                user_id = cursor.lastrowid
                conn.commit()
                conn.close()
                
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ID={user_id}, telegram_id={telegram_id}, –±–∞–ª–∞–Ω—Å={initial_balance}")
                return user_id
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id={telegram_id}: {e}")
            if 'conn' in locals():
                conn.rollback()
                conn.close()
            raise

    def get_user(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ –µ–≥–æ telegram_id"""
        self.logger.debug(f"–ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: telegram_id={telegram_id}")
        sql = 'SELECT id, telegram_id, username, first_name, last_name, balance, created_at FROM users WHERE telegram_id = ?'
        try:
            with self.get_connection() as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute(sql, (telegram_id,))
                user_row = cursor.fetchone()
            
            if user_row:
                user_dict = dict(user_row)
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} –Ω–∞–π–¥–µ–Ω: {user_dict}")
                return user_dict
            else:
                self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return None
        except sqlite3.Error as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id={telegram_id}: {e}", exc_info=True)
        except Exception as e_gen:
            self.logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id={telegram_id}: {e_gen}", exc_info=True)
        return None
        
    def get_user_balance(self, telegram_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.logger.debug(f"–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: telegram_id={telegram_id}")
        sql = 'SELECT balance FROM users WHERE telegram_id = ?'
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(sql, (telegram_id,))
                result = cursor.fetchone()
            
            if result:
                balance = result[0]
                self.logger.info(f"–ë–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id={telegram_id} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: {balance}")
                return balance
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
                self.logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞")
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º 200 STCoins
                initial_balance = 200
                user_id = self.save_user(
                    telegram_id=telegram_id,
                    username='webapp_user',
                    first_name='WebApp',
                    last_name='User',
                    initial_balance=initial_balance
                )
                
                if user_id:
                    self.logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å telegram_id={telegram_id} —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º {initial_balance}")
                    return initial_balance
                else:
                    return 0
                    
        except sqlite3.Error as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id={telegram_id}: {e}", exc_info=True)
        except Exception as e_gen:
            self.logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è telegram_id={telegram_id}: {e_gen}", exc_info=True)
        return 0
        
    def update_user_balance(self, telegram_id: int, amount_change: int, operation_type="manual") -> int:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–µ–ª–∏—á–∏–Ω—É"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            current_balance = self.get_user_balance(telegram_id)
            new_balance = current_balance + amount_change
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            cursor.execute("""
                UPDATE users 
                SET balance = ?, updated_at = CURRENT_TIMESTAMP
                WHERE telegram_id = ?
            """, (new_balance, telegram_id))
            
            if cursor.rowcount == 0:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                user_id = self.save_user(
                    telegram_id=telegram_id,
                    username='webapp_user',
                    first_name='WebApp',
                    last_name='User',
                    initial_balance=new_balance
                )
                
                if not user_id:
                    conn.rollback()
                    conn.close()
                    return current_balance
            
            conn.commit()
            conn.close()
            
            self.logger.info(f"–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {current_balance} {'+' if amount_change >= 0 else ''}{amount_change} = {new_balance} ({operation_type})")
            
            return new_balance
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è telegram_id={telegram_id}: {e}")
            if 'conn' in locals():
                conn.rollback()
                conn.close()
            return current_balance if 'current_balance' in locals() else 0

    # --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø–ú–ò ---
    
    def save_consultation(self, user_id: int, occasion: Optional[str], preferences: Optional[str], image_path: Optional[str], advice: Optional[str]) -> Optional[int]:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}, –ø–æ–≤–æ–¥: {occasion}")
        sql = '''
        INSERT INTO consultations (user_id, occasion, preferences, image_path, advice, created_at)
        VALUES (?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
        '''
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: user_id —Ç–µ–ø–µ—Ä—å —ç—Ç–æ telegram_id, –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π internal ID
                cursor.execute("SELECT id FROM users WHERE telegram_id = ?", (user_id,))
                user_row = cursor.fetchone()
                
                if not user_row:
                    self.logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id={user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return None
                
                internal_user_id = user_row[0]
                
                cursor.execute(sql, (internal_user_id, occasion, preferences, image_path, advice))
                consultation_id = cursor.lastrowid
                conn.commit()
            self.logger.info(f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –¥–ª—è telegram_id={user_id} (internal_id={internal_user_id}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å ID={consultation_id}.")
            return consultation_id
        except sqlite3.IntegrityError as e_int:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ SQLite –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e_int}", exc_info=True)
        except sqlite3.Error as e_sql:
            self.logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e_sql}", exc_info=True)
        except Exception as e_gen:
            self.logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –¥–ª—è user_id={user_id}: {e_gen}", exc_info=True)
        return None

    def get_consultation(self, consultation_id: int, user_id: Optional[int] = None) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        self.logger.debug(f"–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ID={consultation_id}" + (f" –¥–ª—è user_id={user_id}" if user_id else ""))
        
        if user_id:
            sql = 'SELECT * FROM consultations WHERE id = ? AND user_id = ?'
            params = (consultation_id, user_id)
        else:
            sql = 'SELECT * FROM consultations WHERE id = ?'
            params = (consultation_id,)
            
        try:
            with self.get_connection() as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute(sql, params)
                consultation_row = cursor.fetchone()
            
            if consultation_row:
                consultation_dict = dict(consultation_row)
                self.logger.info(f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ID={consultation_id} –Ω–∞–π–¥–µ–Ω–∞.")
                return consultation_dict
            else:
                self.logger.info(f"–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ID={consultation_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" + (f" –¥–ª—è user_id={user_id}." if user_id else "."))
                return None
        except sqlite3.Error as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ID={consultation_id}: {e}", exc_info=True)
        except Exception as e_gen:
            self.logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ID={consultation_id}: {e_gen}", exc_info=True)
        return None

    def get_user_consultations(self, user_id: int, limit: int = 20):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            conn = self.get_connection()
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT id, user_id, occasion, preferences, image_path, advice, created_at
                FROM consultations 
                WHERE user_id = ? 
                ORDER BY created_at DESC 
                LIMIT ?
            """, (user_id, limit))
            
            consultations = cursor.fetchall()
            conn.close()
            
            self.logger.info(f"üìö –ü–æ–ª—É—á–µ–Ω–æ {len(consultations)} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return consultations
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    # --- –û–°–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
    # (–≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏...)
    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏
    
    def record_payment(self, user_id: int, amount_rub: int, status: str = "pending", payment_provider_id: Optional[str] = None) -> Optional[int]:
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self.logger.info(f"–ó–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={user_id}, —Å—É–º–º–∞: {amount_rub} RUB, —Å—Ç–∞—Ç—É—Å: {status}")
        sql = '''
        INSERT INTO payments (user_id, amount, status, created_at, payment_provider_id) 
        VALUES (?, ?, ?, CURRENT_TIMESTAMP, ?)
        '''
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(sql, (user_id, amount_rub, status, payment_provider_id))
                payment_id = cursor.lastrowid
                conn.commit()
            self.logger.info(f"–ü–ª–∞—Ç–µ–∂ –¥–ª—è user_id={user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω —Å ID={payment_id}.")
            return payment_id
        except sqlite3.Error as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        except Exception as e_gen:
            self.logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è user_id={user_id}: {e_gen}", exc_info=True)
        return None

    def update_payment_status(self, payment_id: int, new_status: str) -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
        self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ ID={payment_id} –Ω–∞ '{new_status}'")
        sql = 'UPDATE payments SET status = ? WHERE id = ?'
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(sql, (new_status, payment_id))
                conn.commit()
                if cursor.rowcount > 0:
                    self.logger.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ID={payment_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}'.")
                    return True
                else:
                    self.logger.warning(f"–ü–ª–∞—Ç–µ–∂ ID={payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞.")
                    return False
        except sqlite3.Error as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ ID={payment_id}: {e}", exc_info=True)
        except Exception as e_gen:
            self.logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ ID={payment_id}: {e_gen}", exc_info=True)
        return False

    def get_stats(self) -> Dict[str, int]:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–∏—Å–∞ –ú–ò–®–£–†–ê"""
        self.logger.debug("–ó–∞–ø—Ä–æ—Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞.")
        stats = {
            'total_users': 0,
            'total_consultations': 0,
            'daily_consultations': 0,
            'total_payments_completed': 0
        }
        try:
            with self.get_connection() as conn:
                cursor = conn.cursor()
                
                cursor.execute('SELECT COUNT(*) FROM users')
                stats['total_users'] = cursor.fetchone()[0]
                
                cursor.execute('SELECT COUNT(*) FROM consultations')
                stats['total_consultations'] = cursor.fetchone()[0]
                
                cursor.execute("SELECT COUNT(*) FROM consultations WHERE created_at >= datetime('now', '-1 day')")
                stats['daily_consultations'] = cursor.fetchone()[0]
                
            self.logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –ú–ò–®–£–†–ê –ø–æ–ª—É—á–µ–Ω–∞: {stats}")
        except sqlite3.Error as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}", exc_info=True)
        except Exception as e_gen:
            self.logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e_gen}", exc_info=True)
        return stats

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–∞—Ä–¥–µ—Ä–æ–±–∞ –∫–æ–ø–∏—Ä—É–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    # (save_wardrobe_item, get_user_wardrobe, etc.)


# === –§–£–ù–ö–¶–ò–ò –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò ===
# (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–ø–∏—Ä—É–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...)

def get_connection() -> sqlite3.Connection:
    """–§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    try:
        conn = sqlite3.connect(DB_PATH, timeout=10)
        conn.execute("PRAGMA foreign_keys = ON;")
        return conn
    except sqlite3.Error as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –ë–î {DB_PATH}: {e}", exc_info=True)
        raise

def init_db(schema_file_path: str = SCHEMA_FILE) -> bool:
    """–§—É–Ω–∫—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    db_instance = MishuraDB()
    return db_instance.init_db(schema_file_path)

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ database.py –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏).")
    db_instance = MishuraDB()
    if db_instance:
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ __main__.")
    else:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–∑ __main__.")